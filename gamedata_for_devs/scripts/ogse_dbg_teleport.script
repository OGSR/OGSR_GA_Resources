-- -*- mode: lua; coding: windows-1251-dos -*-

function attach(sm)
	if not ogse.is_developer_mode() then return end --KRodin: должно работать только в режиме разработчика.

	sm:subscribe({signal = "on_key_down", fun = this.on_key_down})
end

function on_key_down(key, bind)
	if GetAlt() and key == DIK_keys.DIK_NUMPADENTER and not level.main_input_receiver() then
		level.start_stop_menu(mobile_changer(), true)
		return true
	end
end

levels = {
	"l01_escape",
	"l02_garbage",
	"l03_agroprom",
	"l03u_agr_underground",
	"l04_darkvalley",
	"l04u_labx18",
	"l05_bar",
	"l06_rostok",
	"l08_yantar",
	"l08u_brainlab",
	"l07_military",
	"l10_radar",
	"l10u_bunker",
	"l11_pripyat",
	"l12_stancia",
	"l12u_sarcofag",
	"l12u_control_monolith",
	"l12_stancia_2",
	"k01_darkscape_ogse",
	"l09_deadcity_ogse",
	"l13_generators_ogse",
	"l22_marsh",
	"l23_x9",
}

-- функция возвращает уникальное имя на основе базовой части и счётчика
-- возвращает три значения: полное имя, часть, не включающую стандартный каталог, только имя с расширением
function get_unique_fname(
					base_dir, -- стандартный каталог вида "$name$"
					add_dir,  -- добавочный путь
					prefix,   -- базовая часть имени
					ext)      -- расширение без точки
	local fs = getFS()
	local i = 0
	local add_suffix = "" -- начинаем вообще без суффикса
	while true do
		local fname = prefix..add_suffix..'.'..ext
		local add_name = add_dir and (add_dir..'\\'..fname) or fname
		-- если стандартный базовый каталог не задан, то считаем, что add_name - это валидный путь
		local full_path = base_dir and fs:update_path(base_dir, add_name) or add_name
		if not fs:exist(full_path) then
			return full_path, add_name, fname
		end
		add_suffix = "_"..i
		i = i + 1
	end
end
local function save_change_list()
	-- делаем резервную копию
	local fs = getFS()
	local backup_name = get_unique_fname("$game_scripts$", nil, "_change_list", "bak")
	log1(backup_name)
	local file_name = fs:update_path("$game_scripts$", "_change_list.script")
	fs:file_copy(file_name, backup_name)
	-- пишем информацию
	local file = io.open(file_name, "w")
	file:write("levels = {\n")
	for _,level_name in ipairs(levels) do -- перебираем список уровней, чтобы охранить порядок записи в файле
		local level_locations = _change_list.levels[level_name]
		if level_locations then
			file:write("\t"..level_name.." = {\n")
			for _,loc in ipairs(level_locations) do
				file:write("\t\t{\n")
				--
				file:write("\t\t\tname  = [["..(loc.name or "").."]],\n")
				file:write("\t\t\tpic   = [["..loc.pic.."]],\n")
				file:write(string.format("\t\t\tpos = {%f,%f,%f},\n", unpack(loc.pos)))
				file:write(string.format("\t\t\tdir = {%f,%f,%f},\n", unpack(loc.dir)))
				file:write("\t\t\tlvid  = "..loc.lvid..",\n")
				file:write("\t\t\tgvid  = "..loc.gvid..",\n")
				--
				file:write("\t\t},\n")
			end
			file:write("\t},\n")
		end
	end
	file:write("}\n")
	file:close()
end

local xml = CScriptXmlInit()
xml:ParseFile("_mobile_changer.xml")

class "list_item" (CUIListItemEx) --\\ отдельный класс для ItemList. Обязательное условие.

function list_item:__init(txt) super()
local xml = CScriptXmlInit()
xml:ParseFile("_mobile_changer.xml")
	xml:InitWindow("list:list_item", 0, self)
	self.fn = xml:InitStatic("list:list_item:bgnd", self)
	self.fn:SetText(txt)  --загрузить текст
	self:SetSelectionColor(GetARGB(255, 0, 0, 255))
end

--\\-------------------------------------------------------
--\\ Скрипт мобильного чейнджера
--\\-------------------------------------------------------
class "mobile_changer" (CUIScriptWnd)

-- обновить формат списка локаций
function mobile_changer:update_locations_format()
	for level_name,level_locations in pairs(_change_list.levels) do
		for _,loc in ipairs(level_locations) do
			if not loc.pos then
				loc.pos = {loc.pos_x, loc.pos_y, loc.pos_z}
			end
			if not loc.dir then
				loc.dir = {0.0, 0.0, 0.0}
			end
		end
	end
end
--инициализация
function mobile_changer:__init() super()
	--
    db.actor:hide_weapon()
	--
	self:update_locations_format()
	--
	local xml = CScriptXmlInit()
-----------------------------------------
-- интерфейс
	xml:ParseFile("_mobile_changer.xml")
	
	xml:InitWindow("main", 0, self)    -- главное окно
	xml:InitStatic("background", self) -- фон главного окна

-- список локаций
	self.list = xml:InitList("list", self)
	--self.list:ShowSelectedItem(false)
	--self.list:EnableScrollBar(true)
	self:Register(self.list, "list_window")
	self:AddCallback("list_window", ui_events.LIST_ITEM_CLICKED, self.OnListItemClicked, self) --клик по итему
	
	self.lname = level.name()
	for level_num,level_sysname in pairs(levels) do
	    local _itm	= list_item(level_name_by_level_system_name(level_sysname))  --\\ класс "list_item"
		self.list:AddItem(_itm)
		if self.lname == level_sysname then
			self.list:SetSelectedItem(level_num - 1) -- индекс в списке от нуля, а массив Lua от единицы
		end
    end
-- блок ввода координат
    self.info = xml:InitStatic("info", self)
	
	local x_pos_cap = xml:InitStatic("info:x_pos_cap", self.info)
	local y_pos_cap = xml:InitStatic("info:y_pos_cap", self.info)
	local z_pos_cap = xml:InitStatic("info:z_pos_cap", self.info)
	local lvid_cap = xml:InitStatic("info:lvid_cap", self.info)
	local gvid_cap = xml:InitStatic("info:gvid_cap", self.info)
	--local lvl_cap = xml:InitStatic("info:level_cap", self.info)
	
	self.x_pos = xml:InitEditBox ("info:edit", x_pos_cap)
	self.y_pos = xml:InitEditBox ("info:edit", y_pos_cap)
	self.z_pos = xml:InitEditBox ("info:edit", z_pos_cap)
	
	self.lvid = xml:InitEditBox ("info:edit", lvid_cap)
	self.gvid = xml:InitEditBox ("info:edit", gvid_cap)
	--self.level_name = xml:InitEditBox ("info:edit", lvl_cap)
-- Enter
    local teleport_btn = xml:Init3tButton("info:enter", self.info)
	teleport_btn:EnableTextHighlighting(true)
	self:Register(teleport_btn, "teleport")
	self:AddCallback("teleport", ui_events.BUTTON_CLICKED, self.TeleportFromDlg, self)
-- зона с изображениями
	self.loc_list = xml:InitList("loc_list", self)
	--
	self.del_loc_msg_box = CUIMessageBoxEx()
	self:Register(self.del_loc_msg_box,"del_loc_msg_box")
	self:AddCallback("del_loc_msg_box", ui_events.MESSAGE_BOX_YES_CLICKED, self.on_delete_location_confirm, self)
-- имитируем нажатие на пункт списка
	self:OnListItemClicked()
end
class "loc_row" (CUIListItemEx)

function loc_row:__init(host_wnd, msg_handler, start_index) super()
	self.host = host_wnd
	self.msg_handler = msg_handler
	--
	self.xml = CScriptXmlInit()
	self.xml:ParseFile("_mobile_changer.xml")
	--
	self.xml:InitWindow("loc_list:loc_row", 0, self)
	local locations = _change_list.levels[host_wnd.lname]
	for i=start_index,start_index+3 do
		if i > #locations + 1 then break end
		host_wnd.loc_items[i] = self:create_location_group(i)
	end
end

function loc_row:create_location_group(index)
	local loc = _change_list.levels[self.host.lname][index]
	--
	local bgnd = self.xml:InitStatic("loc_list:loc_row:loc_item", self)
	bgnd:SetWndPos(math.fmod(index-1, 4) * bgnd:GetWidth(), 0)
	local sel_frame, btn
	local loc_title = self.xml:InitStatic("loc_list:loc_row:loc_item:loc_title", bgnd)
	if loc then
		loc_title:SetText(loc.name or "")
		sel_frame = self.xml:InitStatic("loc_list:loc_row:loc_item:highlight_frame", bgnd)
		
		sel_frame:Show(false) -- рамка выделения по умолчанию скрыта
		
		local loc_img = self.xml:InitStatic("loc_list:loc_row:loc_item:loc_img", bgnd)
		loc_img:InitTexture(loc.pic)
		loc_img:SetOriginalRect(0, 0, 128, 96)
		loc_img:SetStretchTexture(true)
		--
		local loc_btn_wname = "loc_btn"..index
		btn = xml:Init3tButton("loc_list:loc_row:loc_item:loc_btn", bgnd)
		self.msg_handler:Register(btn, loc_btn_wname)
		self.msg_handler:AddCallback(loc_btn_wname, ui_events.WINDOW_LBUTTON_DB_CLICK, 
			function(self)
				self.host.selected_location = index
				self.host:Teleport()
			end,
			self)
		self.msg_handler:AddCallback(loc_btn_wname, ui_events.BUTTON_CLICKED,
			function(self)
				self.host.selected_location = index
				self.host:update_selected_location()
			end,
			self)

		local del_btn_wname = "del_btn"..index
		local del_btn = xml:Init3tButton("loc_list:loc_row:loc_item:del_btn", bgnd)
		self.msg_handler:Register(del_btn, del_btn_wname)
		self.msg_handler:AddCallback(del_btn_wname, ui_events.BUTTON_CLICKED, 
			function(self)
				self.host.location_to_remove = index
				self.host.del_loc_msg_box:Init("message_box_teleport_loc_del")
				self.host:GetHolder():start_stop_menu(self.host.del_loc_msg_box, true)
			end,
			self)
	end
	local insert_btn = xml:Init3tButton("loc_list:loc_row:loc_item:insert_btn", bgnd)
	--
	local insert_btn_wname = "insert_btn"..index
	self.msg_handler:Register(insert_btn, insert_btn_wname)
	self.msg_handler:AddCallback(
		insert_btn_wname,
		ui_events.WINDOW_LBUTTON_DB_CLICK, 
		function(self)
			self.host:Show(false) -- скрываем окно
			dsh.timeout(
				100, --KRodin: меньше не делать! Иначе окно не успеет исчезнуть.
				function()
					local fs = getFS()
					local full_path, add_name, fname = get_unique_fname("$game_textures$", "level_change\\"..self.host.lname, self.host.lname, "dds")

					screenshot(screenshot_modes.gamesave, full_path) -- снимаем скриншот при скрытых руках и главном окне
					self.host:Show(true) -- показываем окно

					-- открываем диалог редактирования точки перехода
					local ins_dlg = InsertNewLocationInfo(self.host, index, add_name)
					self.host:GetHolder():start_stop_menu(ins_dlg, false)
				end
			)
		end,
		self
	)
	--
	local loc_group = {bgnd = bgnd, title = loc_title, sel_frame = sel_frame, insert_btn = insert_btn, btn = btn}
	return loc_group
end

class "InsertNewLocationInfo" (CUIScriptWnd)
function InsertNewLocationInfo:__init(host_wnd, index, texture_name) super()
	self.host = host_wnd
	self.texture_name = texture_name
	self.insert_pos = index
	--
	self.xml = CScriptXmlInit()
	self.xml:ParseFile("_mobile_changer.xml")
	--
	self.xml:InitWindow("insert_dialog", 0, self)
	
	xml:InitStatic("insert_dialog:title", self) -- заголовок
	self.bg = xml:InitStatic("insert_dialog:bg", self) -- фон главного окна
	self.edit_bg = xml:InitStatic("insert_dialog:bg:edit_block", self.bg) -- блок полей ввода
	--
	local name_cap = xml:InitStatic("insert_dialog:bg:edit_block:name_cap", self.edit_bg)
	--
	local x_pos_cap = xml:InitStatic("insert_dialog:bg:edit_block:x_pos_cap", self.edit_bg)
	local y_pos_cap = xml:InitStatic("insert_dialog:bg:edit_block:y_pos_cap", self.edit_bg)
	local z_pos_cap = xml:InitStatic("insert_dialog:bg:edit_block:z_pos_cap", self.edit_bg)
	--
	local lvid_cap = xml:InitStatic("insert_dialog:bg:edit_block:lvid_cap", self.edit_bg)
	local gvid_cap = xml:InitStatic("insert_dialog:bg:edit_block:gvid_cap", self.edit_bg)
	--local lvl_cap = xml:InitStatic("insert_dialog:bg:edit_block:level_cap", self.edit_bg)
	--
	self.name = xml:InitEditBox ("insert_dialog:bg:edit_block:name_edit", name_cap)
	--
	self.x_pos = xml:InitEditBox ("insert_dialog:bg:edit_block:edit1", x_pos_cap)
	self.y_pos = xml:InitEditBox ("insert_dialog:bg:edit_block:edit2", y_pos_cap)
	self.z_pos = xml:InitEditBox ("insert_dialog:bg:edit_block:edit2", z_pos_cap)
	--
	self.lvid = xml:InitEditBox ("insert_dialog:bg:edit_block:edit1", lvid_cap)
	self.gvid = xml:InitEditBox ("insert_dialog:bg:edit_block:edit2", gvid_cap)
	--self.level_name = xml:InitEditBox ("insert_dialog:bg:edit_block:edit2", lvl_cap)
	--

	local screen_shot_frame = self.xml:InitStatic("insert_dialog:bg:scr_frame", self.bg)
	local screen_shot = self.xml:InitStatic("insert_dialog:bg:scr_frame:scr", screen_shot_frame)
	screen_shot:InitTexture(texture_name)
	local yes_btn = xml:Init3tButton("insert_dialog:bg:yes_btn", self.bg)
	self:Register(yes_btn, "yes_btn")
	self:AddCallback("yes_btn", ui_events.BUTTON_CLICKED, self.on_yes_clicked, self)
	
	local cancel_btn = xml:Init3tButton("insert_dialog:bg:cancel_btn", self.bg)
	self:Register(cancel_btn, "cancel_btn")
	self:AddCallback("cancel_btn", ui_events.BUTTON_CLICKED, self.on_quit, self)
	-- заполняем данными
	local lvid, gvid = db.actor:level_vertex_id(), db.actor:game_vertex_id()
	local apos = db.actor:position()
	local x,y,z = apos.x, apos.y, apos.z
	self.dir = {-device().cam_dir:getP(), device().cam_dir:getH(), 0.0}
    --
	self.x_pos:SetText(string.format("%7.2f", x))
	self.y_pos:SetText(string.format("%7.2f", y))
	self.z_pos:SetText(string.format("%7.2f", z))
	--
	self.lvid:SetText(tostring(lvid))
	self.gvid:SetText(tostring(gvid))
end 
function InsertNewLocationInfo:on_yes_clicked()
	local apos = {}
	apos[1] = tonumber(self.x_pos:GetText())
	apos[2] = tonumber(self.y_pos:GetText())
	apos[3] = tonumber(self.z_pos:GetText())
	--вывод ошибки в координатах
	if     not apos[1] then ogse.autohiding_msg("Ошибка в координате Х", 1000) return
	elseif not apos[2] then ogse.autohiding_msg("Ошибка в координате Y", 1000) return
	elseif not apos[3] then ogse.autohiding_msg("Ошибка в координате Z", 1000) return
	end
	local lvid = tonumber(self.lvid:GetText())
	local gvid = tonumber(self.gvid:GetText())
	-- if     not lvid then ogse.autohiding_msg("Ошибка в координате LV", 1000) return
	-- elseif not gvid then ogse.autohiding_msg("Ошибка в координате GV", 1000) return
	-- end
	
	local locations = _change_list.levels[self.host.lname]
	local new_loc = {
		name = self.name:GetText(),
		pic = self.texture_name,
		pos = apos,
		dir = table.clone_simple(self.dir),
		lvid  = lvid,
		gvid  = gvid,
	}
	table.insert(locations, self.insert_pos, new_loc)
	self.host:RepopulateLevelLocations()
	save_change_list()
	self:on_quit()
end
function InsertNewLocationInfo:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik == DIK_keys.DIK_ESCAPE then
			self:on_quit()
		end
	end
	return true
end
function InsertNewLocationInfo:on_quit()
	self:GetHolder():start_stop_menu(self,false)
	--
	self:ClearCallbacks()
end

class "locations_msg_handler" (CUIScriptWnd)
function locations_msg_handler:__init(lname) super()
	self.lname = lname
end

function mobile_changer:on_delete_location_confirm()
	--log3("mobile_changer:on_delete_location_confirm: %s, %d", self.lname, self.location_to_remove)
	local locations = _change_list.levels[self.lname]
	table.remove(locations, self.location_to_remove)
	save_change_list()
	self:RepopulateLevelLocations()
end
function mobile_changer:Update()
	CUIScriptWnd.Update(self)
	if self.need_loc_list_update then
		self.need_loc_list_update = false
		self:RepopulateLevelLocations()
	end
end
function mobile_changer:update_selected_location()
	if self.selected_location then
		local loc = _change_list.levels[self.lname][self.selected_location]
		ASSERT(loc, "")
		self.x_pos:SetText(tostring(loc.pos[1]))
		self.y_pos:SetText(tostring(loc.pos[2]))
		self.z_pos:SetText(tostring(loc.pos[3]))
		self.lvid:SetText(tostring(loc.lvid))
		self.gvid:SetText(tostring(loc.gvid))
	else
		self.x_pos:SetText("")
		self.y_pos:SetText("")
		self.z_pos:SetText("")
		self.lvid:SetText("")
		self.gvid:SetText("")
	end
	for i,loc_grp in pairs(self.loc_items) do
		selected = (i == self.selected_location)
		if loc_grp.sel_frame then
			loc_grp.sel_frame:Show(selected)
		end
	end
end
function mobile_changer:RepopulateLevelLocations()
	self.selected_location = nil
	self.loc_items = {}
	self.loc_list:RemoveAll()
	self.loc_msg_handler = locations_msg_handler(self.lname)
	local locations = _change_list.levels[self.lname]
	if not locations then
		locations = {}
		_change_list.levels[self.lname] = locations
	end
	for i=1,#locations+1,4 do
		local item = loc_row(self, self.loc_msg_handler, i)
		self.loc_list:AddItem(item)
	end
	self:update_selected_location()
end
--функция выбора локации
function mobile_changer:OnListItemClicked()
	local index = self.list:GetSelectedItem() -- определить индекс нажатого итема	
	for i=0, self.list:GetSize() - 1 do
		local item = self.list:GetItem(i)
	    item.fn:InitTexture(i == index and "ui\\ui_btn_mm_t" or "ui\\ui_btn_mm_e")
		item.fn:SetOriginalRect(0, 0, 255, 37)
	end
	if index ~= -1 then 
		self.lname = levels[index + 1]
	else
		self.lname = nil
	end
	self:RepopulateLevelLocations()
end

function teleport_actor(lvid, gvid, pos, dir)
	local lname = level_system_name_by_gvid(gvid)
	local car = ogse_car_control.get_actor_car()
    if level.name() == lname and not car then
		local new_pos = vector():set(unpack(pos))
		db.actor:set_actor_position(new_pos)
		db.actor:set_camera_direction(vector():set(-dir[2], dir[1], 0))
	else
		local apos = db.actor:position()
		ogse_lc_mngr.create_actor_teleporter({gvid = gvid, lvid = lvid, pos = pos, dir = dir})
	end
end
function mobile_changer:Teleport()
	local loc = _change_list.levels[self.lname][self.selected_location]
	teleport_actor(loc.lvid, loc.gvid, loc.pos, loc.dir)
    self:on_quit()
end
--функция старта телепортации (Teleport)
function mobile_changer:TeleportFromDlg()
	local pos = {}
	pos[1] = tonumber(self.x_pos:GetText())
	pos[2] = tonumber(self.y_pos:GetText())
	pos[3] = tonumber(self.z_pos:GetText())
	--вывод ошибки в координатах
	if     not pos[1] then ogse.autohiding_msg("ogse_dbg_tel_1_text", 1000) return
	elseif not pos[2] then ogse.autohiding_msg("ogse_dbg_tel_2_text", 1000) return
	elseif not pos[3] then ogse.autohiding_msg("ogse_dbg_tel_3_text", 1000) return
	end
	local lvid = tonumber(self.lvid:GetText())
	local gvid = tonumber(self.gvid:GetText())
	-- if     not lvid then ogse.autohiding_msg("Ошибка в координате LV", 1000) return
	-- elseif not gvid then ogse.autohiding_msg("Ошибка в координате GV", 1000) return
	-- end
	
	if not lvid and not gvid then -- подразумеваем что актор хочет произвести локальный прыжок, для этого lv/gv не нужно вообще
		db.actor:set_actor_position(vector():set(unpack(pos)))
		self:on_quit()
		return
	end	

	teleport_actor(lvid, gvid, pos, {0,0,0})
	self:on_quit()
end

--клава
function mobile_changer:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik == DIK_keys.DIK_ESCAPE then
			self:on_quit()
		end
	end
	return true
end

--выход
function mobile_changer:on_quit()
	--
    db.actor:restore_weapon()
	--level.show_indicators()
	--
	self:GetHolder():start_stop_menu(self,true)
	--
	self:ClearCallbacks()
end
