#include "common.h"
#include "sload.h"

uniform float4 m_affects;

f_deffer main(p_flat I)
{
	//Искажение экрана при выбросе
	float problems = cos( ( frac( timers.z * 4 ) - 0.5 ) * 3.1416 )*2 - 0.8;
	float AMPL = 0.3;
	I.tcdh.y -= ( m_affects.x > 0.15 && I.tcdh.x > problems-AMPL && I.tcdh.x < problems+AMPL) ? cos(4.71*(I.tcdh.x-problems)/AMPL) * sin( frac(timers.z)*6.2831*90 )  * (m_affects.x/10) * (AMPL-abs(I.tcdh.x-problems))/AMPL : 0;

	// diffuse
	half3 D = tex2D(s_base, I.tcdh); // IN: rgb.a

#ifdef USE_TDETAIL
	D.rgb = 2 * D.rgb * tex2D(s_detail, I.tcdbump).rgb;
#endif

	// hemi,sun,material
	half ms	= xmaterial;
#ifdef USE_LM_HEMI
	half4 lm = tex2D(s_hemi, I.lmh);
	half h = get_hemi(lm);
#	ifdef USE_R2_STATIC_SUN
	ms = get_sun(lm);
#	endif
#else
	half h = I.position.w;
#	ifdef USE_R2_STATIC_SUN
	ms = I.tcdh.w;
#	endif
#endif

	//отключение экрана
	D.rgb = (m_affects.x > 0.41) ? 0 : D.rgb;

	f_deffer O;
	O.Ne = half4(normalize((half3)I.N.xyz), h);
	O.position = half4(I.position.xyz + O.Ne.xyz * def_virtualh / 2.h, ms);
	O.C = half4(D.rgb, def_gloss); // OUT: rgb.gloss

	return O;
}
