#include "common.h"

// Глобальные параметры шейдеров --#SM+#--

//uniform float4x4 m_script_params; //Не используется, зарезервировано на будущее.

uniform float4 m_hud_params; // zoom_rotate_factor, secondVP_zoom_factor, NULL, NULL
uniform float4 m_affects;

// KRodin: TODO: Вынести в common?
uniform	float4 screen_res;

uniform sampler2D s_vp2;

//////////////////////////////////////////////////////////////////////////////////////////

struct v2p
{
 	float2 tc0: TEXCOORD0;	// base
 	half3 tc1: TEXCOORD1;	// environment
  	half4 c0: COLOR0;		// sun.(fog*fog)
};

float get_noise(float2 co)
{
	return (frac(sin(dot(co.xy ,float2(12.9898,78.233))) * 43758.5453))*0.5;
}

float resize(float input, float factor, float offset)
{
	return (input - 0.5f + offset) / factor + 0.5f - offset;
}

half4 main( v2p I )	: COLOR
{
	half4 t_base = tex2D(s_base, I.tc0); // Текстура сетки
	
	// Растягиваем картинку в линзе так, чтобы на любом разрешении экрана были правильные пропорции
	I.tc0.x = resize(I.tc0.x, screen_res.x / screen_res.y, 0);
	half4 t_vp2	= tex2D(s_vp2, I.tc0); // Изображение со второго вьюпорта
	
	if (!isSecondVPActive()) {
		t_vp2.rgb /= 100; //KRodin: чтобы изображение во втором вьюпорте не застывало после его отключения - просто затемним его в 100 раз.
	}

	// Шум при выбросе
	float blow_noise = get_noise(I.tc0 * timers.z) * m_affects.x * m_affects.x * 30;	
	t_vp2.r += blow_noise;
	t_vp2.g += blow_noise;
	t_vp2.b += blow_noise;			

	// Миксуем с сеткой
	half3 final = lerp(t_vp2, t_base, t_base.a);
	
	// out
	return half4(final.r, final.g, final.b, m_hud_params.x);
}
