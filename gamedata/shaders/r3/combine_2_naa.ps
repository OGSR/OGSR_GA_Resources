#include "common.h"

uniform float4 pnv_color_old;
uniform float4 pnv_params_old;

uniform float4 m_hud_params;
uniform float4 shader_param_grayscale;

uniform float4 fakescope;
uniform float4 m_flare_params;

#include "pnv.h"

// Check Screen Space Shaders modules
#include "check_screenspace.h"

#ifdef SSFX_BEEFS_NVG
#include "night_vision.h"
#endif

#ifdef SSFX_DEBAND
#include "screenspace_debanding.h"
#endif

#ifdef SSFX_FOG
#include "screenspace_fog.h"
#endif

#ifdef SSFX_INDIRECT_LIGHT
#include "screenspace_il.h"
#endif

#include "img_corrections.h"
#include "effects_flare.h"

#include "mblur.h"

Texture2D s_flares;
#ifdef SSFX_BLOOM
Texture2D s_ssfx_bloom;
#endif

float4 main(p_screen I) : SV_Target
{
    int iSample = 0;
    float2 center = I.tc0;

    gbuffer_data gbd = gbuffer_load_data(center, I.hpos, iSample);

    float depth = gbd.P.z;

    float3 img = s_image.Load(int3(center.xy * screen_res.xy, 0), 0);

    img = mblur(center, gbd.P, img.rgb);

    // Indirect light - SCREEN SPACE SHADERS - UPDATE 14
#ifdef SSFX_INDIRECT_LIGHT
    ssfx_il(center, I.hpos, gbd.P, gbd.N, img, iSample);
#endif

// Sky Debanding Implementation  - SCREEN SPACE SHADERS - UPDATE 12.5
#ifdef SSFX_DEBAND
    if (depth <= SKY_EPS)
        img = ssfx_debanding(img, center);
#endif

#ifdef SSFX_BLOOM
    float4 bloom = s_ssfx_bloom.Sample(smp_rtlinear, center);
#else
    float4 bloom = s_bloom.Sample(smp_rtlinear, center);
#endif

#ifdef SSFX_BEEFS_NVG
    // NVG CHANGE TO PREVENT WEIRD COLORS, ONLY APPLY BLOOM WHEN WE'RE NOT IN NVG MASK
    if (pnv_param_1.z == 0.f) // beef pnv off
    {
        if (m_hud_params.x < 1.0 || fakescope.y <= 0)
        {
            img = blend_soft(img, bloom.xyz * bloom.w);
            if (m_actor_position.w > 0.f)
            {
                img += generate_flare(center, m_flare_params.y);

                float4 flares = s_flares.Sample(smp_rtlinear, center);
                img += flares.xyz * flares.a;
            }
        }
    }
#else
    if (m_hud_params.x < 1.0 || fakescope.y <= 0)
    {
        img = blend_soft(img, bloom.xyz * bloom.w);
        if (m_actor_position.w > 0.f)
        {
            img += generate_flare(center, m_flare_params.y);

            float4 flares = s_flares.Sample(smp_rtlinear, center);
            img += flares.xyz * flares.a;
        }
    }
#endif

    // Vanilla color grading ( Exposure, saturation and gamma )
    img = img_corrections(img);

    float3 before = img; // лютый костыль, что б этот долбанный ПНВ не ломал ничего

    if (pnv_param_1.z == 0.f) // beef pnv off
        if (pnv_color_old.w > 1.f) // apply old pnv
            img = calc_night_vision_effect(center, float4(before, 1.0), pnv_color_old, pnv_params_old, fakescope.y);

    // greyscale
    float3 grey = (0.299 * img.r) + (0.587 * img.g) + (0.114 * img.b);
    img = img * (1.f - shader_param_grayscale.x) + grey * shader_param_grayscale.x;

    return float4(img, 1.0);
}
