#include "common.h"

#ifdef USE_TDETAIL

#include "settings_screenspace_PUDDLES.h"
#include "settings_screenspace_SSR.h"
#include "screenspace_common_ripples.h"

#define PARALLAX_NEAR_PLANE 0.01
#define PARALLAX_FAR_PLANE 40
#define PARALLAX_DEPTH 0.013

uniform Texture2D s_puddles_normal;
uniform Texture2D s_puddles_perlin;
uniform Texture2D s_puddles_mask;
uniform Texture2D s_rainsplash;

uniform float4 rain_params;

// Height maps
uniform Texture2D s_dnE_r;
uniform Texture2D s_dnE_g;
uniform Texture2D s_dnE_b;
uniform Texture2D s_dnE_a;

struct surface
{
    float4 base;
    float3 normal;
    float gloss;
};

void perform_tc_offset(inout p_bumped p, in Texture2D s_bumpX_new)
{
    if ((p.position.z > PARALLAX_NEAR_PLANE) && (p.position.z < PARALLAX_FAR_PLANE))
    {
        float3 eye = normalize(mul(float3x3(p.M1.x, p.M2.x, p.M3.x, p.M1.y, p.M2.y, p.M3.y, p.M1.z, p.M2.z, p.M3.z), -p.position));

#if (DEFFER_IBM_MODE == 1)
        p.tcdbump += eye * PARALLAX_DEPTH * (s_bumpX_new.Sample(smp_base, p.tcdbump).ww - 0.5);
#elif (DEFFER_IBM_MODE == 2) || (DEFFER_IBM_MODE == 3)
        // steps minmax and refines minmax
        int4 steps = int4(3, 10, 4, 6); // 3..10, 7..16

        bool need_disp_lerp = true;

#if (DEFFER_IBM_MODE == 2)
        bool need_refine = false;
#elif (DEFFER_IBM_MODE == 3)
        bool need_refine = true;
#endif

        float view_angle = abs(dot(float3(0.0, 0.0, 1.0), eye));

        float layer_step = rcp(lerp(steps.y, steps.x, view_angle));

        float2 tc_step = layer_step * eye.xy * PARALLAX_DEPTH;

        float2 displaced_tc = p.tcdbump;

        float curr_disp, curr_layer = 0;

        do
        {
            displaced_tc -= tc_step;
            curr_disp = 1 - s_bumpX_new.SampleLevel(smp_base, displaced_tc, 0).w;
            curr_layer += layer_step;
        } while (curr_layer < curr_disp);

        if (need_refine)
        {
            displaced_tc += tc_step;
            curr_layer -= layer_step;

            float refine_steps = lerp(steps.w, steps.z, view_angle);

            tc_step /= refine_steps;
            layer_step /= refine_steps;

            do
            {
                displaced_tc -= tc_step;
                curr_disp = 1 - s_bumpX_new.SampleLevel(smp_base, displaced_tc, 0).w;
                curr_layer += layer_step;
            } while (curr_layer < curr_disp);
        }

        if (need_disp_lerp)
        {
            float2 displaced_tc_prev = displaced_tc + tc_step;

            float after_depth = curr_disp - curr_layer;
            float before_depth = 1 - s_bumpX_new.SampleLevel(smp_base, displaced_tc_prev, 0).w - curr_layer + layer_step;

            float weight = after_depth / (after_depth - before_depth);

            displaced_tc = lerp(displaced_tc, displaced_tc_prev, weight);
        }

        p.tcdbump = displaced_tc;
#endif
    }
}

surface fill(p_bumped p, Texture2D s_base_det, Texture2D s_bump_det, Texture2D s_bumpX_det, uint need_mask, float mask)
{
    surface S;

    mask = need_mask ? mask : 1;

    if (mask <= 0)
    {
        S.base = 0;
        S.gloss = 0;
        S.normal = 0;
        return S;
    }

#if defined(DEFFER_IBM_MODE)
    perform_tc_offset(p, s_bumpX_det);
#endif

    S.base = s_base_det.Sample(smp_base, p.tcdbump) * mask;

    float4 Nu = s_bump_det.Sample(smp_base, p.tcdbump);

    S.gloss = Nu.x * mask;
    S.normal = (Nu.wzy - 0.5) * mask;

    return S;
}

f_deffer main(p_bumped I)
{
    // Puddles Implementation - SSS Update 14.6
    // https://www.moddb.com/mods/stalker-anomaly/addons/screen-space-shaders/

    // Wetness factor
    float wetness_f = rain_params.y;

// Always render puddles if G_PUDDLES_ALLWAYS is defined
#ifdef G_PUDDLES_ALLWAYS
    wetness_f = 1.0f;
#endif

    // Intensity factor.
    float puddles_f = wetness_f;

    // Size factor. Convert 0 ~ 1 to 1 ~ -0.1f
    float size_f = (1.0f - G_PUDDLES_SIZE * 1.1f);

    // Texture mask
    float puddles_mask = 1.0f - s_puddles_mask.Sample(smp_base, I.tcdh).r;

    // Puddles perlin
    float puddles = saturate((s_puddles_perlin.Sample(smp_base, I.tcdh * 15.0f / G_PUDDLES_GLOBAL_SIZE).r - size_f) * puddles_f);

    // Get normals and transform space to create a slope mask
    float3 N1 = mul(float3x3(I.M1, I.M2, I.M3), float3(0, 0, 1));
    float3 N2 = mul(m_inv_V, normalize(N1));

    // Slope mask
    float slope = max(N2.x, N2.y);

    // Slope adjustements... Some magic numbers
    slope = saturate((slope - 0.997f) * (102.0f + 0.997f));

    // Slope & texture mask defines final puddles intensity
    puddles *= slope * puddles_mask;

    // Puddles border hardness
    puddles = smoothstep(0, saturate(0.3f - G_PUDDLES_BORDER_HARDNESS * 0.3f), puddles);

#ifdef G_PUDDLES_RIPPLES

    float rain_int = saturate(rain_params.x * 1.5f);

    // Base ripples anim speed
    float ripples_anim = timers.x * ((0.01f + (rain_int * 0.008f)) * G_PUDDLES_RIPPLES_SPEED);

    // Base ripples scale
    float ripples_scale = 140 / G_PUDDLES_RIPPLES_SCALE;

    // Base ripples Normal
    float3 WN0 = s_puddles_normal.Sample(smp_base, I.tcdh * ripples_scale + float2(0, ripples_anim));
    float3 WN1 = s_puddles_normal.Sample(smp_base, I.tcdh * ripples_scale - float2(0.33f, ripples_anim));
    float3 ripplesNormal = ((WN0 * 2 - 1) + (WN1 * 2 - 1)) / 2.0f;

    // Rain Ripples
    float3 rainRipples = SSFX_ripples(s_rainsplash, I.tcdh * ripples_scale * 2.8f / G_PUDDLES_RAIN_RIPPLES_SCALE) * 2 - 1;

    // Rain ripples intensity... ( Rain intensity * Depth fadeout * Intensity )
    rainRipples *= clamp(1.5f - I.position.z * 0.15f, 0.3f, 1.0f) * rain_params.x * 3.0f * G_PUDDLES_RAIN_RIPPLES_INTENSITY;

    // Base ripples Intensity
    ripplesNormal *= (0.05f + rain_int * G_PUDDLES_RIPPLES_RAINING_INT) * G_PUDDLES_RIPPLES_INTENSITY;

    // Mix ripples
    ripplesNormal = (ripplesNormal * 0.666f) + (rainRipples * 0.333f);

#else
    float3 ripplesNormal = 0;
#endif

    // Normal Up and ripples for puddles
    float3 MirrorUp = mul(m_V, float3(ripplesNormal.x, 1.0f, ripplesNormal.y));

    const float puddles_N = puddles;

    // Refraction Normal
    float3 N_refra = ripplesNormal;

    // Adjust refraction intensity based on wetness and puddle perlin
    N_refra.xy *= 0.15f * smoothstep(0.6f, 0.8f, wetness_f * puddles) * G_PUDDLES_REFRACTION_INTENSITY;

    // Detail textures + refraction when needed
    float2 detail_tc = I.tcdbump + N_refra;

    /////////////////////////////////////////////////////////////////////////////////////

    I.tcdbump = detail_tc;

    float4 C = s_base.Sample(smp_base, I.tcdh.xy);

    float4 mask = s_mask.Sample(smp_base, I.tcdh.xy);
    mask /= dot(mask, 1);

    surface Sr = fill(I, s_dt_r, s_dn_r, s_dnE_r, 1, mask.r);
    surface Sg = fill(I, s_dt_g, s_dn_g, s_dnE_g, 1, mask.g);
    surface Sb = fill(I, s_dt_b, s_dn_b, s_dnE_b, 1, mask.b);
    surface Sa = fill(I, s_dt_a, s_dn_a, s_dnE_a, 1, mask.a);

    C.xyz = (Sr.base.xyz + Sg.base.xyz + Sb.base.xyz + Sa.base.xyz) * C.xyz * 2;

    // Apply tint
    C.rgb = lerp(C.rgb, C.rgb * G_PUDDLES_TINT, puddles);

    // Limit pudddle reflection.
    puddles = clamp(puddles, 0, G_PUDDLES_REFLECTIVITY);

#ifdef REFLECTIONS_ONLY_ON_PUDDLES
    const float puddles_limit = puddles;
#else
    const float puddles_limit = 1.0f;
#endif

    // Add at the end the extra wetness. Full intensity at 50% of wetness ( rain_params.y )
    puddles = puddles + saturate(rain_params.y * 2.0f) * G_PUDDLES_TERRAIN_EXTRA_WETNESS;

    // Add gloss and puddles to the final gloss result
    float G = max(Sr.gloss + Sg.gloss + Sb.gloss + Sa.gloss, puddles);

    float3 _mix = Sr.normal + Sg.normal + Sb.normal + Sa.normal;
    _mix *= float3(G_SSR_TERRAIN_BUMP_INTENSITY, G_SSR_TERRAIN_BUMP_INTENSITY, 1); // Adjust bump strength

    float3 N = mul(float3x3(I.M1, I.M2, I.M3), _mix);
    N = lerp(N, MirrorUp, puddles_N);

    float4 Ne = float4(normalize(N), C.w);

    return pack_gbuffer(Ne, float4(I.position.xyz + Ne.xyz * def_virtualh / 2.f, 0.95f), float4(C.rgb, G), puddles_limit > 0.01f);
}

#else

f_deffer main(p_flat I)
{
    float4 D = s_base.Sample(smp_base, I.tcdh.xy);
    float G = 0.001; // def_gloss
    float3 N = I.N.xyz;

    float4 Ne = float4(normalize(N), D.w);

    return pack_gbuffer(Ne, float4(I.position.xyz + Ne.xyz * def_virtualh / 2.h, /*ms*/ 0.95f), float4(D.x, D.y, D.z, G));
}

#endif
