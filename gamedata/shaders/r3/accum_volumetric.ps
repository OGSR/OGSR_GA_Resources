#include "common.h"
#include "shadow.h"

#ifndef ISAMPLE
#define ISAMPLE 0
#endif

struct v2p
{
    float3 lightToPos : TEXCOORD0; // light center to plane vector
    float3 vPos : TEXCOORD1; // position in camera space
    float fDensity : TEXCOORD2; // plane density along Z axis
};

float4 m_lmap[2];
Texture2D s_noise;

//////////////////////////////////////////////////////////////////////////////////////////
// Pixel
#ifndef MSAA_OPTIMIZATION
float4 main(v2p I) : SV_Target
#else
float4 main(v2p I, uint iSample : SV_SAMPLEINDEX) : SV_Target
#endif
{
    // ----- shadow
    float4 P4 = float4(I.vPos, 1);
    float4 PS = mul(m_shadow, P4);
    PS.xyz /= PS.w;

    // Sample shadow map, remove any filtering to save performance, there's no need.
    float s = s_smap.SampleCmpLevelZero(smp_smap, PS.xy, PS.z).x;

    // ----- lightmap ( Texture mask )
    PS.x = dot(P4, m_lmap[0]);
    PS.y = dot(P4, m_lmap[1]);
    PS.xy /= PS.w;
    float4 lightmap = s_lmap.Sample(smp_jitter, PS.xy);

    // ----- attenuate ( Vanilla light attenuation )
    float rsqr = dot(I.lightToPos, I.lightToPos); // distance 2 light (squared)
    float att = saturate(1.0f - rsqr * Ldynamic_pos.w); // q-linear attenuate

    // ----- noise
    PS.xy /= 0.5f;
    PS.x += timers.x * 15;

    float4 t_noise = s_noise.Sample(smp_linear, PS.xy);
    t_noise = t_noise * 0.5f + 0.5f;

    // out
    float3 result = I.fDensity * s * att;
    result *= lightmap;
    result *= Ldynamic_color * t_noise;

    return float4(result, 0);
}