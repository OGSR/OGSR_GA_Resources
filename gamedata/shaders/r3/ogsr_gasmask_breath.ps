/*
    Gasmask breath shader

    Credits: yohjimane

    /////////////////
    OpenXRay Engine 2023
    /////////////////
*/

#include "common.h"
#include "ogsr_gasmask_common.h"

float fbm(float2 texcoord, int iterations)
{
    float3 image_noise = s_breath_noise.Sample(smp_rtlinear, texcoord).xyz;
    float value = image_noise.x;
    float amplitude = 1.0;
    float frequency = 1.25; // play with is
    float total_weight = 2.5;

    for (int i = 0; i < iterations; i++)
    {
        value += image_noise.x * amplitude;
        texcoord *= frequency;
        amplitude *= 1.25; // with this thing too
        total_weight += amplitude;
    }
    return value / total_weight;
}

float4 main(p_screen I) : SV_Target
{
    // texcoord
    float2 texcoord = I.tc0;
    float3 image = s_image.Sample(smp_rtlinear, texcoord).xyz;
    float3 image_blur = s_image_blurred.Sample(smp_rtlinear, texcoord).xyz;
    texcoord = applyInertia(texcoord);

    float3 breathNoise = s_breath_noise.Sample(smp_rtlinear, texcoord).xyz;
    float2 seed = breathNoise.xy;
    seed = frac(seed + float2(breath_idx, breath_idx) * 0.38196601125); // disable to stop generating new versions

    // ratio correction (remember that only circle tc should be corrected)
    float4 circle_tc_pos;
    circle_tc_pos.xy = I.tc0; // texcoord
    circle_tc_pos.x -= 0.5;
    circle_tc_pos.x *= screen_res.x * screen_res.w;
    circle_tc_pos.x += 0.5;
    circle_tc_pos.zw = float2(0.5, 0.5); // position (center of the screen)
    circle_tc_pos.y -= 0.68; // push it down to bottom 1/3 of screen

    // circle settings
    float radius = breath_size * 0.9;
    float fbmFactor = fbm(texcoord * (0.1 * (1.0 / seed)), 15);

    // draw circle
    radius *= fbmFactor; // apply wiggliness
    float circle = 1.0 - smoothstep(radius, radius + 0.08, length(circle_tc_pos.xy - circle_tc_pos.zw));
    float4 circleTex = float4(circle, circle, circle, 1.0); // cast to float3

    circle_tc_pos.xy += radius; // todo: shift where we sample the texture randomly so each breath looks unique
    float4 glossyTex = s_breath_noise.Sample(smp_rtlinear, circle_tc_pos.xy); // reuse noise texture as regular one
    glossyTex = lerp(glossyTex, float4(1.0, 1.0, 1.0, 1.0), 0.5);

    image_blur = lerp(image_blur, glossyTex, .25);

    image = lerp(image, image_blur, circleTex.xyz); // add our blurred area to the main texture
    return float4(image.xyz, 1.0);
}