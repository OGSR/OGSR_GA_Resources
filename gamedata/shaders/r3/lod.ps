#include "common.h"
#include "sload.h"

struct vf
{
    float3 position : TEXCOORD0;
    float2 tc0 : TEXCOORD1; // base0
    float2 tc1 : TEXCOORD2; // base1
    float4 hpos_curr : TEXCOORD3;
    float4 hpos_old : TEXCOORD4;
    float4 af : COLOR1; // alpha&factor
    float4 hpos : SV_Position;
};

void sample_Textures(inout float4 D, inout float4 H, float2 tc1, float2 tc0, float4 af, float2 pixeloffset)
{
    float2 ddx_tc0 = ddx(tc0);
    float2 ddy_tc0 = ddy(tc0);
    float2 ddx_tc1 = ddx(tc1);
    float2 ddy_tc1 = ddy(tc1);

    float4 D1 = s_base.Sample(smp_base, tc1 + pixeloffset.x * ddx_tc1 + pixeloffset.y * ddy_tc1);
    float4 D0 = s_base.Sample(smp_base, tc0 + pixeloffset.x * ddx_tc0 + pixeloffset.y * ddy_tc0);
    float4 H0 = s_hemi.Sample(smp_linear, tc0 + pixeloffset.x * ddx_tc0 + pixeloffset.y * ddy_tc0);
    H0.xyz = H0.rgb * 2 - 1; // expand
    float4 H1 = s_hemi.Sample(smp_linear, tc1 + pixeloffset.x * ddx_tc1 + pixeloffset.y * ddy_tc1);
    H1.xyz = H1.rgb * 2 - 1; // expand

    D = lerp(D0, D1, af.w);
    D.w *= af.z; // multiply alpha
    H = lerp(H0, H1, af.w);
    H.w *= af.x; // multiply hemi
}

f_deffer main(vf I)
{
    // 1. Base texture + kill pixels with low alpha
    float4 D;
    float4 H;

    sample_Textures(D, H, I.tc1, I.tc0, I.af, float2(0, 0));

    clip(D.w - (96.h / 255.h));

    float3 N = normalize(H.xyz);

    f_deffer O = pack_gbuffer(float4(N, H.w), float4(I.position + N * def_virtualh / 2.h, 0), float4(D.x, D.y, D.z, def_gloss));

    O.Velocity = get_motion_vector(I.hpos_curr, I.hpos_old);

    O.H = float4(0.0, 0.0, 0.0, 0.0);

    return O;
}
