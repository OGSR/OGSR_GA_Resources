#include "common.h"

//#define USE_HAT
#include "sload.h"

#include "common_brdf.h"

#include "check_screenspace.h"

// SSS Settings
#ifdef SSFX_FLORAFIX
#include "settings_screenspace_FLORA.h"
#endif

static float DITHER_THRESHOLDS[16] = {1.0 / 17.0, 9.0 / 17.0,  3.0 / 17.0, 11.0 / 17.0, 13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
                                      4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0, 16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0};

f_deffer main(p_bumped I)
{
    f_deffer O;

    surface_bumped S = sload(I);

    calc_alpha_test(I.tcdh.xy, S.base.a);

    // FLORA FIXES & IMPROVEMENTS - SSS Update 18
    // https://www.moddb.com/mods/stalker-anomaly/addons/screen-space-shaders/
    // S.normal.xy += float2(0.1f, 0.1f);
    S.normal.xy *= max(10.0f * rain_params.y, 3.0f);

    // FLORA FIXES & IMPROVEMENTS - SSS Update 22
    // https://www.moddb.com/mods/stalker-anomaly/addons/screen-space-shaders/

    // Fake UP Normal
    float3 fN = mul(m_WV, float3(S.normal.x, 1.0f, S.normal.y));
    fN = normalize(fN);

    // Terrain Normal ( Engine feed the terrain normals )
    float3 Ne = float3(I.M1.z, I.M2.z, I.M3.z) + fN;
    Ne = normalize(Ne);

    float ms = xmaterial;
    S.gloss = def_gloss;

    // Dither
    float4 Postc = mul(m_P, float4(I.position.xyz, 1));
    float2 tc = (Postc.xy / Postc.w) * float2(0.5f, -0.5f) + 0.5f;

    float2 dither_uv = tc * screen_res.xy; // Aspect ratio
    uint dither_idx = (uint(dither_uv.x) % 4) * 4 + uint(dither_uv.y) % 4;

    clip(I.M1.x - DITHER_THRESHOLDS[dither_idx]);

#ifdef SSFX_FLORAFIX
    // Material value ( MAT_FLORA )
    ms = MAT_FLORA;

    // Fake gloss
    S.gloss = lerp(ssfx_florafixes_1.x, ssfx_florafixes_1.y, rain_params.y);
#endif
    // -----------------------------------------------------------------------

#ifdef USE_LM_HEMI
    // float4 lm = tex2D(s_hemi, I.lmh);
    float4 lm = s_hemi.Sample(smp_rtlinear, I.lmh);
    // float h = dot(lm.rgb,1.h/3.h);
    float h = get_hemi(lm);
#ifdef USE_R2_STATIC_SUN
    // ms = lm.w;
    ms = get_sun(lm);
#endif
#else
    float h = I.position.w;
#ifdef USE_R2_STATIC_SUN
    ms = I.tcdh.w;
#endif
#endif

    O = pack_gbuffer(float4(Ne, h), float4(I.position.xyz + Ne * S.height * def_virtualh, ms), float4(S.base.rgb, S.gloss));

    O.Velocity = get_motion_vector(I.hpos_curr, I.hpos_old);

    return O;
}
