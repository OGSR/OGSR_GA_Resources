#include "common.h"
#include "night_vision.h"
#include "pbr_cubemap_check.h"

struct v2p
{
    float4 factor : COLOR0; // rgb tint
    float3 tc0 : TEXCOORD0;
    float3 tc1 : TEXCOORD1;
    float4 hpos_curr : HPOS_CURRENT;
    float4 hpos_old : HPOS_PREVIOUS;
};
struct _out
{
    float4 Color : SV_Target0;
    float2 Velocity : SV_Target1;
};

TextureCube s_sky0 : register(t0);
TextureCube s_sky1 : register(t1);

//////////////////////////////////////////////////////////////////////////////////////////
// Pixel
_out main(v2p I)
{
    float3 s0 = s_sky0.Sample(smp_rtlinear, I.tc0);
    float3 s1 = s_sky1.Sample(smp_rtlinear, I.tc1);

    float3 sky = lerp(s0, s1, I.factor.w);

    // srgb tint (matches hmodel)
    float3 SkyTint = I.factor.rgb;
    float TintPow = 1.0;

    sky = pow(sky, TintPow);
    sky *= SkyTint;
    sky = pow(sky, 1 / TintPow);

    _out O;
    O.Color = float4(sky, 0.0f);

#ifdef SSFX_BEEFS_NVG
    float2 texturecoord = I.sv.xy / screen_res.xy;
    float2 texturecoord_2 = I.sv.xy / screen_res.xy;

    float lua_param_nvg_num_tubes = pnv_param_4.x; // 1, 2, 4, 1.1, or 1.2
    float lua_param_nvg_gain_current = pnv_param_2.y;
    float lua_param_vignette_current = pnv_param_2.z;

    if (pnv_param_1.z == 1.f &&
        ((compute_lens_mask(aspect_ratio_correction(texturecoord), lua_param_nvg_num_tubes) == 1.0f ||
          compute_lens_mask(aspect_ratio_correction(texturecoord_2), lua_param_nvg_num_tubes) == 1.0f))) //
    {
        o.Color.r = dot(o.Color.rgb * 5.0f, luma_conversion_coeff);

        o.Color.gb = 0.0f;

        o.Color *= lua_param_nvg_gain_current * sky_brightness_factor;

        o.Color = clamp(o.Color, 0.0, 1.0);

        float vignette = calc_vignette(lua_param_nvg_num_tubes, texturecoord, lua_param_vignette_current);
        float vignette_2 = calc_vignette(lua_param_nvg_num_tubes, texturecoord_2, lua_param_vignette_current);
        o.Color *= (vignette * vignette_2);
    }
#endif

    O.Velocity = get_motion_vector(I.hpos_curr, I.hpos_old);
    return O;
}
