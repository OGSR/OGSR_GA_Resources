#include "common.h"

uniform float4 fakescope;

// Check MODs
#include "check_screenspace.h"

#ifdef SSFX_BEEFS_NVG
#include "night_vision.h"
#endif

#ifdef SSFX_SSR
#include "screenspace_reflections.h"
#endif

#ifdef SSFX_FOG
#include "screenspace_fog.h"
#endif

#ifdef SSFX_INDIRECT_LIGHT
#include "screenspace_il.h"
#endif

#include "lmodel.h"
#include "hmodel.h"

#ifdef SSAO_QUALITY
#ifdef USE_GTAO
#include "gtao.h"
#else
#include "ssdo.ps"
#endif
#endif

struct _input
{
    float2 tc0 : TEXCOORD0;
    float4 pos2d : SV_Position;
};

float4 main(_input I) : SV_Target
{
    gbuffer_data gbd = gbuffer_load_data(GLD_P(I.tc0, I.pos2d, ISAMPLE));

    // Sample the buffers:
    float4 P = float4(gbd.P, gbd.mtl); // position.(mtl or sun)
    float4 N = float4(gbd.N, gbd.hemi); // normal.hemi
    float4 D = float4(gbd.C, gbd.gloss); // rgb.gloss

    float4 L = s_accumulator.Sample(smp_nofilter, I.tc0); // diffuse.specular

#ifndef SSFX_NEWGLOSS
    if (abs(P.w - MAT_FLORA) <= 0.05)
    {
        // Reapply distance factor to fix overtly glossy plants in distance
        // Unfortunately some trees etc don't seem to use the same detail shader
        float fAtten = 1 - smoothstep(0, 50, P.z);
        D.a *= (fAtten * fAtten);
    }
#endif

    // static sun
    float mtl = P.w;

#ifdef USE_R2_STATIC_SUN
    float sun_occ = P.w * 2;

    mtl = xmaterial;
    L += SRGBToLinear(D.rgb * Ldynamic_color.rgb * sun_occ) * plight_infinity(mtl, P.xyz, N.xyz, D.xyzw, Ldynamic_dir);
#endif

    float3 occ = float3(1.0, 1.0, 1.0);

#ifdef SSAO_QUALITY
#ifdef USE_GTAO
    occ = calc_gtao(P, N, I.tc0, ISAMPLE);
#else
    occ = calc_ssdo(P, N, I.tc0, I.pos2d, ISAMPLE);
#endif
    occ = compute_colored_ao(occ.x, D.xyz);
#endif

    L.rgb += L.a * SRGBToLinear(D.rgb); // illum in alpha

    // hemisphere
    float3 hdiffuse, hspecular;
    hmodel(hdiffuse, hspecular, mtl, N.w, D, P.xyz, N.xyz);

    // AO implementation
#ifdef SSAO_QUALITY
#ifdef SSFX_AO
    hdiffuse *= (1.0f - SRGBToLinear(1.0f - occ) * (1.0f - dot(hdiffuse.rgb, LUMINANCE_VECTOR)));
#else
    hdiffuse *= occ;
#endif
#endif

    float3 color = L.rgb + hdiffuse.rgb;
    color = LinearTosRGB(color); // gamma correct

// SSR Implementation
#ifdef SSFX_SSR
#ifdef REFLECTIONS_ONLY_ON_TERRAIN
    if (gbd.refl_flag)
#endif
        SSFX_ScreenSpaceReflections(I.tc0, P, N, D.a, color, ISAMPLE);
#endif

#ifdef SSFX_BEEFS_NVG
    //// SOME NVG SHIT ////
    float lua_param_nvg_num_tubes = pnv_param_4.x; // 1, 2, 4, 1.1, or 1.2
    float lua_param_nvg_gain_current = pnv_param_2.y;
    float lua_param_vignette_current = pnv_param_2.z;
    float lua_param_nvg_gain_offset = pnv_param_2.w;

    // NVG reduces gloss to 0 inside mask
    D.a *= (1.0 - compute_lens_mask(aspect_ratio_correction(I.tc0), lua_param_nvg_num_tubes));
    //// END NVG SHIT ////
#endif

#ifdef SSFX_FOG
    float3 WorldP = mul(m_inv_V, float4(P.xyz, 1));
    float fog = SSFX_HEIGHT_FOG(P.xyz, WorldP.y, color);
#else
    float3 pos = P.xyz;
    float distance = length(pos);
    float fog = saturate(distance * fog_params.w + fog_params.x);
    color = lerp(color, fog_color, fog);
#endif

    float skyblend = saturate(fog * fog);

    return float4(color, skyblend);
}
