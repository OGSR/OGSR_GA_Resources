#include "common.h"

// Check MODs
#include "check_screenspace.h"

#ifdef SSFX_SSR
#include "screenspace_reflections.h"
#endif

#ifdef SSFX_FOG
#include "screenspace_fog.h"
#endif

#include "lmodel.h"
#include "hmodel.h"

#ifdef SSAO_QUALITY
#include "ssdo.ps"
#endif

struct _input
{
    float4 tc0 : TEXCOORD0; // tc.xy, tc.w = tonemap scale
    float2 tcJ : TEXCOORD1; // jitter coords
    float4 pos2d : SV_Position;
};

struct _out
{
    float4 low : SV_Target0;
    float4 high : SV_Target1;
};

//	TODO:	DX10: Replace Sample with Load
#ifndef MSAA_OPTIMIZATION
_out main(_input I)
#else
_out main(_input I, uint iSample : SV_SAMPLEINDEX)
#endif
{
    gbuffer_data gbd = gbuffer_load_data(GLD_P(I.tc0, I.pos2d, ISAMPLE));

    // Sample the buffers:
    float4 P = float4(gbd.P, gbd.mtl); // position.(mtl or sun)
    float4 N = float4(gbd.N, gbd.hemi); // normal.hemi
    float4 D = float4(gbd.C, gbd.gloss); // rgb.gloss
#ifndef USE_MSAA
    float4 L = s_accumulator.Sample(smp_nofilter, I.tc0); // diffuse.specular
#else
#ifdef GBUFFER_OPTIMIZATION
    float4 L = s_accumulator.Load(int3(I.pos2d.xy, 0), ISAMPLE); // diffuse.specular
#else
    float4 L = s_accumulator.Load(int3(I.tc0 * pos_decompression_params2.xy, 0), ISAMPLE);
#endif
#endif

    // static sun
    float mtl = P.w;

#ifdef USE_R2_STATIC_SUN
    float sun_occ = P.w * 2;

    mtl = xmaterial;
    L += Ldynamic_color * sun_occ * plight_infinity(mtl, P.xyz, N.xyz, Ldynamic_dir);
#endif

    // hemisphere
    float3 hdiffuse, hspecular;

    //  Calculate SSAO
#ifdef USE_MSAA
#ifdef GBUFFER_OPTIMIZATION
    int2 texCoord = I.pos2d;
#else
    int2 texCoord = int2(I.tc0 * pos_decompression_params2.xy);
#endif
#endif

#ifdef SSAO_QUALITY
    float3 occ = calc_ssdo(P, N, I.tc0, I.pos2d, ISAMPLE);
    occ = compute_colored_ao(occ.x, D.xyz);
#endif

    hmodel(hdiffuse, hspecular, mtl, N.w, D.w, P.xyz, N.xyz);

// AO implementation
#ifdef SSAO_QUALITY
    hdiffuse *= (1.0f - (1.0f - occ) * (1.0f - dot(hdiffuse.rgb, LUMINANCE_VECTOR)));
#endif

// Disable specular if SSR is enabled. ( Temporary fix? )
#ifdef SSFX_SSR
#ifdef REFLECTIONS_ONLY_ON_TERRAIN
    if (gbd.refl_flag)
#endif
        hspecular = 0;
#endif

    float4 light = float4(L.rgb + hdiffuse, L.w);
    float4 C = D * light;

    float3 spec = C.www * L.rgb + hspecular * C.rgba; // replicated specular //Anomaly-style

    float3 color = C.rgb + spec;

// SSR Implementation
#ifdef SSFX_SSR
#ifdef REFLECTIONS_ONLY_ON_TERRAIN
    if (gbd.refl_flag)
#endif
        SSFX_ScreenSpaceReflections(I.tc0, P, N, D.a, color, ISAMPLE);
#endif

        // here should be distance fog
#ifdef SSFX_FOG
    float3 WorldP = mul(m_inv_V, float4(P.xyz, 1));
    float fog = SSFX_HEIGHT_FOG(P.xyz, WorldP.y, color);
#else
    float3 pos = P.xyz;
    float distance = length(pos);
    float fog = saturate(distance * fog_params.w + fog_params.x);
    color = lerp(color, fog_color * TONEMAP_SCALE_FACTOR, fog);
#endif

    float skyblend = saturate(fog * fog);

    float tm_scale = I.tc0.w; // interpolated from VS

    _out o;
    tonemap(o.low, o.high, color, tm_scale);
    o.low.a = skyblend;
    o.high.a = skyblend;

    return o;
}
