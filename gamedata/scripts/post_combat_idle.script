--'-------------------------------------------------------------------------------------------------------------------
--' post combat idle
--' ai additions
--' modified by Bak
--'--------------------------------------------------------------------------------------------------------------------
local def_min_post_combat_time = 9000
local def_max_post_combat_time = 11000
local combat_action_id = stalker_ids.action_combat_planner

class "evaluator_post_combat_idle" (property_evaluator)
function evaluator_post_combat_idle:__init(storage, npc, name) super(nil, name)
	self.st = storage
	self.dbst = db.storage[npc:id()]
	--' Таймер ожидания выхода из боя
	self.st.timer = time_global()
end
function evaluator_post_combat_idle:evaluate()
	if self.dbst.active_scheme == "camper" or self.dbst.script_combat_type ~= nil then
		return false
	end

	local best_enemy = self.object:best_enemy()
	local st = self.st

	-- если появился враг - сбрасываем таймер
	if best_enemy ~= nil and st.timer ~= nil and not best_enemy:wounded() then
		st.last_best_enemy_id = best_enemy:id()
		st.timer = nil
		return false
	end

	-- если исчез враг - устанавливаем таймер
	if st.timer == nil and (best_enemy == nil or best_enemy:wounded()) then
		if st.override then
			local min = st.override[1]*1000
			local max = st.override[2]*1000
			st.timer = time_global() + math.random(min, max)
		else
			st.timer = time_global() + math.random(def_min_post_combat_time,def_max_post_combat_time)
		end
	end

	if best_enemy ~= nil then
		return false
	elseif st.timer == nil then
		return false
	end

	if time_global() > st.timer then
		return false
	end

--	if xr_surge_hide.surge_activated then
--		st.timer = 0
--		return false
--	end

	if not self.object:critically_wounded() and (self.st.anim_started or self.object:animation_count() == 0) then
		return true
	end

	return false
end

----------------------------------------------------------------------------------------------------------------------
class "action_post_combat_wait" (action_base)
function action_post_combat_wait:__init(npc, storage, action_name) super(nil, action_name)
	self.st = storage
end
function action_post_combat_wait:initialize()
	action_base.initialize(self)
	local npc = self.object
	state_mgr.lock(npc,true,true)

	self.st.animation = db.storage[npc:id()].state_mgr.animation

--	npc:clear_animations()
	npc:set_movement_type(move.stand)
	npc:set_mental_state(anim.danger)
	npc:set_dest_level_vertex_id(npc:level_vertex_id())
	npc:set_item(object.idle,rx_utils.item_is_fa(npc:active_item()) and npc:active_item() or npc:best_weapon())
	self.play_relax_sound = rx_sound.set_sound_play(npc:id(),"post_combat_wait")	-- кто первым скажет, тот и главный

	local wm = npc:get_wm(true)
	if wm then
		wm:disable()
	end

	if math.random() > 0.2 then
		npc:set_sight(look.direction, npc:direction())
	else
		npc:set_sight(look.danger, nil, 0)
	end
end
function action_post_combat_wait:execute()
	action_base.execute(self)
	local npc = self.object

	if self.st.anim_started == nil then
		self.st.anim_started = false
		local rand =  math.random()
		if rand < 0.15 then
			self.anim = "caution"
			npc:set_body_state(move.standing)
		elseif rand < 0.3 then
			self.anim = "caution_combat"
			npc:set_body_state(move.standing)
		else
			self.anim = "hide"
			npc:set_body_state(move.crouch)
		end
	elseif self.st.anim_started == false and not weapon_locked(npc) then
		local wpn = rx_reload and rx_reload.get_weapon_to_reload(npc,true)
		if wpn and wpn:get_ammo_in_magazine() < 20 then
			npc:set_item(object.aim_force_full1,wpn)
			return
		end
		npc:set_item(object.idle,rx_utils.item_is_fa(npc:active_item()) and npc:active_item() or npc:best_weapon())
		self.st.anim_started = true
		self.st.animation:set_state(self.anim)
	end

	if time_global() > self.st.timer then
		if self.st.anim_started == true then
			self.st.animation:set_state(nil, true)
		end
	end
end
function action_post_combat_wait:finalize()
	action_base.finalize(self)
	local npc = self.object

	if not npc:alive() then
		return
	end

	local emerg = npc:best_enemy()~=nil
	if self.st.anim_started == true then
		self.st.animation:set_state(nil, emerg)
	end

	local wm = npc:get_wm(true)
	if wm then
		wm:enable()
	end

	if self.play_relax_sound and not (emerg or db.storage[npc:id()].danger_flag) and self.st.timer and self.st.timer < time_global()+2000 then
		rx_sound.set_sound_play(npc:id(),"post_combat_relax")
	end

	if emerg then
		npc:clear_animations()
	elseif npc:body_state() == move.standing then
		npc:set_body_state(move.standing)
		npc:set_mental_state(anim.free)
	end
	state_mgr.lock(npc,false)
	self.st.animation = nil
	self.st.anim_started = nil
	self.play_relax_sound = nil
	self.anim = nil
end

function weapon_locked(npc)
	return not (npc:weapon_strapped() or npc:weapon_unstrapped())
end

function get_object_squad(obj)
	local st = obj and db.storage[obj:id()]
	return st and st.squad_obj
end

evid_post_combat = rx_ai.base_id+55
actid_post_combat = evid_post_combat

rx_ai.death_disable_evas[evid_post_combat] = false

function add_to_binder(npc,ini,scheme,section,storage)
	local manager = npc:motivation_action_manager()
	if not npc:alive() then
		manager:add_evaluator(evid_post_combat,property_evaluator_const(false))
		return
	end
	manager:add_evaluator(evid_post_combat,evaluator_post_combat_idle(storage,npc,"eva_post_combat_idle"))
	local action = action_post_combat_wait(npc,storage,"action_post_combat_wait")
	action:add_precondition(world_property(stalker_ids.property_alive,true))
	action:add_precondition(world_property(stalker_ids.property_danger,false))
	action:add_precondition(world_property(xr_evaluators_id.sidor_wounded_base,false))
--	action:add_precondition(world_property(xr_evaluators_id.state_mgr+3,true))	--!!
	if rx_bandage then
		action:add_precondition(world_property(rx_bandage.evid_bandage,false))
	end
	if rx_gl then
		action:add_precondition(world_property(rx_gl.evid_gl_fire,false))
		action:add_precondition(world_property(rx_gl.evid_gl_reload,false))
	end
	if rx_knife then
		action:add_precondition(world_property(rx_knife.evid_knife_attack,false))
	end
	if xr_help_wounded then
		action:add_precondition(world_property(xr_help_wounded.evid_wounded_exist,false))
	end
	if xrs_grenade then
		action:add_precondition(world_property(xrs_grenade.evid_aaa_grenade,false))
--		action:add_precondition(world_property(xrs_grenade.evid_psyh,false))
	end
--	if blowout_scheme and blowout_scheme.evid_outside then
--		action:add_precondition(world_property(blowout_scheme.evid_outside,false))
--	end

	if xr_combat_companion then
		action:add_precondition(world_property(xr_combat_companion.prop_combat,false))	
	end
	if xr_companion then
		action:add_precondition(world_property(xr_companion.property_need_companion,false))	
	end

	action:add_precondition(world_property(evid_post_combat,true))
	action:add_effect(world_property(evid_post_combat,false))
	manager:add_action(actid_post_combat,action)
	-- включение в планировщик
	for i,id in ipairs({stalker_ids.action_combat_planner,xr_actions_id.alife,xr_actions_id.stohe_meet_base+1}) do
		action = manager:action(id)
		action:add_precondition(world_property(evid_post_combat,false))
	end
end

function set_scheme(npc,ini,scheme,section_logic)
	xr_logic.assign_storage_and_bind(npc,ini,scheme,scheme)
end

function reset_scheme(npc,scheme,st,section)
	if st.ini:line_exist(section,"post_combat_idle") then
		st.post_combat_idle.override = rx_utils.parse_list(st.ini,section,"post_combat_idle",nil,true)
	elseif st.ini:line_exist(st.section_logic,"post_combat_idle") then
		st.post_combat_idle.override = rx_utils.parse_list(st.ini,st.section_logic,"post_combat_idle",nil,true)
	else
		st.post_combat_idle.override = nil
	end
end

--[[
function disable_scheme(npc,scheme)
	local st = db.storage[npc:id()][scheme]
	if st then
		st.enabled = false
	end
end]]

----------------------------------------------------------------------------------------------------------------------
-- STATES
----------------------------------------------------------------------------------------------------------------------
state_mgr_animation_list.animations.caution_combat = { prop	= { maxidle = 3,sumidle = 4,rnd = 60 },
		into	= { [0]	= { "prisluh_0_idle_0" },
					[1]	= { "prisluh_1_idle_0" },
					[2]	= { "prisluh_2_idle_0" },
					[3]	= { "prisluh_3_in" },	--prisluh_3_idle_0
					[4]	= { "prisluh_4_in" },	--prisluh_4_idle_0
					[8]	= { "prisluh_8_in" },
					[9]	= { "prisluh_2_idle_0" },
					[10]= { "prisluh_10_in" } },
		out		= { [0]	= { "prisluh_0_idle_5" },
					[1]	= { "prisluh_1_idle_5" },
					[2]	= { "prisluh_2_idle_6" },
					[3]	= { "prisluh_3_out" },	--prisluh_3_idle_5
					[4]	= { "prisluh_4_out" },	--prisluh_4_idle_5
					[8]	= { "prisluh_8_out" },
					[9]	= { "prisluh_2_idle_6" },
					[10]= { "prisluh_10_out" } },
		idle	= { [0]	= "prisluh_0_idle_1",
					[1]	= "prisluh_1_idle_1",
					[2]	= "prisluh_2_idle_1",
					[3]	= "prisluh_3_1",	--prisluh_3_idle_1
					[4]	= "prisluh_4_1",	--prisluh_4_idle_1
					[8]	= "prisluh_8_1",
					[9]	= "prisluh_2_idle_1",
					[10]= "prisluh_10_1" },
		rnd		= { [0]	= {	"prisluh_0_idle_2","prisluh_0_idle_3","prisluh_0_idle_4" },
					[1]	= {	"prisluh_1_idle_2","prisluh_1_idle_3","prisluh_1_idle_4" },
					[2]	= {	"prisluh_2_idle_2","prisluh_2_idle_3","prisluh_2_idle_4","prisluh_2_idle_5" },
					[3]	= {	"prisluh_3_0","prisluh_3_2" },	--{	"prisluh_3_idle_2","prisluh_3_idle_3","prisluh_3_idle_4" }
					[4]	= {	"prisluh_4_0","prisluh_4_2" },	--"prisluh_4_idle_2","prisluh_4_idle_3","prisluh_4_idle_4"
					[8]	= {	"prisluh_8_0","prisluh_8_2" },
					[9]	= {	"prisluh_2_idle_2","prisluh_2_idle_3","prisluh_2_idle_4","prisluh_2_idle_5" },
					[10]= {	"prisluh_10_0","prisluh_10_2" }}
}