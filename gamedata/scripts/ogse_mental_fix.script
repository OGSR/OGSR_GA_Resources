-- -*- mode: lua; coding: windows-1251-dos -*-


function attach( sm )
  sm:subscribe({ signal = "on_npc_death", fun = this.on_npc_death })
  sm:subscribe({ signal = "on_npc_net_destroy", fun = this.on_npc_death })
  sm:subscribe({ signal = "on_npc_spawn", fun = this.on_npc_spawn })
end


function on_npc_spawn( obj, binder )
  if not obj:alive() then return end
  --if not db.storage[ obj:id() ].state_mgr then return end
  local s = {
    [ "signal" ] = "on_update",
    [ "self"   ] = obj,
    [ "fun"    ] = this.check_mental,
	[ "queued" ] = true,
  }
  binder[ script_name() .. ".subscribed" ] = s
  ogse_signals.get_mgr():subscribe( s )
end


function on_npc_death( obj, who )
  local binder     = obj:binded_object()
  local subscribed = binder[ script_name() .. ".subscribed" ]
  if subscribed then
    ogse_signals.get_mgr():unsubscribe( subscribed )
	subscribed = nil
    binder[ script_name() .. ".subscribed" ] = nil
    if binder[ script_name() .. ".check_mental" ] then
      binder[ script_name() .. ".check_mental" ] = nil
	end
  end
end


function check_mental( obj )
  --log3("~~[%s] Update check_mental for [%s]", script_name(), obj:name())
  ogse_signals.get_mgr():reschedule( math.random(4500, 5500) )
  local storage = db.storage[ obj:id() ].state_mgr
  ASSERT( storage, "state_mgr not found in db.storage: %s", obj:name() )
  local binder  = obj:binded_object()
  local mental  = state_lib.states[ storage.target_state ].mental
  if xr_companion.is_companion( obj:id() ) then --KRodin: Если напарники будут зависать, попробовать этот кусок закомментировать.
    if binder[ script_name() .. ".check_mental" ] then
      binder[ script_name() .. ".check_mental" ] = nil
    end
    return
  end
  if binder[ script_name() .. ".check_mental" ] then
    if mental and mental == anim.panic then
      log1(
        "!!ERROR! NPC " .. obj:name()
        .. " is in panic more than 25 seconds! Trying to recover!"
      )
      obj:set_mental_state( anim.danger )
    end
    binder[ script_name() .. ".check_mental" ] = nil
  else
    if mental and mental == anim.panic then
      log1(
        "~~WARNING! NPC " .. obj:name()
        .. " is in panic - will check it for freezing."
      )
      binder[ script_name() .. ".check_mental" ] = true
      ogse_signals.get_mgr():reschedule( xr_companion.is_companion( obj:id() ) and 10000 or 25000 )
    end
  end
end
