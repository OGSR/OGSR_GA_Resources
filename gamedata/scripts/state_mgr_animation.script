-- -*- mode: lua; coding: windows-1251-dos -*-


function write_log_3(npc, ...)
	if _sdata.GlobalEnable == true then
		local target_obj = level.get_target_obj()
		if target_obj and target_obj:id() == npc:id() then
			log3(...)
		end
	end
end


--' Анимации персонажа
--' мы уже находимся в необходимом состоянии?
class "eva_state_mgr_animation" (property_evaluator)
function eva_state_mgr_animation:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_animation:evaluate()
	if self.st.callback ~= nil and
		self.st.callback.func ~= nil and
		state_lib.states[self.st.target_state].animation == nil and
		self.st.callback.begin == nil
	then
		write_log_3(self.object, "~~STMGR: animation false")
		return false
	end
	if state_lib.states[self.st.target_state].animation == self.st.animation:state() then
		ogse_debug.add_active_anim( self.object, "anim" )
		return true
	end
	return false
end
--' нужно ли нам отыгрывать извращенную анимацию
class "eva_state_mgr_animation_play" (property_evaluator)
function eva_state_mgr_animation_play:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_animation_play:evaluate()
	if state_lib.states[self.st.target_state].animation ~= nil then
		ogse_debug.add_active_anim( self.object, string.format( "anim_play[%s]", tostring( state_lib.states[self.st.target_state].animation ) ) )
		return true
	end
	return false
end
--' Отыгрываем ли мы сейчас извращенную анимацию
class "eva_state_mgr_animation_play_now" (property_evaluator)
function eva_state_mgr_animation_play_now:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_animation_play_now:evaluate()
	if self.st.animation:state() ~= nil and self.st.animation:state() ~= "_wait" then
		ogse_debug.add_active_anim( self.object, "anim_play_now" )
		return true
	end	
	return false
end
--' нужно ли нам вообще не отыгрывать анимацию
class "eva_state_mgr_animation_none" (property_evaluator)
function eva_state_mgr_animation_none:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_animation_none:evaluate()
	if state_lib.states[self.st.target_state].animation == nil then
		ogse_debug.add_active_anim( self.object, "anim_none" )
		return true
	end		
	return false
end
--' мы уже не отыгрываем никакую извращенную анимацию
class "eva_state_mgr_animation_none_now" (property_evaluator)
function eva_state_mgr_animation_none_now:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_animation_none_now:evaluate()
	if self.st.animation:state() == nil then
		ogse_debug.add_active_anim( self.object, "anim_none_now" )
		return true
	end		
	return false
end
--' нужен ли схеме экстренный ресет
class "eva_state_mgr_animation_reset" (property_evaluator)
function eva_state_mgr_animation_reset:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_animation_reset:evaluate()
	if self.st.callback ~= nil and
		self.st.callback.func ~= nil and
		state_lib.states[self.st.target_state].animation == nil and
		self.st.callback.begin == nil
	then
		ogse_debug.add_active_anim( self.object, "anim_reset_call" )
		return true
	end
	
	if
		self.st.reset_state == true and
		state_lib.states[self.st.target_state] ~= nil and
		self.st.current_state == self.st.target_state and
		state_lib.states[self.st.target_state].reset == true
	then
		ogse_debug.add_active_anim( self.object, "anim_reset" )
		return true
	end		
	
	return false
end
--' залочена ли схема
class "eva_state_mgr_animation_locked" (property_evaluator)
function eva_state_mgr_animation_locked:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_animation_locked:evaluate()
	write_log_3(self.object, "~~STMGR: animstate %s", tostring(self.st.animation:state()))
	if (self.st.animation:state() == "_wait" or self.st.animation:state() == "_new") and state_lib.states[self.st.target_state].animation ~= nil then
		ogse_debug.add_active_anim( self.object, "anim_locked" )
		return true
	end		
	return false
end


--' Играем входную анимацию
class "act_state_mgr_animation_start" (action_base)
function act_state_mgr_animation_start:__init(name, st) super (nil, name)
	self.st = st
end
function act_state_mgr_animation_start:initialize()
	action_base.initialize(self)
	ogse_debug.add_active_anim( self.object, "start["..tostring(state_lib.states[self.st.target_state].animation).."]" )
	if state_lib.states[self.st.target_state].animation == nil then
		write_log_3(self.object, "~~STMGR: WARNING NIL START %s", tostring(self.st.target_state))
	end
	self.st.animation:set_state(state_lib.states[self.st.target_state].animation)
end
function act_state_mgr_animation_start:execute()
	action_base.execute(self)
end
function act_state_mgr_animation_start:finalize()
	action_base.finalize(self)
end
--' ресетим анимацию
class "act_state_mgr_animation_reset" (action_base)
function act_state_mgr_animation_reset:__init(name, st) super (nil, name)
	self.st = st
end
function act_state_mgr_animation_reset:initialize()
	action_base.initialize(self)
	ogse_debug.add_active_anim( self.object, "reset["..tostring(state_lib.states[self.st.target_state].animation).."]" )
	if state_lib.states[self.st.target_state].animation == nil then
		write_log_3(self.object, "~~STMGR: WARNING NIL RESET %s", tostring(self.st.target_state))
	end	
	self.st.animation:set_state(state_lib.states[self.st.target_state].animation, true)
	self.st.reset_state = false
end
function act_state_mgr_animation_reset:execute()
	action_base.execute(self)
end
function act_state_mgr_animation_reset:finalize()
	action_base.finalize(self)
end
--' Играем выходную анимацию
class "act_state_mgr_animation_stop" (action_base)
function act_state_mgr_animation_stop:__init(name, st) super (nil, name)
	self.st = st
end
function act_state_mgr_animation_stop:initialize()
	action_base.initialize(self)
	ogse_debug.add_active_anim( self.object, "stop!" )
	self.st.animation:set_state(nil)
end
function act_state_mgr_animation_stop:execute()
	action_base.execute(self)
end
function act_state_mgr_animation_stop:finalize()
	action_base.finalize(self)
end


class "animation"
function animation:__init(npc, mgr)
	self.mgr = mgr
	self.npc = npc
	self.states = {
		last_id = nil,
		current_state = nil,
		target_state = nil,
		begin = nil,
		idle = nil,
		anim_level = 0,
	}
	self.clb_settings = {}
end
--' установка нового состояния
function animation:set_state(id, reset)
	write_log_3(self.npc, "~~STMGR: [%s] set new animation [%s], current_state [%s]", self.npc:name(), tostring(id), tostring(self.states.target_state))
	write_log_3(self.npc, "~~STMGR[%s] animation_set_state_1", self.npc:name())	
	local nn = 0
	local wpn_slot = self:weapon_slot()
	--' выход из старого состояния
	self.npc:clear_animations()
	self:clear_anim_callback()
	write_log_3(self.npc, "~~STMGR[%s] animation_set_state_2", self.npc:name())
	local anim_list = state_mgr_animation_list.animations
	if anim_list[self.states.target_state] ~= nil then
		if self.mgr.emerg.animation_nout == true or
		   self.mgr.emerg.animation == true
		then
				write_log_3(self.npc, "~~STMGR[%s] animation_set_state_2A", self.npc:name())	
			--' обнулить озвучку (только если он задан в анимации)
			if self.npc:active_sound_count() > 0 then
				if self.mgr.subanim > 0 then
					for key = self.mgr.subanim, 0 do
						local a = anim_list[self.states.target_state].subanim[key]
						if a and a.into_music then
							stop_play_sound(self.npc)
							break
						end
					end
				end
			end
			write_log_3(self.npc, "~~STMGR[%s] animation_set_state_2B", self.npc:name())
			--' (2) экстренный выход, необходимо дропнуть приатаченные предметы
			if self.attached_item then
				local obj = self.npc:object( self.attached_item )
				if obj then
					obj:enable_attachable_item( false )
				end
				self.attached_item = nil
			end
			write_log_3(self.npc, "~~STMGR[%s] animation_set_state_2C", self.npc:name())
		else
			write_log_3(self.npc, "~~STMGR[%s] animation_set_state_2D", self.npc:name())
			--' выход из поданимаций	
			if self.mgr.subanim > 0 then
				for key = self.mgr.subanim, 0 do
					local a = anim_list[self.states.target_state].subanim[key]
					if a then 
						if a.out then
							local anima = self:anim_for_slot(wpn_slot,a.out)
							write_log_3(self.npc, "~~STMGR[%s] animation_out_2DA [%s] slot [%s]", self.npc:name(), anima, wpn_slot)
							if anima then
								write_log_3(self.npc, "~~STMGR[%s] animation_set_state_2DE", self.npc:name())
								add_anim(self.npc, anima, true)							
							end
						end
						if a.into_music then
							stop_play_sound(self.npc)
						end
					end
				end
			end			
			write_log_3(self.npc, "~~STMGR[%s] animation_set_state_2E", self.npc:name())
			local a = anim_list[self.states.target_state]
			if a.out ~= nil then
				local anima = self:anim_for_slot(wpn_slot, a.out)
				write_log_3(self.npc, "~~STMGR[%s] animation_out_2EA slot [%s]", self.npc:name(), wpn_slot)
				if anima then
					if type(anima) == "table" then
						for k,v in pairs(anima) do
							if type(v) == "table" then
								write_log_3(self.npc, "~~STMGR[%s] animation_set_state_2EA1", self.npc:name())
								self:set_anim_callback(v)
							else
								write_log_3(self.npc, "~~STMGR[%s] animation_set_state_2EA2", self.npc:name())
								add_anim(self.npc, v, true)
							end
						end
					else
						write_log_3(self.npc, "~~STMGR[%s] animation_set_state_2EA3", self.npc:name())
						add_anim(self.npc, anima, true)
					end
					nn = nn +1
				end			
			end
			write_log_3(self.npc, "~~STMGR[%s] animation_set_state_2F", self.npc:name())
		end
	end

	write_log_3(self.npc, "~~STMGR[%s] animation_set_state_3", self.npc:name())
	--' Экстренные деаттач деаттачиваемых предметов, если новая анимация назначилась в момент деаттача.
	if self.states.current_state == "_new" then
		write_log_3(self.npc, "~~STMGR: [%s]", self.npc:name())
		if self.attached_item then
			local obj = self.npc:object( self.attached_item )
			if obj then
				obj:enable_attachable_item( false )
			end
			self.attached_item = nil
		end
	end
	
	write_log_3(self.npc, "~~STMGR[%s] animation_set_state_4", self.npc:name())

	--' вход в новое состояние
	local a = anim_list[id]	
	
	write_log_3(self.npc, "~~STMGR[%s] animation_set_state_5", self.npc:name())
	
	if a ~= nil then
		write_log_3(self.npc, "~~STMGR[%s] animation_set_state_5A", self.npc:name())
		if a.into ~= nil then
			local anima = self:anim_for_slot(wpn_slot,a.into)
			if type(anima) == "table" then
				for k,v in pairs(anima) do
					if type(v) == "table" then
						self:set_anim_callback(v)
					else
						write_log_3(self.npc, "~~STMGR[%s] animation_set_state_5A [%s]", self.npc:name(), v)
						add_anim(self.npc, v, true)
					end
				end
				nn = nn +1
			else
				add_anim(self.npc, anima, true)
				nn = nn +1
			end
		end
		write_log_3(self.npc, "~~STMGR[%s] animation_set_state_5B", self.npc:name())
		if reset == true then
			if self.mgr.callback ~= nil then
				self.mgr.callback.begin = nil
			end
			self:play_rnd(id, 100)			
		end
		write_log_3(self.npc, "~~STMGR[%s] animation_set_state_5C", self.npc:name())
		local a = anim_list[id]
		if a.idle ~= nil then
			local anima = self:anim_for_slot(wpn_slot,a.idle)
			if anima then
				write_log_3(self.npc, "~~STMGR[%s] animation_set_state_5C [%s]", self.npc:name(), anima)
				add_anim(self.npc, anima, true)
			end
			nn = nn + 1
		else
			-- Для политкорректности просим анимстейт отыграть свою айдловую анимацию
			self.mgr.animstate:add_idle_animation()
		end
		write_log_3(self.npc, "~~STMGR[%s] animation_set_state_5CA", self.npc:name())
	else
		write_log_3(self.npc, "~~STMGR[%s] animation_set_state_5D", self.npc:name())
		-- Для политкорректности просим анимстейт отыграть свою айдловую анимацию
		self.mgr.animstate:add_idle_animation()
		write_log_3(self.npc, "~~STMGR[%s] animation_set_state_5E", self.npc:name())
	end

	write_log_3(self.npc, "~~STMGR[%s] animation_set_state_6", self.npc:name())
	
	self.states.current_state = "_new"
	self.states.target_state = id
	self.states.begin = nil
	self.states.anim_level = 0
	self.mgr.emerg.animation = nil
	
	write_log_3(self.npc, "~~STMGR[%s] animation_set_state_7", self.npc:name())
end
--' апдейт
function animation:update()
	write_log_3(self.npc, "~~STMGR[%s] animation_update_1", self.npc:name())
	write_log_3(self.npc, "~~STMGR: 		time %s", time_global())				
	write_log_3(self.npc, "~~STMGR: 		current state %s", tostring(self.states.current_state))
	write_log_3(self.npc, "~~STMGR: 		target state %s", tostring(self.states.target_state))
	write_log_3(self.npc, "~~STMGR: 		anims %s", self.npc:animation_count())
	self.is_called = false
	write_log_3(self.npc, "~~STMGR[%s] animation_update_2", self.npc:name())
	-- !!! проверка что закончился играться наш звук
	if self.sound_played then
		if self.npc:active_sound_count() == 0 then
			self.sound_played = false
		end
	end	
	write_log_3(self.npc, "~~STMGR[%s] animation_update_3", self.npc:name())
	if self.states.current_state == nil then
		self:callback_process()
		write_log_3(self.npc, "~~STMGR[%s] animation_update_EXIT", self.npc:name())
		return
	end
	write_log_3(self.npc, "~~STMGR[%s] animation_update_5", self.npc:name())
	-- обрубить анимации и экстренно начать сразу
	if self.mgr.emerg ~= nil and  
	   self.mgr.emerg.animation == true then
		
		self.npc:clear_animations()
		self:set_state(nil)
		
		---state_mgr.log1("state_manager_antmation 0 - nil strage set state called: "..self.npc:name())
		self.states.current_state = nil
		self.mgr.emerg.animation = nil
		write_log_3(self.npc, "~~STMGR[%s] animation_update_EXIT_2", self.npc:name())
		return
	end
	write_log_3(self.npc, "~~STMGR[%s] animation_update_6", self.npc:name())
	-- проверка закончился ли переход в состояние
	local animations = state_mgr_animation_list.animations
	if self.states.current_state == "_new" then
		local nnum = 0
		if (animations[self.states.target_state] ~= nil and
		   animations[self.states.target_state].idle ~= nil) or
		   self.mgr.animstate:idle_animation_present()
		then
			nnum = 1
		end
		if self.npc:animation_count() <= nnum then
			self.states.current_state = self.states.target_state
			self:callback_init()
		end
		write_log_3(self.npc, "~~STMGR[%s] animation_update_EXIT_3", self.npc:name())
		return
	end
	
	write_log_3(self.npc, "~~STMGR[%s] animation_update_7", self.npc:name())
	
	--' ожидаем окончания перехода.
	if self.states.current_state == "_wait" then		
		local nnum = 0
		if (animations[self.states.target_state] ~= nil and
		   animations[self.states.target_state].idle ~= nil) or
		   self.mgr.animstate:idle_animation_present()
		then
			nnum = 1
		end
		if self.npc:animation_count() <= nnum then
			self.states.current_state = self.states.target_state
		end
		
		-- инициализация коллбека при повторном вызове этого же стейта
		if self.states.target_state == state_lib.states[self.mgr.target_state].animation and
		   self.mgr.callback and self.mgr.callback.func and self.mgr.callback.timeout and
		   self.mgr.callback.begin == nil
		then
			self:callback_init(true)
		end
		self:callback_process()
		write_log_3(self.npc, "~~STMGR[%s] animation_update_EXIT_4", self.npc:name())
		return
	end
	
	write_log_3(self.npc, "~~STMGR[%s] animation_update_8", self.npc:name())
	
	-- Отыгрыш рандомных анимашек, если они есть
	if 	self.states.current_state == self.states.target_state then
		-- Инициализация колбека
		write_log_3(self.npc, "~~STMGR[%s] animation_update_8_1", self.npc:name())
		if self.mgr.callback and self.mgr.callback.func and self.mgr.callback.timeout and
		   self.mgr.callback.begin == nil
		then
			self:callback_init(true)
		end
		write_log_3(self.npc, "~~STMGR[%s] animation_update_8_2", self.npc:name())
		--' проверка на экстренный ресет схемы	
		if self:callback_process() == true then
			write_log_3(self.npc, "~~STMGR[%s] animation_update_8_EXIT", self.npc:name())
			return
		end
		local wpn_slot = self:weapon_slot()
		-- Проверка на уровень рекурсивности.
		-- Если текущая анимация не позволяет рекурсию, ставить текущий уровень нулевым.
		if animations[self.states.current_state].subanim == nil then
			self.states.anim_level = 0
			self.mgr.subanim = 0
		end
		write_log_3(self.npc, "~~STMGR[%s] animation_update_8_3", self.npc:name())
		-- если нужный уровень рекурсии достигнут - играть рандомные и зацикленные айдлы из него.
		-- если нет - отыграть весь набор входных анимаций до него.
		if self.states.anim_level < self.mgr.subanim then
			self.npc:clear_animations()
			for key = self.states.anim_level+1, self.mgr.subanim do
				local a = animations[self.states.current_state].subanim[key]
				if a and a.into then
					local anima = self:anim_for_slot(wpn_slot,a.into)
					if anima then
						add_anim(self.npc, anima, true)
					end
				end
				--' устанавливаем музыку
				if a.into_music then
					xr_sound.set_sound_play(self.npc, a.into_music)
				end				
			end
			self.states.anim_level = self.mgr.subanim
			-- добавляем айдл текущего уровня
			local a = animations[self.states.current_state].subanim[self.states.anim_level]
			local anima = self:anim_for_slot(wpn_slot,a.idle)
			if anima then
				add_anim(self.npc, anima, true)
			end		
			self.states.current_state = "_wait"
			write_log_3(self.npc, "~~STMGR[%s] animation_update_8_3_EXIT", self.npc:name())
			return
		end
		write_log_3(self.npc, "~~STMGR[%s] animation_update_8_4", self.npc:name())
		-- если текущий уровень рекурсии выше, чем необходимый - отыграть набор выходных анимаций из него.
		if self.states.anim_level > self.mgr.subanim then
			self.npc:clear_animations()
			for key = self.states.anim_level, self.mgr.subanim+1 do
				local a = animations[self.states.current_state].subanim[key]
				if a and a.out then
					local anima = self:anim_for_slot(wpn_slot,a.out)
					if anima then
						add_anim(self.npc, anima, true)
					end
				end
			end
			self.states.anim_level = self.mgr.subanim
			-- добавляем айдл текущего уровня
			local a
			if self.states.anim_level == 0 then
				a = animations[self.states.current_state]
			else
				a = animations[self.states.current_state].subanim[self.states.anim_level]
			end
			local anima = self:anim_for_slot(wpn_slot, a.idle)
			if anima then
				add_anim(self.npc, anima, true)
			end		
			self.states.current_state = "_wait"
			write_log_3(self.npc, "~~STMGR[%s] animation_update_8_4_EXIT", self.npc:name())
			return
		end
		--' Определяем нужно ли добавлять анимацию или ждать
		write_log_3(self.npc, "~~STMGR[%s] animation_update_8_5", self.npc:name())
		if	animations[self.states.current_state] ~= nil then
			local state			
			if self.states.anim_level == 0 then
				state = animations[self.states.current_state]
			else
				state = animations[self.states.current_state].subanim[self.states.anim_level]
			end
			if state.rnd ~= nil then
				if self.states.begin == nil then				
					self:play_rnd(state, true)
				elseif time_global() - self.states.begin > self.states.idle then
					self:play_rnd(state)
				end
			end
		end	
		write_log_3(self.npc, "~~STMGR[%s] animation_update_8_6", self.npc:name())
	
	end
	write_log_3(self.npc, "~~STMGR[%s] animation_update_9", self.npc:name())
end
-- Отыгрыш рандомной анимации
function animation:play_rnd(state, must_play)
	-- нельзя добавлять рандом во время лока схемы.
	write_log_3(self.npc, "~~STMGR[%s] animation_play_rnd_1", self.npc:name())
	-- Попробуем апдейтнуть оружие (чтобы вовремя началась стрельба)
	self.mgr.planner:action(self.mgr.operators["end"]):weapon_update()
	if not (self.mgr.planner:evaluator(self.mgr.properties["animation"]):evaluate() and
	        self.mgr.planner:evaluator(self.mgr.properties["weapon"]):evaluate())
	then
		write_log_3(self.npc, "~~STMGR[%s] animation_play_rnd_EXIT", self.npc:name())
		return
	end
	
	write_log_3(self.npc, "~~STMGR[%s] animation_play_rnd_2", self.npc:name())
	-- !!! проверка что закончился играться наш звук
	if self.sound_played then
		if self.npc:active_sound_count() == 0 then
			self.sound_played = false
		end
		return
	end
	
	write_log_3(self.npc, "~~STMGR[%s] animation_play_rnd_3", self.npc:name())
	--' Определение промежутков времени между анимациями	
	self.states.begin = time_global()
	
    if state.prop.maxidle == 0 then
        self.states.idle = state.prop.sumidle * 1000
    else
    	self.states.idle = (math.random(state.prop.maxidle) + state.prop.sumidle) * 1000
    end
	write_log_3(self.npc, "~~STMGR[%s] animation_play_rnd_3A", self.npc:name())
	if math.random(100) < state.prop.rnd or must_play then	
		local wpn_slot = self:weapon_slot()
		local anima = self:anim_for_slot(wpn_slot,state.rnd)
		if anima == nil then
			write_log_3(self.npc, "~~STMGR[%s] animation_play_rnd_4", self.npc:name())
			return
		end
		
		local r
		-- log1("!!DEBUG "..tostring(anima))
		if table.getn(anima) > 1 then			
			if self.states.last_id == nil then
				r = math.random(table.getn(anima))
			else
				r = math.random(table.getn(anima)-1)
				if r >= self.states.last_id then
					r = r + 1
				end
			end
			self.states.last_id = r
		else
			r = 1
		end	
		write_log_3(self.npc, "~~STMGR[%s] animation_play_rnd_5", self.npc:name())
		self.npc:clear_animations()
		if anima[r] ~= nil then
			add_anim(self.npc, anima[r], true)
			-- добавить рандомный звук
			if self.mgr.synsound and self.npc:active_sound_count() == 0 then
				xr_sound.set_sound_play(self.npc, self.mgr.synsound)
				self.sound_played = true		   
			end
		end
		if state.idle ~= nil then
			local anima = self:anim_for_slot(wpn_slot,state.idle)
			if anima then
				add_anim(self.npc, anima, true)
			end
		else
			-- Для политкорректности просим анимстейт отыграть свою айдловую анимацию
			self.mgr.animstate:add_idle_animation()
		end				
		self.states.current_state = "_wait"				
	end
	write_log_3(self.npc, "~~STMGR[%s] animation_play_rnd_4", self.npc:name())
end
-- Инициализация коллбека
function animation:callback_init(recall)
		write_log_3(self.npc, "~~STMGR: callback init anim[%s]", tostring(self.states.current_state))
		write_log_3(self.npc, "~~STMGR: state_lib.states[self.mgr.target_state].animation == self.states.current_state [%s]", tostring(state_lib.states[self.mgr.target_state].animation == self.states.current_state))
		write_log_3(self.npc, "~~STMGR[%s] animation_callback_init_1", self.npc:name())
		if self.mgr.callback ~= nil and
		   self.mgr.callback.func ~= nil and
		   (state_lib.states[self.mgr.target_state].animation == self.states.current_state or
		    recall == true) and
		   self.mgr.callback.begin == nil
		then
			self.mgr.callback.begin = time_global()
			write_log_3(self.npc, "~~STMGR: 		Callback initialized %s", time_global())
		else
			if not self.mgr.callback then
				write_log_3(self.npc, "~~STMGR[%s] animation_callback_not_init_1 [nil]", self.npc:name())
			else
				if not self.mgr.callback.func then
					write_log_3(self.npc, "~~STMGR[%s] animation_callback_not_init_2 [nil]", self.npc:name())
				end
			end
			write_log_3(self.npc, "~~STMGR[%s] animation_callback_not_init_3 [%s]", self.npc:name(), tostring(recall))
			if self.mgr.callback and self.mgr.callback.begin then
				write_log_3(self.npc, "~~STMGR[%s] animation_callback_not_init_4 [%s]", self.npc:name(), self.mgr.callback.begin)
			end
		end
end
--' обработка колбека на время
function animation:callback_process()
		local ret = false
		write_log_3(self.npc, "~~STMGR[%s] animation_callback_process_1", self.npc:name())
		
		if self.mgr.callback ~= nil and
		   self.mgr.callback.func ~= nil and
		   self.mgr.callback.begin ~= nil
		then
			write_log_3(self.npc, "~~STMGR: callback process")
			write_log_3(self.npc, "~~STMGR: 	%s - %s ? %s", time_global(), tostring(self.mgr.callback.begin), tostring(self.mgr.callback.timeout))
			if time_global() - self.mgr.callback.begin >= self.mgr.callback.timeout then
				write_log_3(self.npc, "~~STMGR: 		Callback called %s", time_global())
				
				local a = self.mgr.callback.func
				local b = self.mgr.callback.obj
				self.mgr.callback.begin = nil
				self.mgr.callback.func = nil
				a(b)
				ret = true
			end
		end
		return ret
end
-- Обнуляем колбек при переключении анимационных блоков
function animation:clear_anim_callback()
	self.clb_settings = {}
end
--' настройка колбека на особые действия
function animation:set_anim_callback(value)
	write_log_3(self.npc, "~~STMGR: SET ANIM callback [%s]", self.npc:animation_count())
	-- Нужно определить разницу между активным количеством анимаций и размером таблицы
	-- дополнить таблицами нилами до нужного размера
	-- в последнюю позицию записать настройки.
	local table_size = table.getn(self.clb_settings)
	local anim_count = self.npc:animation_count()
	write_log_3(self.npc, "~~STMGR: for debug [%s] [%s]", table_size, anim_count)
	
	for key = 1, anim_count - table_size - 1 do
		table.insert( self.clb_settings, false )
    end
	table.insert( self.clb_settings, value )
end
--' коллбек на особые действия
function animation:anim_callback()
	write_log_3(self.npc, "~~STMGR[%s] animation_anim_callback_1", self.npc:name())
	write_log_3(self.npc, "~~STMGR: anim callback [%s]", self.npc:animation_count())
	-- Проходим по таблице, из 1 позиции вычитываем действий. Остальные просто сдвигаем
	local v = self.clb_settings[1]
	
	if v == nil then
		return true
	end

	if not v then
		table.remove(self.clb_settings, 1)
		return true
	end
	
	-- Производим действия находящиеся на 1 позиции
	if v.a then
		--KRodin: отключаю, не фатально.
		--ASSERT(
		--	( not self.attached_item ),
		--	"[%s]: %s is trying to attach %s, but %s is already attached",
		--	script_name(), self.npc:name(), v.a, tostring( self.attached_item )
		--)
		local obj = self.npc:object( v.a )
		if obj then
			obj:enable_attachable_item( true )
		end
		self.attached_item = v.a
	elseif v.d and self.attached_item then
		--KRodin: отключаю, не фатально.
		--ASSERT(
		--	self.attached_item == v.d,
		--	"[%s]: %s is trying to detach %s, but %s is attached",
		--	script_name(), self.npc:name(), v.d, tostring( self.attached_item )
		--)
		local obj = self.npc:object( v.d )
		if obj then
			obj:enable_attachable_item( false )
		end
		self.attached_item = nil
	end
	if v.s ~= nil then
		xr_sound.set_sound_play(self.npc, v.s)
	end
	if v.sh ~= nil then
		-- наносим хит себе.
		local h = hit()
		h.power = v.sh
		h.direction = vector_rotate_y(self.npc:direction(), 90)
		h.draftsman = self.npc
		h.impulse = 200
		h.type = hit.wound
		self.npc:hit(h)
	end
	if v.f ~= nil then
		-- Запуск функции
		write_log_3(self.npc, "~~STMGR: called function [%s]", tostring(v.f))
		v.f(self.npc)
	end
	table.remove(self.clb_settings, 1)
	return true 
end
--' в каком состоянии мы находимся
function animation:state()
	return self.states.current_state
end
--' в каком состоянии мы находимся
function animation:target_state()
	return self.states.target_state
end
--' оружейный слот
function animation:weapon_slot()
	write_log_3(self.npc, "~~STMGR[%s] animation_weapon_slot_1", self.npc:name())
	local weapon = self.npc:active_item()
	if weapon == nil or self.npc:weapon_strapped() == true then
		return 0
	end
	
	write_log_3(self.npc, "~~STMGR: SLOT [%s]", tostring(weapon:animation_slot()))
		
	return weapon:animation_slot()
end
--' оружейный слот
function animation:anim_for_slot(slot, t)
	write_log_3(self.npc, "~~STMGR: ANIM for SLOT [%s]", slot)
	if not t[ slot ] then slot = 0 end
	return t[ slot ]
end


function add_anim(npc, anim, bb)
	write_log_3(npc, "~~STMGR[%s] add_anim", npc:name())
	write_log_3(npc, "~~STMGR: ANIMATION [%s] added [%s]", npc:name(), anim)
	npc:add_animation(anim, bb, false)
end
