-- based on
-- @ Version: SCREEN SPACE SHADERS - UPDATE 17
-- @ Description: Rain - Footsteps
-- @ Author: https://www.moddb.com/members/ascii1457
-- @ Mod: https://www.moddb.com/mods/stalker-anomaly/addons/screen-space-shaders

-- Settings
local ssfx_rf_vol = 0.8
local ssfx_rf_vol_variation = 0.2

local ssfx_rf_vol_multi_without_rain = 0.3
local ssfx_rf_vol_multi_walk = 0.33
local ssfx_rf_vol_multi_run = 1.4

local ssfx_rf_jump_vol = 0.7
local ssfx_rf_land_vol = 0.7
local ssfx_min_wetness_factor = 0.15

local Rain_Hemi = 0
local Rain_Factor = 0

local Footstep_Snd = {}
local Footstep_Jump_Snd = {}
local Footstep_Land_Snd = {}

local Last_Snd = -1

-- Preload all the sounds
Footstep_Snd[0] = sound_object([[material\human\step\rain_01]])
Footstep_Snd[1] = sound_object([[material\human\step\rain_02]])
Footstep_Snd[2] = sound_object([[material\human\step\rain_03]])
Footstep_Snd[3] = sound_object([[material\human\step\rain_04]])
Footstep_Snd[4] = sound_object([[material\human\step\rain_05]])
Footstep_Snd[5] = sound_object([[material\human\step\rain_06]])
Footstep_Snd[6] = sound_object([[material\human\step\rain_07]])
Footstep_Snd[7] = sound_object([[material\human\step\rain_08]])

Footstep_Jump_Snd[0] = sound_object([[material\human\step\rain_jump_01]])
Footstep_Jump_Snd[1] = sound_object([[material\human\step\rain_jump_02]])
Footstep_Jump_Snd[2] = sound_object([[material\human\step\rain_jump_03]])

Footstep_Land_Snd[0] = sound_object([[material\human\step\rain_land_01]])
Footstep_Land_Snd[1] = sound_object([[material\human\step\rain_land_02]])
Footstep_Land_Snd[2] = sound_object([[material\human\step\rain_land_03]])

local function actor_on_footstep()
	local Base_Vol = level.rain_wetness() -- Base sound volume
	if Base_Vol > ssfx_min_wetness_factor then

		Rain_Hemi = (db.actor:is_ActorHide() or isIndoor(level.name())) and 0 or level.rain_hemi()
		Rain_Factor = math.clamp(level.rain_factor(), ssfx_rf_vol_multi_without_rain, 1.0) -- Lower volume when rain stop

		Base_Vol = Base_Vol * Rain_Hemi * Rain_Factor

		if (Base_Vol < 0.05) then return end -- Just skip

		local Actor_State = get_actor_obj():get_body_state()

        local isCrouch = bit_and(Actor_State, 16) ~= 0
        local isWalk = bit_and(Actor_State, 32) ~= 0
        local isSprint = bit_and(Actor_State, 4096) ~= 0

        --log3("isCrouch=%s, isWalk=%s, isSprint=%s", isCrouch, isWalk, isSprint)

		-- Slower
		Actor_Crouch = ssfx_rf_vol_multi_walk * (isCrouch and 1 or 0)
		Actor_Walk = ssfx_rf_vol_multi_walk * (isWalk and 1 or 0)
		Actor_Aiming = ssfx_rf_vol_multi_walk * (db.actor:zoom_mode() and 1 or 0)

		-- Faster
		Actor_Sprint = isSprint

		-- Adjust volume
		Vol_Mod = 1.0 - (Actor_Crouch + Actor_Walk + Actor_Aiming)
		Vol_Mod = Actor_Sprint and ssfx_rf_vol_multi_run or Vol_Mod

		local rand = math.random(0, 7) -- Random Sound

		-- Avoid repeat
		if rand == Last_Snd then
			rand = (Last_Snd + 1) % 8
		end

		Last_Snd = rand

		-- Play Sound and set volume
		variation = math.random(0.0, ssfx_rf_vol_variation * 100) / 100

		Footstep_Snd[rand]:play(db.actor, 0, sound_object.s2d)
		Footstep_Snd[rand].volume = math.clamp(Base_Vol * (ssfx_rf_vol + variation) * Vol_Mod, 0.0, 1.0);

		--log3("* RAIN - FOOTSTEP : [%s] vol:%s base:%s", rand, Footstep_Snd[rand].volume, Base_Vol)
	end
end

local JL_Counter = { ["jump"] = 0, ["land"] = 0 }

local function ssfx_JumpLand_Snd(SndDB, Vol, CntStr)
	-- Check last Rain_Hemi
	if (Rain_Hemi > 0.1 and level.rain_wetness() > ssfx_min_wetness_factor) then

		-- Play Sound and set volume
		SndDB[JL_Counter[CntStr]]:play(db.actor,0,sound_object.s2d)
		SndDB[JL_Counter[CntStr]].volume = Vol * Rain_Factor

		-- Next Sound
		JL_Counter[CntStr] = (JL_Counter[CntStr] + 1) % 3
	end
end

local function actor_on_jump()
	if ssfx_rf_jump_vol > 0 then
		ssfx_JumpLand_Snd(Footstep_Jump_Snd, ssfx_rf_jump_vol, "jump")
	end
end

local function actor_on_land()
	if ssfx_rf_land_vol > 0 then
		ssfx_JumpLand_Snd(Footstep_Land_Snd, ssfx_rf_land_vol, "land")
	end
end


function attach(sm)
    sm:subscribe({ signal = "actor_on_jump", fun = actor_on_jump })
    sm:subscribe({ signal = "actor_on_land", fun = actor_on_land })
    sm:subscribe({ signal = "on_footstep", fun = actor_on_footstep })
end
