-- -*- mode: lua; coding: windows-1251-dos -*-

---------------------------------------
--	Менеджер изменения состояния тела
--	автор: Диденко Руслан (Stohe)
---------------------------------------

function attach( sm )
	sm:subscribe({ signal = "on_npc_death", fun = this.on_npc_death })
end

function on_npc_death( obj )
	local st = db.storage[ obj:id() ]
	if st.state_mgr then
		st.state_mgr:unsubscribe()
		st.state_mgr = nil
	end
end


local aim_ratio = 1000/50
local min_ratio = 1500

--' Эвалуатор, который синхронизирует менеджер.
--' Мы уже в безраличном состоянии idle или нет
class "evaluator_state_mgr_idle" (property_evaluator)
function evaluator_state_mgr_idle:__init(name, state_manager) super (nil, name)
	self.st = state_manager
	self.mgr = nil
end
function evaluator_state_mgr_idle:evaluate()
	local t = self.st.target_state == "idle" and 
		   --not self.st.planner:evaluator(self.st.properties["locked"]):evaluate() and
		   self.st.planner:evaluator(self.st.properties["movement"]):evaluate()	and
		   self.st.planner:evaluator(self.st.properties["animstate"]):evaluate() and
		   self.st.planner:evaluator(self.st.properties["animation"]):evaluate()

	if self.mgr == nil then
		self.mgr = self.object:motivation_action_manager()
	end

	if not self.mgr:initialized() then
		return false
	end

	local current_action_id = self.mgr:current_action_id()

	if xr_wounded and xr_wounded.is_wounded(self.object) then
		self.st.combat = false
		return false
	end
	
	if t == true then 
		if current_action_id == xr_actions_id.state_mgr + 1 then
			self.st.combat = true
		end
	end
	
	if self.st.combat == true then
		ogse_debug.add_active_eval( self.object, script_name(), "idle_combat" )
		return true 
	end
	
	return false
end
--' Мы уже в безраличном состоянии idle или нет ()учет с проверкой alife
class "evaluator_state_mgr_idle_alife" (property_evaluator)
function evaluator_state_mgr_idle_alife:__init(name, state_manager) super (nil, name)
	self.st = state_manager
	self.t = nil
end
function evaluator_state_mgr_idle_alife:evaluate()
	if not self.object:alive() then
		return true
	end
	-- апдейт менеджера анимаций
	-- раньше он был тут, сейчас он вынесен из эвалуатора

--	log3("SECTION %s", utils.to_str(db.storage[self.st.npc:id()].active_section))
	local mgr = self.object:motivation_action_manager()
	self.t = nil
	if mgr:initialized() then
		self.t = mgr:current_action_id()
		--log3("ACTION %s", utils.to_str(self.t))
		if self.t ~= xr_actions_id.alife then
			self.st.alife = false
		end
	else	
		self.st.alife = false
		return false
	end
	
	if self.st.combat == true then
		return false 
	end	
	
	if xr_wounded and xr_wounded.is_wounded(self.object) then
		self.st.alife = false
		return false
	end	

	if db.storage[self.st.npc:id()].active_section == nil then		
		if xr_meet.is_meet(self.object) == false then
			local t = self.st.target_state == "idle" and 
				not self.st.planner:evaluator(self.st.properties["locked"]):evaluate() and
				self.st.planner:evaluator(self.st.properties["movement"]):evaluate()	and
				self.st.planner:evaluator(self.st.properties["animstate"]):evaluate() and
				self.st.planner:evaluator(self.st.properties["animation"]):evaluate()
				
	--		log3("%s", utils.to_str(self.st.target_state))
	--		log3("%s", utils.to_str(self.st.planner:evaluator(self.st.properties["locked"]):evaluate()))
	--		log3("%s", utils.to_str(self.st.planner:evaluator(self.st.properties["movement"]):evaluate()))
	--		log3("%s", utils.to_str(self.st.planner:evaluator(self.st.properties["animstate"]):evaluate()))
	--		log3("%s", utils.to_str(self.st.planner:evaluator(self.st.properties["animation"]):evaluate()))
			
			if t == true then self.st.alife = true end
			if self.st.alife == true then 
				ogse_debug.add_active_eval( self.object, script_name(), "idle_alife" )
				return true 
			end
			if t == true then
				ogse_debug.add_active_eval( self.object, script_name(), "idle_alife_2" )
				return true
			end
			return false
		else
			return false
		end
	end

	ogse_debug.add_active_eval( self.object, script_name(), "idle_alife_def" )
	return true
end

--' Переход в idle
class "act_state_mgr_to_idle" (action_base)
function act_state_mgr_to_idle:__init(name,state_manager) super (nil, name)	
	self.st = state_manager
end
function act_state_mgr_to_idle:initialize()
	action_base.initialize(self)
	self.object:movement_enabled(true)
	if self.object:best_enemy() then
		self.st:set_state( script_name(), "idle", nil, nil, nil, {animation = true})
		xr_sound.set_sound(self.object, nil)
		stop_play_sound(self.object)
		return
	end
	if self.object:best_danger() then
		self.st:set_state( script_name(), "idle", nil, nil, nil, {animation = true})
		xr_sound.set_sound(self.object, nil)
		stop_play_sound(self.object)
		return
	end
	self.st:set_state( script_name(), "idle")
end
function act_state_mgr_to_idle:execute()
	action_base.execute(self)
	if self.object:best_enemy() then
		self.st:set_state( script_name(), "idle", nil, nil, nil, {animation = true})
		return
	end
	if self.object:best_danger() then
		self.st:set_state( script_name(), "idle", nil, nil, nil, {animation = true})
		return
	end
	self.st:set_state( script_name(), "idle")	
end
function act_state_mgr_to_idle:finalize()
	-- По завершению перехода нужно записать -1 в указатель "на кого смотреть", 
	-- чтобы при возврате было понятно что его нужно переинициализировать.
	
	self.st.current_object = -1
	
	action_base.finalize(self)
end

local post_combat = {}
--'-------------------------------------------------------------------------------------
--' Эвалуаторы и экшены менеджера
--'-------------------------------------------------------------------------------------
--' Закончил ли менеджер свою работу
class "eva_state_mgr_end" (property_evaluator)
function eva_state_mgr_end:__init(name, st) super (nil, name)
	self.st = st
	self.mgr = nil
end
function eva_state_mgr_end:evaluate()
	if self.mgr == nil then
		self.mgr = self.object:motivation_action_manager()
	end

	if not self.mgr:initialized() then
		self.st.combat = false
		return false
	end
	
	local be = self.object:best_enemy()
	local bd = self.object:best_danger()
	
	if (not bd or (bd and not bd:object())) and (not be or (be and ( be:is_stalker() or be:is_actor() ) and be:alive() == false) or (be and be:is_monster() and (be:alive() == false or (not self.object:see(be) and be:position():distance_to(self.object:position()) > 40)))) then
		post_combat[self.object:id()] = time_global()
	else	
		post_combat[self.object:id()] = nil
	end
	
	if post_combat[self.object:id()] and (post_combat[self.object:id()] + 10000) < time_global() then
		self.st.combat = false
		post_combat[self.object:id()] = nil
	end
	
	if bd then
	local bd_object = bd:object()
	if bd_object and bd_object:is_stalker() and bd_object:alive() then
		if self.object:relation(bd_object) ~= game_object.enemy and bd_object:relation(self.object) ~= game_object.enemy then
			local bd_enemy = bd_object:best_enemy()
			local bd_danger = bd_object:best_danger()
			if not bd_enemy and not bd_danger then
				self.st.combat = false
			elseif bd_danger then
				local bd_danger_obj = bd_danger:object()
				if not bd_danger_obj then
					self.st.combat = false
				elseif bd_danger_obj and bd_danger_obj:id() == bd_object:id() then
					self.st.combat = false
				elseif bd_danger_obj and bd_danger_obj:id() == self.object:id() then	
					self.st.combat = false
				elseif bd_danger_obj and (( bd_danger_obj:is_stalker() or bd_danger_obj:is_actor() ) or bd_danger_obj:is_monster()) and not bd_danger_obj:alive() then	
					self.st.combat = false
				end				
			end
		end
	end
	end

	local current_action_id = self.mgr:current_action_id()
	if current_action_id ~= stalker_ids.action_combat_planner and
	   current_action_id ~= stalker_ids.action_danger_planner 
	then
		self.st.combat = false
	end	

	return false
end

--' Залочен ли менеджер
class "eva_state_mgr_locked" (property_evaluator)
function eva_state_mgr_locked:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_locked:evaluate()
	--log3("npc %s", self.object:name())
	--log3("weapon locked: %s", utils.to_str(self.st.planner:evaluator(self.st.properties["weapon_locked"]):evaluate()))
	--log3("direction locked: %s", utils.to_str(self.st.planner:evaluator(self.st.properties["direction_turning"]):evaluate()))
	--log3("animstate locked: %s", utils.to_str(self.st.planner:evaluator(self.st.properties["animstate_locked"]):evaluate()))
	--log3("animation locked: %s", utils.to_str(self.st.planner:evaluator(self.st.properties["animation_locked"]):evaluate()))
	if self.st.combat or self.st.alife then 
		ogse_debug.add_active_eval( self.object, script_name(), "locked_ca" )
		return true 
	end

	local output = self.st.planner:initialized() and (
		   -- self.st.planner:evaluator(self.st.properties["weapon_locked"]):evaluate() or
		   self.st.planner:evaluator(self.st.properties["animstate_locked"]):evaluate() or
		   self.st.planner:evaluator(self.st.properties["animation_locked"]):evaluate() or
		   self.st.planner:evaluator(self.st.properties["direction_turning"]):evaluate())
		   
	local test_animstatelock = self.st.planner:initialized() and self.st.planner:evaluator(self.st.properties["animstate_locked"]):evaluate()
	local test_animlock = self.st.planner:initialized() and self.st.planner:evaluator(self.st.properties["animation_locked"]):evaluate()
	local test_dirlock = self.st.planner:initialized() and self.st.planner:evaluator(self.st.properties["direction_turning"]):evaluate()

	if output == true then
		if test_animstatelock == true then
			ogse_debug.add_active_eval( self.object, script_name(), "lk_animst" )
		end
		if test_animlock == true then
			ogse_debug.add_active_eval( self.object, script_name(), "lk_anim" )
		end
		if test_dirlock == true then
			ogse_debug.add_active_eval( self.object, script_name(), "lk_dir" )
		end
		return true
	end
	return false
end

--' Идловый экшн менеджера
class "act_state_mgr_end" (action_base)
function act_state_mgr_end:__init(name, st) super (nil, name)
	self.st = st
end
function act_state_mgr_end:initialize()
	action_base.initialize(self)
end
function act_state_mgr_end:execute()
	action_base.execute(self)
	self:weapon_update()
end	
function act_state_mgr_end:weapon_update()
--	if not self.st.planner:evaluator(self.st.properties["movement_stand_now"]):evaluate() then		
--		state_mgr_direction.update_movement_direction(self.object, self.st)
--	end
	local t = state_lib.states[self.st.target_state].weapon
	local wm = rx_wmgr and rx_wmgr.get_wm(self.object)
	local wpn = (wm and wm:get_weapon()) or self.object:best_weapon()
	if not wpn then return end

	if t == "fire" or t == "sniper_fire" then
		--log3("[%s] shooting", self.object:name())
		local sniper_aim = 3000
		if self.st.look_object ~= nil then
			local look_object = level.object_by_id(self.st.look_object)
			if look_object == nil then
				self.st.look_object = nil
				return
			end
			if self.object:see(look_object) and
				(not ( look_object:is_stalker() or look_object:is_actor() ) or				
				self.object:relation(look_object) == game_object.enemy) and
				look_object:alive() == true
			then
				if t == "sniper_fire" then
					sniper_aim = self.object:position():distance_to(look_object:position())*aim_ratio
					if sniper_aim <= min_ratio then
						self.object:set_item(object.fire1, wpn, 1, min_ratio)
						return
					end					
					self.object:set_item(object.fire1, wpn, 1, sniper_aim)
				else
					self.object:set_item(object.fire1, wpn, state_mgr_weapon.get_queue_params(self.object, look_object))
				end
				return
			else
				self.object:set_item(object.idle, wpn)
				return
			end
		end
			
		if self.st.look_position ~= nil and self.st.look_object == nil then
			if t == "sniper_fire" then
				self.object:set_item(object.fire1, wpn, 1, sniper_aim)
			else
				self.object:set_item(object.fire1, wpn, state_mgr_weapon.get_queue_params(self.object, nil))
			end
			return
		else
			if self.st.target_state == "psy_shoot" then
				if self.st.psy_shoot_t then
					if self.st.psy_shoot_t < time_global() then
						self.object:kill( wpn )
						self.st.psy_shoot_t = nil
					end
				else
					self.object:set_item( object.fire1, wpn )
					self.st.psy_shoot_t = time_global() + 750
				end
				return
			end
			self.object:set_item(object.idle, wpn)
			return				
		end
		self.object:set_item(object.fire1, wpn, state_mgr_weapon.get_queue_params(self.object, nil, state_lib.states[self.st.target_state]))
		return
	elseif t == "unstrapped" then
		--log3("[%s] not shooting", self.object:name())
		self.object:set_item(state_mgr_weapon.get_idle_state(self.st.target_state), wpn)
	end	
end

function act_state_mgr_end:finalize()
	action_base.finalize(self)
end

--' Лок менеджера
class "act_state_mgr_locked" (action_base)
function act_state_mgr_locked:__init(name, st) super (nil, name)
	self.st = st
end
function act_state_mgr_locked:initialize()
	action_base.initialize(self)
end
function act_state_mgr_locked:execute()
	action_base.execute(self)	
end
function act_state_mgr_locked:finalize()
	action_base.finalize(self)
end


animation_reset_denied = {
	wounded = true,
	wounded_heavy = true,
	wounded_heavy_2 = true,
	wounded_heavy_3 = true,
	wounded_zombie = true
}

--' Сам менеджер
class "state_manager"
function state_manager:__init(npc)
	state_mgr_goap.goap_graph(self, npc)
		
	self.target_state = "idle"
	self.current_direction = nil
	self.target_position = nil
	self.current_object = nil
	self.combat = false
	self.alife = true
	self.emerg = {}
	self.synsound = nil
	self.yaw_delta = nil
	self.subanim = 0
	self.need_reweapon = false

	if npc:alive() then
		self.sm = ogse_signals.get_mgr()
		self.subscribed = {
			[ "signal" ] = "on_npc_update." .. self.npc:id(),
			[ "fun"    ] = self.update,
			[ "self"   ] = self,
		}
		self.sm:subscribe( self.subscribed )
	end
end

function state_manager:unsubscribe()
  if self.subscribed then
    self.sm:unsubscribe( self.subscribed )
    self.subscribed = nil
  end
end

function state_manager:set_state(_, state_name, callback, timeout, target, emerg, synsound, extrakeys)
	--log3("Set State called: for %s State: %s", self.npc:name(), state_name)
	
	if state_lib.states[state_name] == nil then
		-- KRodin: а вообще, какой смысл получать имя скрипта откуда вызывали, если при вылете в любом случае получим луашный трейсбек?
		-- В старом движке трейсбека не было, что-ли...
		--local d = debug.getinfo(3, "S")
		--log1("DEBUG_STATEMGR: Script [".. d.short_src:gsub('^.-([^\\]+)%.[^.]+$', '%1') .. "." .. d.linedefined .."] called illegal state ["..tostring(state_name).."] for NPC "..tostring(self.npc:name()))
		abort("ERROR: ILLEGAL SET STATE CALLED!!! [%s] fo [%s]", tostring(state_name), self.npc:name())
		-- state_name="idle"
	end
	
	--[[if target then
		if target.look_position then
			log3("look position: %s %s %s", target.look_position.x, target.look_position.y, target.look_position.z)
		else
			log3("look position: NIL")
		end
		if target.look_object then
			log3("look object: %s", target.look_object:name())
		else
			log3("look object: NIL")
		end
	else
		log3("look target NIL")
	end]]

	--сперва устанавливаем цели
	if target ~= nil then
		self.look_position = target.look_position
		if target.look_object ~= nil then 
			self.look_object = target.look_object:id()
		else
			self.look_object = nil
		end
	else
		self.look_position = nil
		self.look_object = nil
	end

	-- меняем угол точности.
	if extrakeys and extrakeys.yaw_delta ~= nil then
		self.yaw_delta = extrakeys.yaw_delta
	else
		self.yaw_delta = 5
	end

	-- меняем глубину рекурсивности анимации.
	if extrakeys and extrakeys.subanim ~= nil then
		self.subanim = extrakeys.subanim
	else
		self.subanim = 0
	end

	local switched = false
	local last_state = self.target_state
	if self.target_state ~= state_name then

		--' Если мы переключаемся из стреляющего состояния в нестреляющее - необходимо сразу же прекратить стрельбу
		if (state_lib.states[self.target_state].weapon == "fire" or
		   state_lib.states[self.target_state].weapon == "sniper_fire") and 
		   (state_lib.states[state_name].weapon ~= "fire" and
		   state_lib.states[state_name].weapon ~= "sniper_fire")		
		then		
			self.npc:set_item(state_mgr_weapon.get_idle_state(state_name), state_mgr_weapon.get_weapon(self.npc, state_name))
			--log3("[%s] stop shooting", self.npc:name())
		end

		-- --' Если мы переключаемся из идущего положения в стоящее - надо задизаблить перемещение
		-- if state_lib.states[self.target_state].movement ~= move.stand and
			-- state_lib.states[self.target_state].animation ~= nil and
			-- state_lib.states[state_name].movement == move.stand
		-- then
			-- self.npc:movement_enabled(false)
		-- end

		self.target_state = state_name	
		self.current_object = nil

		switched = true
	end

	if state_lib.states[state_name].reset == true then
		self.reset_state = true
	else
		self.reset_state = false
	end

	if switched and emerg ~= nil then
		if animation_reset_denied[last_state] ~= true  then
			self.emerg.animation = emerg.animation
			self.emerg.animation_nout = emerg.animation_nout
		end
	end

	self.synsound = synsound
	
	self.callback = callback
	if timeout ~= nil and
	   timeout >= 0 
	then
		self.callback.timeout = timeout
		self.callback.begin = nil
	else
		if self.callback then			
			self.callback.func = nil
			self.callback.timeout = nil
		end
	end

	-- if switched == true then
		-- if self.npc:best_enemy() then
			-- if last_state == nil or last_state == "idle" then
				-- self:update()
			-- end
		-- elseif self.npc:best_danger() then
			-- if last_state == nil or last_state == "idle" then
				-- self:update()
			-- end			
		-- end
	-- end
	
--	if switched == true then
--		self:update()
--	end
end

function state_manager:get_state()
	return self.target_state
end

function state_manager:update()
	--log1("Update called")
	self.animstate:update()	
	self.animation:update()	
	local last_pl_id = nil	
	self.planner:update()
	if not self.planner:initialized() then return end

	local pl_id = self.planner:current_action_id()
	while pl_id ~= last_pl_id and
	   pl_id ~= self.operators["end"] and
	   pl_id ~= self.operators["locked"]
	do
		last_pl_id = pl_id
		self.planner:update()
		pl_id = self.planner:current_action_id()
	end	
	--self.planner:show("")
end

function set_state(caller, npc, ...) --Добавил в функцию костыли, чтоб не править тыщу скриптов
	local caller_is_string = type(caller) == "string"
	if caller_is_string then caller = npc end

	if db.storage[caller:id()].state_mgr then
		if caller_is_string then
			db.storage[caller:id()].state_mgr:set_state( nil, ... )
		else
			db.storage[caller:id()].state_mgr:set_state( nil, npc, ... )
		end
	end
end

function get_state(npc)
	if db.storage[npc:id()].state_mgr then
		return db.storage[npc:id()].state_mgr:get_state()
	end
	return nil
end


function bind_manager(object)
	local manager = object:motivation_action_manager()


	local properties	= {}
	properties["state_mgr_idle_combat"] 	= xr_evaluators_id.state_mgr + 1
	properties["state_mgr_idle_alife"]	 	= xr_evaluators_id.state_mgr + 2


	local operators		= {}
	operators["state_mgr_to_idle_combat"]	= xr_actions_id.state_mgr + 1
	operators["state_mgr_to_idle_alife"]	= xr_actions_id.state_mgr + 2


	local state_manager = state_mgr.state_manager(object)
	
	manager:add_evaluator(properties["state_mgr_idle_combat"], 	evaluator_state_mgr_idle("state_mgr_idle_combat", state_manager))
	manager:add_evaluator(properties["state_mgr_idle_alife"], 	evaluator_state_mgr_idle_alife("state_mgr_idle_alife", state_manager))

	local action = this.act_state_mgr_to_idle("state_mgr_to_idle_combat", state_manager)
	action:add_precondition		(world_property(properties["state_mgr_idle_combat"],	false))
	action:add_effect 			(world_property(properties["state_mgr_idle_combat"],	true))
	manager:add_action(operators["state_mgr_to_idle_combat"], action)

	action = this.act_state_mgr_to_idle("state_mgr_to_idle_alife", state_manager)
	action:add_precondition		(world_property(stalker_ids.property_enemy,	false))
	action:add_precondition		(world_property(stalker_ids.property_danger,false))
	action:add_precondition		(world_property(properties["state_mgr_idle_alife"],	false))
	action:add_effect 			(world_property(properties["state_mgr_idle_alife"],	true))
	manager:add_action(operators["state_mgr_to_idle_alife"], action)

	action = manager:action(xr_actions_id.alife)
	action:add_precondition(world_property(properties["state_mgr_idle_alife"],true))

  	action = manager:action(stalker_ids.action_combat_planner)
  	action:add_precondition(world_property(properties["state_mgr_idle_combat"],true))

  	action = manager:action(stalker_ids.action_anomaly_planner)
  	action:add_precondition(world_property(properties["state_mgr_idle_combat"],true))
  	
  	action = manager:action(stalker_ids.action_danger_planner)
  	action:add_precondition(world_property(properties["state_mgr_idle_combat"],true))

	action = manager:action(stalker_ids.action_gather_items)
	action:add_precondition(world_property(properties["state_mgr_idle_alife"],true))
	
	return state_manager
end
