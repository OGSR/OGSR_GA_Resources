-- -*- mode: lua; coding: windows-1251-dos -*-


function attach( sm )
  sm:subscribe({ signal = "on_monster_init",   fun = this.on_init })
  sm:subscribe({ signal = "on_monster_spawn",  fun = this.on_monster_spawn })
  sm:subscribe({ signal = "on_monster_death",  fun = this.on_death })
  sm:subscribe({ signal = "on_monster_net_destroy", fun = this.on_net_destroy })
  sm:subscribe({ signal = "on_npc_init",       fun = this.on_init })
  sm:subscribe({ signal = "on_npc_death",      fun = this.on_death })
  sm:subscribe({ signal = "on_npc_net_destroy", fun = this.on_net_destroy })
end


function on_init( obj, binder )
  binder.particles = {}
end

function on_monster_spawn( obj )
	local particle_param = get_string( obj:section(), "bones_particles" )
	if particle_param and sys_ini:section_exist(particle_param) then
		local tmp = get_section_keys_and_values(particle_param)
		for k,v in pairs(tmp) do
			local t = get_section_keys_and_values(v)
			t.obj = obj
			if not t.stop_on_death or obj:alive() then
				play_particle(obj, t)
			end
		end
	end
end

function on_update( obj, delta )
  local binder = obj:binded_object()
  local unsubscribe = true
  for k, v in pairs( binder.particles ) do
    if v:is_finished() then
      binder.particles[ k ] = nil
    else
	  unsubscribe = false
      v:update( delta )
      if v.give_dmg and v.target then
        if
          v:get_pos():distance_to(
            v.target:bone_position( get_string( v.target:section(), "bone_torso", "bip01_spine" ) )
          ) < 1
        then
          local h = hit()
          h.impulse   = 0
          h.draftsman = v.target
          h.direction = v.dir
          h:bone( get_string( v.target:section(), "bone_torso", "bip01_spine" ) ) -- чтобы учитывалась броня
          h.power     = math.random( 10, 50 ) / 100
          h.type      = hit.strike
          v.target:hit( h )
          h.power     = math.random( 10, 50 ) / 100
          h.type      = hit.chemical_burn
          v.target:hit( h )
          v:stop()
        end
      end
    end
  end
  if unsubscribe then
    local s = binder[ script_name() .. ".subscribed" ]
    ASSERT( s, "not subscribed: %s", obj:name() )
    ogse_signals.get_mgr():unsubscribe( s )
    binder[ script_name() .. ".subscribed" ] = nil
  else
    local dist = obj:position():distance_to( db.actor:position() )
    ogse_signals.get_mgr():reschedule(
      ( dist < 25 and 100 )
      or ( dist <  50 and 200 )
      or ( dist < 100 and 500 )
      or ( dist < 200 and math.random( 1000, 2000 ) )
      or math.random( 2000, 4000 )
    )
  end
end

function on_death( obj, who )
  local binder = obj:binded_object()
  for k, v in pairs( binder.particles ) do
    v:on_death()
  end
end

function on_net_destroy( obj )
  local binder = obj:binded_object()
  for k, v in pairs( binder.particles ) do
    if not v:is_finished() then
      v:stop()
      binder.particles[ k ] = nil
    end
  end
end

function play_particle( obj, params )
  local binder = obj:binded_object()
  if not binder then return end
  if not binder.particles then return end
  --
  local key = params.bone .. params.particle
  if not binder.particles[ key ] then
    binder.particles[ key ] = amk_particle( params )
  end
  if not binder[ script_name() .. ".subscribed" ] then
    local s_name = obj:is_stalker()
      and ( "on_npc_update."     .. obj:id() )
      or  ( "on_monster_update." .. obj:id() )
    local s = {
      [ "signal" ] = s_name,
      [ "fun"    ] = this.on_update,
    }
    binder[ script_name() .. ".subscribed" ] = s
    ogse_signals.get_mgr():subscribe( s )
  end
end

-------------------------------------------------------------------------------
class "amk_particle"
function amk_particle:__init( params )
  self.type      = params.typ or "absolute"
  self.dir       = params.dir or vector():set( 0, 0, 0 )
  self.len       = params.len or 1
  self.looped    = params.looped or false
  self.life_time = params.life_time or -1
  self.obj       = params.obj
  self.bone      = params.bone
  self.pos       = params.pos
  self.stop_on_death = params.stop_on_death or false
  self.gravity   = params.gravity or vector():set( 0, 0, 0 )
  self.give_dmg  = params.give_dmg or false
  self.target    = params.target

  if params.sound then
    self.snd = sound_object( params.sound )
    self.snd_looped = params.sound_looped or false
  end

  self.cgravity   = vector():set( 0, 0, 0 )
  self.particle   = particles_object( params.particle )
  self.started    = false
  self.start_time = time_global()
  self.finalized  = false
  self:start()
end

function amk_particle:__finalize()
--log1("amk_particle:__finalize() - start")
  --self.particle:stop() --KRodin: а оно тут надо?
--log1("amk_particle:__finalize() - end")
end

function amk_particle:start()
  if not self.particle:playing() then
    local pos
    if self.bone and self.obj then
      pos = self.obj:bone_position( self.bone )
    elseif self.pos then
      pos = self.pos
    end
    self.start_pos = pos
    if pos then
      if self.snd then
        if self.snd_looped then
          self.snd:play_at_pos( db.actor, pos, 1, sound_object.looped )
        else
          self.snd:play_at_pos( db.actor, pos )
        end
        self.snd = nil
      end
      self.particle:play_at_pos( pos )
      self.started = true
    end
  end
end

function amk_particle:update( delta )
  if self.finalized then return end
  self.cgravity = self.cgravity:add( self.gravity )
  if self.particle:playing() then
    if
      self.life_time > -1
      and time_global() > self.start_time + self.life_time
    then
      self.started   = false
      self.looped    = false
      self:stop()
      self.finalized = true
    end
    local pos
    if self.bone and self.obj then
      pos = self.obj:bone_position( self.bone )
      self.pos = pos
    elseif self.dir then
      self.pos = self.pos:add(
        self.dir:set_length( self.len / self.life_time * delta )
      )
      self.pos = self.pos:add( self.cgravity )
      pos = self.pos
    end
    if pos then
      if self.snd and self.snd:playing() then
        self.snd:set_position( pos )
      end
      self.particle:move_to( pos, pos )
    end
  else
    if self.started then
      if self.looped then
        self:start()
      else
        self.started   = false
        self.looped    = false
        self:stop()
        self.finalized = true
      end
    end
  end
end

function amk_particle:stop()
  self.give_dmg = false
  if self.particle:playing() then
    self.particle:stop_deffered()
  end
  if self.snd and self.snd:playing() then
    self.snd:stop()
  end
end

function amk_particle:get_pos()
  return self.pos
end

function amk_particle:is_finished()
  return self.finalized
end

function amk_particle:on_death()
  if self.stop_on_death then
    self:stop()
  end
end
