-- -*- mode: lua; coding: windows-1251-dos -*-

----------------------------------------------------------------------------------------------------------------------
--  Схема раненного
--  автор: Диденко Руслан (Stohe)
--  TODO:
----------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------
--Evaluators
----------------------------------------------------------------------------------------------------------------------
local beg_timer = time_global()
local beg_check_timer = {}

local dont_shoot = {

["bandit_1"] = [[characters_voice\human_01\bandit\states\panic_human\panic_human_1]],
["bandit_2"] = [[characters_voice\human_01\bandit\states\panic_human\panic_human_2]],
["bandit_3"] = [[characters_voice\human_01\bandit\states\panic_human\panic_human_6]],
["bandit_4"] = [[characters_voice\human_01\bandit\states\panic_human\panic_human_7]],
["bandit_5"] = [[characters_voice\human_01\bandit\states\panic_human\panic_human_8]],

["csky_1"] = [[characters_voice\human_01\csky\states\panic_human\panic_human_3]],
["csky_2"] = [[characters_voice\human_01\csky\states\panic_human\panic_human_4]],
["csky_3"] = [[characters_voice\human_01\csky\states\panic_human\panic_human_6]],
["csky_4"] = [[characters_voice\human_01\csky\states\panic_human\panic_human_7]],

["ecolog_1"] = [[characters_voice\human_01\ecolog\states\panic_human\panic_1]],
["ecolog_2"] = [[characters_voice\human_01\ecolog\states\panic_human\panic_2]],
["ecolog_3"] = [[characters_voice\human_01\ecolog\states\panic_human\panic_4]],
["ecolog_4"] = [[characters_voice\human_01\ecolog\states\panic_human\panic_5]],

["freedom_1"] = [[characters_voice\human_01\freedom\states\panic_human\panic_human_1]],
["freedom_2"] = [[characters_voice\human_01\freedom\states\panic_human\panic_human_2]],
["freedom_3"] = [[characters_voice\human_01\freedom\states\panic_human\panic_human_3]],
["freedom_4"] = [[characters_voice\human_01\freedom\states\panic_human\panic_human_4]],

["killer_1"] = [[characters_voice\human_01\killer\states\panic_human\panic_1]],
["killer_2"] = [[characters_voice\human_01\killer\states\panic_human\panic_2]],
["killer_3"] = [[characters_voice\human_01\killer\states\panic_human\panic_3]],

["military_1"] = [[characters_voice\human_01\military\states\panic_human\panic_human_1]],
["military_2"] = [[characters_voice\human_01\military\states\panic_human\panic_human_2]],
["military_3"] = [[characters_voice\human_01\military\states\panic_human\panic_human_3]],
["military_4"] = [[characters_voice\human_01\military\states\panic_human\panic_human_5]],

["monolith_1"] = [[characters_voice\human_01\monolith\states\panic_human\panic_1]],
["monolith_2"] = [[characters_voice\human_01\monolith\states\panic_human\panic_2]],
["monolith_3"] = [[characters_voice\human_01\monolith\states\panic_human\panic_3]],

["newbie_1"] = [[characters_voice\human_01\newbie\states\panic_human\panic_human_1]],
["newbie_2"] = [[characters_voice\human_01\newbie\states\panic_human\panic_human_2]],
["newbie_3"] = [[characters_voice\human_01\newbie\states\panic_human\panic_human_3]],
["newbie_4"] = [[characters_voice\human_01\newbie\states\panic_human\panic_human_4]],

["stalker_1"] = [[characters_voice\human_01\stalker\states\panic_human\panic_human_3]],
["stalker_2"] = [[characters_voice\human_01\stalker\states\panic_human\panic_human_4]],
["stalker_3"] = [[characters_voice\human_01\stalker\states\panic_human\panic_human_6]]

}

class "evaluator_wound" (property_evaluator) 
function evaluator_wound:__init(name, storage) super(nil, name)
    self.a = storage
end

function evaluator_wound:evaluate()

	local npc = self.object
	if self.a.wounded_set ~= true then return false end
	if not self.a.regen then
		--KRodin: выключаю, чтобы скриптовая боевка отключалась если враг ранен и работала исправленная движковая схема добивания раненых.
		--self.a.regen = npc:character_community()=="zombied" or npc:character_community()=="monolith"
	end
  
	local sobj = alife():object(npc:id())
	
	if npc.health>0.95 
	and self.a.regen 
	and tostring(xr_logic.pstor_retrieve(self.object, "wounded_state")) ~= "nil" 
	then
		if sobj then
			sobj.wounded = false
		end
		self.a.wound_manager:hit_callback()
	elseif tostring(xr_logic.pstor_retrieve(self.object, "wounded_state")) == "nil" and sobj and sobj.wounded then
		self.a.wound_manager:hit_callback()
	end
	
	--[[if self.mgr == nil then
		self.mgr = self.object:motivation_action_manager()
	end
	
	 закомментировано KamikaZze - этот блок вызывает зависание сталкеров при одновременном ранении и активном свойстве wounded_fight
	-- в результате бесконечно тупят в одну точку со стрельбой или без
	
	-- if self.object:critically_wounded() == true then
		-- return false
	-- end
	
	-- if self.mgr:evaluator(stalker_ids.property_enemy):evaluate() and
		-- xr_logic.pstor_retrieve(self.object, "wounded_fight") == "true"
	-- then
		-- return false
	-- end ]]--

	if tostring(xr_logic.pstor_retrieve(self.object, "wounded_state")) ~= "nil" then
		ogse_debug.add_active_eval( self.object, script_name(), "wounded" )
		--if string.find(npc:name(), "bar_arena_kaligula") then --KRodin: А зачем оно тут вообще нужно?
		--	npc:remove_restrictions("bar_arena_restrictor","")
		--end
		return true
	end	
	return false
end    

class "evaluator_can_fight" (property_evaluator) 
function evaluator_can_fight:__init(name, storage) super(nil, name)
    self.a = storage
end
function evaluator_can_fight:evaluate ()
  if self.object:critically_wounded() == true then
	ogse_debug.add_active_eval( self.object, script_name(), "wounded_can_fight" )
	return true
  end

  if xr_logic.pstor_retrieve(self.object, "wounded_fight") ~= "false" then
    ogse_debug.add_active_eval( self.object, script_name(), "evaluator_can_fight" )
    return true
  end
  return false
end

----------------------------------------------------------------------------------------------------------------------
--Actions
----------------------------------------------------------------------------------------------------------------------
class "action_wounded" (action_base)
function action_wounded:__init(name, storage) super(nil, name)
    self.a = storage
end
function action_wounded:initialize ()
    action_base.initialize (self)
  self.object:set_desired_position()
  self.object:set_desired_direction()
  self.sound = "nil"

  if self.a.help_start_dialog then
    self.object:set_start_dialog(self.a.help_start_dialog)
  end
  if not self.a.regen then
    self.object:wounded(true)
  end

end
function action_wounded:execute ()
    action_base.execute (self)
  local wound_manager = self.a.wound_manager
  
  local wound_manager_victim = xr_logic.pstor_retrieve(self.object, "wounded_victim")

  local victim = nil  
  if wound_manager_victim == "actor" then
    victim = db.actor
  elseif tostring(wound_manager_victim) == "nil" then
    victim = nil
  else
    local sim = alife()
    if sim then
      victim = sim:story_object(victim)
    end
  end

	--[=[local obj_community = self.object:character_community() --/#+#
	if obj_community == "monolith" then
		local posit = self.object:position()
		local enemy = self.object:best_enemy()
		if enemy and posit:distance_to(enemy:position()) < 1.5 and self.object:see(enemy) then
			rnd = math.random(1, 3)
			if rnd == 1 and not has_alife_info("enable_talk")  then
				db.actor:give_info_portion("die")
				soundtrack.monolith_die()
				dsh_monster_attack.blow_zombie(self.object)
			end
			if rnd == 2 and not has_alife_info("enable_talk")  then
				db.actor:give_info_portion("die")
				soundtrack.monolith_die()
				dsh_monster_attack.blow_zombie(self.object)
			end
			if rnd == 3 and not has_alife_info("die")  then
				db.actor:give_info_portion("enable_talk")
				self.object:enable_talk()
			end
		end
	else--]=]
		self.object:enable_talk()
	--end
    
  wound_manager_state = xr_logic.pstor_retrieve(self.object, "wounded_state")
  wound_manager_sound = xr_logic.pstor_retrieve(self.object, "wounded_sound")

  local synsound = nil
  if wound_manager_state == "true" then
    local h = hit()
    h.power = 0
    h.direction = self.object:direction()
    h.bone = "bip01_spine"
    h.draftsman = db.actor
    h.impulse = 0
    h.type = hit.wound
    self.object:hit(h)  
  else
    -- является ли текущий звук синхронным для текущего стейта
    for k,v in pairs(self.a.syndata) do
      if v.state == wound_manager_state and
         v.sound == wound_manager_sound
      then
        synsound = wound_manager_sound
      end
    end 
    --' жрание аптечек и прочей срани.
    --' Использовать можно только если нам можно сейчас есть аптечку.
    if self.a.use_medkit == true then
      wound_manager:eat_medkit()
    end
    
    local emerg = nil
    if wound_manager_state == "psy_shoot" then
      emerg = {animation_nout = true}
    end

	if xrs_medic then xrs_medic.wounded[self.object:id()] = true end

	if not wound_manager_state or wound_manager_state == "nil" then
		wound_manager_state = "wounded"
	end

    state_mgr.set_state( script_name(), self.object, wound_manager_state, nil, nil, {look_object = victim}, emerg, synsound)
  end

  if synsound == nil then
    -- нужно отыграть фоновый
    if self.sound ~= wound_manager_sound then
      self.sound = wound_manager_sound
      if self.sound == "nil" then
        xr_sound.set_sound(self.object, nil)
      else
        xr_sound.set_sound(self.object, wound_manager_sound)
      end
    end
  else
    -- нужно зарубить фоновый
    if self.sound ~= nil then
      self.sound = "nil"
      xr_sound.set_sound(self.object, nil)
    end
  end
  
  local tt = db.storage[self.object:id()]
  if tt.active_scheme and not self.object:is_talking() then
    if db.actor then
      if xr_logic.try_switch_to_another_section(self.object, tt[tt.active_scheme], db.actor) then
        return
      end
    end
  end
end    
function action_wounded:finalize ()
    action_base.finalize (self)
    self.object:disable_talk()
    xr_sound.set_sound(self.object, nil)
    self.object:wounded(false)
	if has_alife_info("enable_talk")  then
	db.actor:disable_info_portion("enable_talk")
	db.actor:disable_info_portion("die")
	end 
end    

----------------------------------------------------------------------------------------------------------------------
-- Class wound_manager
----------------------------------------------------------------------------------------------------------------------
class "Cwound_manager"
function Cwound_manager:__init(npc, storage)
  self.npc = npc
  self.a = storage
  self.can_use_medkit = false
  self.medkit_eaten=nil
end
function Cwound_manager:update()
	local hp  = 100*self.npc.health
	local psy = 100*self.npc.psy_health
	local comm = self.npc:character_community()

	local sobj=alife():object(self.npc:id())
	if comm ~= "ecolog" and sobj.wounded and (not self.a.regen) and (not self.medkit_eaten) then
		hp=1 -- симулируем раненость
	end

	if db.actor and comm ~= "ecolog" and comm ~= "trader" and comm ~= "zombied" and db.actor:active_item() and db.actor:active_item():is_weapon() and
		self.npc:relation(db.actor) == game_object.enemy and 
		self.npc.health < 0.35 and 
		self.npc:position():distance_to(db.actor:position()) < 10 and
		self:actor_targets_npc(self.npc) then
			self.npc:disable_talk()
			stop_play_sound(self.npc)
			beg_check_timer[self.npc:id()] = time_global()
			if beg_check_timer[self.npc:id()] > beg_timer then  
				-- играем звук
				local snd_name = nil
				if comm == "bandit" then
					snd_name = dont_shoot["bandit_"..math.random(5)]
				elseif comm == "csky" then
					snd_name = dont_shoot["csky_"..math.random(4)]
				elseif comm == "freedom" then
					snd_name = dont_shoot["freedom_"..math.random(4)]
				elseif comm == "killer" then
					snd_name = dont_shoot["killer_"..math.random(3)]
				elseif comm == "military" then
					snd_name = dont_shoot["military_"..math.random(4)]
				elseif comm == "monolith" then
					snd_name = dont_shoot["monolith_"..math.random(3)]
				elseif comm == "stalker" then
					local rank = ogse.armor_type(self.npc)
					if rank and rank > 3 then
						snd_name = dont_shoot["newbie_"..math.random(4)]
					else
						snd_name = dont_shoot["stalker_"..math.random(3)]
					end				
				end		
				if snd_name then
					local snd_obj = xr_sound.get_safe_sound_object(snd_name)
					if snd_obj and not snd_obj:playing() then
						snd_obj:play_no_feedback(self.npc, sound_object.s3d, 0, self.npc:position(), 1.0)
					end
				end
				beg_timer = beg_check_timer[self.npc:id()] + math.random(3000, 4000) 
			end 
	else
		self.npc:enable_talk()			
	end

  self.state, self.sound = self:process_psy_wound(psy)
  
  if self.state == "nil" and
     self.sound == "nil"
  then
    -- проверяем на обычную раненость
    self.fight  = self:process_fight(hp)
    self.victim = self:process_victim(hp)
    self.state, self.sound = self:process_hp_wound(hp)
  else
    -- устанавливаем пси раненость
    self.fight = "false"
    self.cover = "false"
    self.victim = "nil"
  end 
  
  xr_logic.pstor_store(self.npc, "wounded_state", self.state)
  xr_logic.pstor_store(self.npc, "wounded_sound", self.sound)
  xr_logic.pstor_store(self.npc, "wounded_fight", self.fight) 
  xr_logic.pstor_store(self.npc, "wounded_victim", self.victim)
  
  if self.state==nil or self.state=="nil" then
    self.medkit_eaten=nil
	sobj.wounded=false
	self.npc:wounded(false)
	self.npc:enable_trade()
	if xr_companion.is_companion(self.npc:id()) then
		self.npc.health = 1
	end
  else
	sobj.wounded = true
	self.npc:disable_trade()
	if self.npc:get_bleeding() <= 0.0 and self.npc.health > 0.2 then
		local figa_id = id_by_sid(story_ids.yan_figa)
		if self.npc:id() == figa_id then -- И Фиге тем более нечего просто так валяться выздоравливать
			self.npc.health = -0.003
		else		
			self.npc.health = -0.0003	-- Нефиг тут внагляк лежать и выздоравливать если уложили
		end
	end
  end
  
end
function Cwound_manager:unlock_medkit()
	self.can_use_medkit = true
	if xrs_medic then xrs_medic.wounded[self.npc:id()] = nil end
	if rx_facer then
		rx_facer.timeout[self.npc:id()] = time_global() + 6000
	end
end
function Cwound_manager:eat_medkit()
  if self.can_use_medkit == true then
    local medkit_eaten=false
    if self.npc:object("medkit") then
	  local medkit = self.npc:object("medkit")
	  if medkit then
		self.npc:eat(medkit)
	  end
      self.npc.health = 0.25
      medkit_eaten=true
    elseif self.npc:object("medkit_army") then
	  local medkit = self.npc:object("medkit_army")
	  if medkit then
		self.npc:eat(medkit)
	  end
      self.npc.health = 0.6
      medkit_eaten=true
    elseif self.npc:object("medkit_scientic") then
	  local medkit = self.npc:object("medkit_scientic")
	  if medkit then
		self.npc:eat(medkit)
	  end
      self.npc.health = 0.9
      medkit_eaten=true
    end
    if medkit_eaten then
      local sobj=alife():object(self.npc:id())
      sobj.wounded=false -- позволяем выйти из состояния раненности
	  self.npc:wounded(false)
      self.medkit_eaten=true
      self.can_use_medkit = false
    end
  end
  self:hit_callback()
end
function Cwound_manager:process_fight(hp)
  local key
  key = self:get_key_from_distance(self.a.hp_fight, hp)
  if key ~= nil then
    if self.a.hp_fight[key].state then
      return tostring(xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.hp_fight[key].state))
    end
  end   
  return "true"
end
function Cwound_manager:process_victim(hp)
  local key
  key = self:get_key_from_distance(self.a.hp_victim, hp)
  if key ~= nil then
    if self.a.hp_victim[key].state then
      return tostring(xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.hp_victim[key].state))
    end
  end   
  return "nil"
end
function Cwound_manager:process_hp_wound(hp)
  local key
  key = self:get_key_from_distance(self.a.hp_state, hp)
  if key ~= nil then
    local r1,r2
    if self.npc:see(db.actor) then
      if self.a.hp_state_see[key].state then
        r1 = xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.hp_state_see[key].state)
      end
      if self.a.hp_state_see[key].sound then
        r2 = xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.hp_state_see[key].sound)
      end
    else
      if self.a.hp_state[key].state then
        r1 = xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.hp_state[key].state)
      end
      if self.a.hp_state[key].sound then
        r2 = xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.hp_state[key].sound)
      end
    end
    return tostring(r1),tostring(r2)
  end   
  return "nil","nil"
end
function Cwound_manager:process_psy_wound(hp)
  local key
  key = self:get_key_from_distance(self.a.psy_state, hp)
  if key ~= nil then
    local r1,r2
    if self.a.psy_state[key].state then
      r1 = xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.psy_state[key].state)
    end
    if self.a.psy_state[key].sound then
      r2 = xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.psy_state[key].sound)
    end
    return tostring(r1),tostring(r2)
  end   
  return "nil","nil"
end
function Cwound_manager:get_key_from_distance(t, hp)
  local key
  if not t or t == "" or t == "nil" then return nil end
  for k,v in pairs(t) do
    if v.dist >= hp then 
      key = k 
    else
      return key
    end   
  end
  return key
end
function Cwound_manager:hit_callback()
  if self.npc:alive() == false then
    return
  end

  if self.npc:critically_wounded() == true then
    return
  end

  self:update()
end    
function Cwound_manager:actor_targets_npc(npc)
  local dangerang=1/npc:position():distance_to(db.actor:position())
  local ang=horz_angle(device().cam_dir,npc:position():sub(device().cam_pos))
  local tgt=ang>-dangerang and ang<dangerang
  if tgt then
    if self.tgt_time then
      return self.tgt_time<time_global()
    else
      self.tgt_time=time_global()+600
      return false
    end
  else
    self.tgt_time=nil
  end
  return false
end

----------------------------------------------------------------------------------------------------------------------
-- binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder (object, ini, scheme, section, st)
    local operators     = {}
    local properties    = {}
    
    properties["wounded"]   =   xr_evaluators_id.sidor_wounded_base
    properties["can_fight"]     =   xr_evaluators_id.sidor_wounded_base + 1

    operators["wounded"]        =   xr_actions_id.sidor_act_wounded_base + 0
    
	local state_mgr_to_idle_combat 	= xr_actions_id.state_mgr + 1
	local state_mgr_to_idle_alife = xr_actions_id.state_mgr + 2
    
    local manager = object:motivation_action_manager ()
    manager:add_evaluator (properties["wounded"],   this.evaluator_wound("wounded", st))
    manager:add_evaluator (properties["can_fight"],     this.evaluator_can_fight("can_fight", st))

    local action = this.action_wounded("wounded_action", st)
    action:add_precondition (world_property(stalker_ids.property_alive,   true))
    action:add_precondition (world_property(properties["wounded"],      true))
    action:add_effect (world_property(properties["wounded"],        false))
    action:add_effect (world_property(stalker_ids.property_enemy, false))
    action:add_effect (world_property(properties["can_fight"],    true))
    manager:add_action      (operators["wounded"], action)
	
	action = manager:action(state_mgr_to_idle_alife)
	action:add_precondition (world_property(properties["wounded"],      false))
	
	action = manager:action(state_mgr_to_idle_combat)
	action:add_precondition (world_property(properties["wounded"],      false))	
   
    action = manager:action (xr_actions_id.alife)
    action:add_precondition (world_property(properties["wounded"],      false))

    action = manager:action (stalker_ids.action_gather_items)
    action:add_precondition (world_property(properties["wounded"],      false))
    
    action = manager:action (stalker_ids.action_combat_planner)
	action:add_precondition (world_property(properties["wounded"],      false))
    action:add_precondition (world_property(properties["can_fight"],       true))

    action = manager:action (stalker_ids.action_danger_planner)
	action:add_precondition (world_property(properties["wounded"],      false))
    action:add_precondition (world_property(properties["can_fight"],       true))

end


------------
-- Вызывается только в начале на чтении логики, создает экшены, эвалуаторы и производит
-- первичную настройку.
function set_wounded(npc, ini, scheme, section)
  local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
  if not st.wound_manager then
    st.wound_manager = Cwound_manager( npc, st )
  end
end
-- Вызывается на переключении на новую секцию. Производит вычитывание настроек из текущей секции.
function reset_wounded(npc, scheme, st, section)
  local wounded_section
  if scheme == nil or scheme == "nil" then
    wounded_section = utils.cfg_get_string(st.ini, st.section_logic, "wounded", npc, false, "")
  else
    wounded_section = utils.cfg_get_string(st.ini, section, "wounded", npc, false, "")
  end
  init_wounded(npc, st.ini, wounded_section, st.wounded, scheme)
  st.wounded.wound_manager:hit_callback()
end
-- Функция чтения настроек. В нее передается секция, откуда их нужно читать.
local wounded_by_state = {
  [0] = "wounded_heavy",
  [1] = "wounded_heavy_2",
  [2] = "wounded_heavy_3"
}

function init_wounded(npc, ini, section, st, scheme)

  if tostring(section) == st.wounded_section and
     tostring(section) ~= "nil" 
  then
    return
  end
  
  st.wounded_section = utils.to_str(section)
  
  local def = {}  
  local npc_community = npc:character_community()
  if npc_community == "monolith" then
    local state = wounded_by_state[math.fmod(npc:id(), 3)]
    def.hp_state      = "50|"..state.."@nil"
    def.hp_state_see    = "50|"..state.."@nil"
    def.psy_state     = ""
    def.hp_victim     = "50|nil"
    def.hp_cover      = "50|false"
    def.hp_fight      = "50|false"
    def.syndata       = ""
    def.help_dialog     = nil
    def.help_start_dialog = nil
    def.use_medkit      = false
    
  elseif npc_community == "zombied" then
    def.hp_state      = "50|wounded_zombie@nil"
    def.hp_state_see    = "50|wounded_zombie@nil"
    def.psy_state     = ""
    def.hp_victim     = "50|nil"
    def.hp_cover      = "50|false"
    def.hp_fight      = "50|false"
    def.syndata       = ""
    def.help_dialog     = "dm_help_wounded_medkit_dialog"
    def.help_start_dialog = nil
    def.use_medkit      = true
    
  elseif npc_community == "freedom" then
	
    local state = wounded_by_state[math.fmod(npc:id(), 3)]
    def.hp_state			= "10|"..state.."@help_heavy"
    def.hp_state_see		= "10|"..state.."@help_heavy"
    def.psy_state			= "50|{=best_pistol}psy_armed,psy_pain@wounded_psy|20|{=best_pistol}psy_shoot,psy_pain@{=best_pistol}wounded_psy_shoot,wounded_psy"
    def.hp_victim			= "10|nil"
    def.hp_cover			= "10|false"
    def.hp_fight			= "10|false"
    def.syndata				= ""
    def.help_dialog			= "dm_help_wounded_medkit_dialog"
    def.help_start_dialog	= nil
    def.use_medkit			= true	
		
  elseif npc_community == "dolg" then
	
    local state = wounded_by_state[math.fmod(npc:id(), 3)]
    def.hp_state			= "10|"..state.."@help_heavy"
    def.hp_state_see		= "10|"..state.."@help_heavy"
    def.psy_state			= "50|{=best_pistol}psy_armed,psy_pain@wounded_psy|20|{=best_pistol}psy_shoot,psy_pain@{=best_pistol}wounded_psy_shoot,wounded_psy"
    def.hp_victim			= "10|nil"
    def.hp_cover			= "10|false"
    def.hp_fight			= "10|false"
    def.syndata				= ""
    def.help_dialog			= "dm_help_wounded_medkit_dialog"
    def.help_start_dialog	= nil
    def.use_medkit			= true		

  elseif string.find(npc:name(), "prisoner") then
	
    local state = wounded_by_state[math.fmod(npc:id(), 3)]
    def.hp_state			= "10|"..state.."@help_heavy"
    def.hp_state_see		= "10|"..state.."@help_heavy"
    def.psy_state			= "50|{=best_pistol}psy_armed,psy_pain@wounded_psy|20|{=best_pistol}psy_shoot,psy_pain@{=best_pistol}wounded_psy_shoot,wounded_psy"
    def.hp_victim			= "10|nil"
    def.hp_cover			= "10|false"
    def.hp_fight			= "10|false"
    def.syndata				= ""
    def.help_dialog			= "dm_help_wounded_medkit_dialog"
    def.help_start_dialog	= nil
    def.use_medkit			= true			
		
  else
    local state = wounded_by_state[math.fmod(npc:id(), 3)]
    def.hp_state			= "25|"..state.."@help_heavy"
    def.hp_state_see		= "25|"..state.."@help_heavy"
    def.psy_state			= "50|{=best_pistol}psy_armed,psy_pain@wounded_psy|20|{=best_pistol}psy_shoot,psy_pain@{=best_pistol}wounded_psy_shoot,wounded_psy"
    def.hp_victim			= "10|nil"
    def.hp_cover			= "10|false"
    def.hp_fight			= "10|false"
    def.syndata				= ""
    def.help_dialog			= "dm_help_wounded_medkit_dialog"
    def.help_start_dialog	= nil
    def.use_medkit			= true
  end	


  if tostring(section) == "nil" then
    -- Загружаем дефолты!
    st.hp_state   = xr_meet.parse_data(npc, def.hp_state)
    st.hp_state_see = xr_meet.parse_data(npc, def.hp_state_see)
    st.psy_state  = xr_meet.parse_data(npc, def.psy_state)
    st.hp_victim  = xr_meet.parse_data(npc, def.hp_victim)
    st.hp_cover   = xr_meet.parse_data(npc, def.hp_cover)
    st.hp_fight   = xr_meet.parse_data(npc, def.hp_fight)
    st.syndata    = xr_meet.parse_syn_data(npc, def.syndata)
    st.help_dialog  = def.help_dialog
    st.help_start_dialog = nil
    st.use_medkit   = def.use_medkit
  else
    st.hp_state   = xr_meet.parse_data(npc, utils.cfg_get_string(ini, section, "hp_state", npc, false, "", def.hp_state))
    st.hp_state_see = xr_meet.parse_data(npc, utils.cfg_get_string(ini, section, "hp_state_see", npc, false, "", def.hp_state_see))
    st.psy_state  = xr_meet.parse_data(npc, utils.cfg_get_string(ini, section, "psy_state", npc, false, "", def.psy_state))
    st.hp_victim  = xr_meet.parse_data(npc, utils.cfg_get_string(ini, section, "hp_victim", npc, false, "", def.hp_victim))
    st.hp_cover   = xr_meet.parse_data(npc, utils.cfg_get_string(ini, section, "hp_cover", npc, false, "", def.hp_cover))
    st.hp_fight   = xr_meet.parse_data(npc, utils.cfg_get_string(ini, section, "hp_fight", npc, false, "", def.hp_fight))
    st.syndata    = xr_meet.parse_syn_data(npc, utils.cfg_get_string(ini, section, "syndata", npc, false, "", def.syndata)) 
    st.help_dialog  = utils.cfg_get_string(ini, section, "help_dialog", npc, false, "", def.help_dialog)
    st.help_start_dialog = utils.cfg_get_string(ini, section, "help_start_dialog", npc, false, "", nil)
    st.use_medkit   = utils.cfg_get_bool(ini, section, "use_medkit", npc, false, def.use_medkit)
  end
  
  -- флажок, что функция хотя бы раз вызывалась
  st.wounded_set = true
end

function unlock_medkit(npc)
  if db.storage[npc:id()].wounded ~= nil then
    db.storage[npc:id()].wounded.wound_manager:unlock_medkit()
	if xrs_medic then xrs_medic.wounded[npc:id()] = nil end
  end
end



function is_wounded(npc)
	return ( npc:is_stalker() and npc:alive() and npc:wounded() )
end

function hit_callback(npc_id)
	if npc_id and db.storage[npc_id] then  --- предпроверка усилена с целью отладки KamikaZze 03/03/2009
		if db.storage[npc_id].wounded and db.storage[npc_id].wounded.wound_manager then
			db.storage[npc_id].wounded.wound_manager:hit_callback()
		end
	end
end


function is_heavy_wounded_by_id(npc_id)
 	if npc_id and db.storage[npc_id] and db.storage[npc_id].wounded then  --- предпроверка усилена KamikaZze 07/04/2009
			return tostring(db.storage[npc_id].wounded.wound_manager.state) ~= "nil"
	end

  return false
end
function is_psy_wounded_by_id(npc_id)
	if npc_id and db.storage[npc_id] and db.storage[npc_id].wounded then  --- предпроверка усилена с целью отладки KamikaZze 18/05/2009

    return db.storage[npc_id].wounded.wound_manager.state == "psy_pain" or
         db.storage[npc_id].wounded.wound_manager.state == "psy_armed" or
         db.storage[npc_id].wounded.wound_manager.state == "psy_shoot" or
         db.storage[npc_id].wounded.wound_manager.state == "psycho_pain" or
         db.storage[npc_id].wounded.wound_manager.state == "psycho_shoot"   
  end
  return false
end
-- Возвращает угол между проекциями векторов vec1 и vec2 на горизонтальную плоскость
-- положительный угол - доворот vec1 до vec2 по часовой.
function horz_angle(vec1,vec2)
  local x=vec2.x*vec1.x+vec2.z*vec1.z
  local y=-vec2.z*vec1.x+vec2.x*vec1.z -- повернули систему координат     
  return math.atan2(y,x) -- угол доворота от -pi до pi
end