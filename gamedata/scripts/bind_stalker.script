


function init(obj)
	xr_motivator.AddToMotivator(obj)
end

function actor_init(npc)
	npc:bind_object(actor_binder(npc))
end

----------------------------------------------------------------------------------------------------------------------
class "actor_binder" (object_binder)
----------------------------------------------------------------------------------------------------------------------
function actor_binder:__init(obj) super(obj)
	self.am = ogse_signals.get_mgr()
	self.am:call("on_load_before_all")
	self.am:call("on_init", obj)
end
function actor_binder:__finalize()
--log1("--actor_binder:__finalize() - start")
	self.am:call("on_finalize")
--log1("--actor_binder:__finalize() - end")
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:net_spawn(data)
	self:fix_ui_inventory_info()

	level.show_indicators()
	level.set_snd_volume( 1 )

	self.object:set_camera_fov( ogse.load_var("OGSR_ACTOR_FOV", get_console():get_float("fov")) )

	db.add_actor(self.object)

	if not db.storage[self.object:id()].pstor then	--KRodin: из xr_logic почему-то не срабатывает, поэтому создаём pstor здесь.
		db.storage[self.object:id()].pstor = {}
	end

	level.enable_input() --НЕ УДАЛЯТЬ!

	actor_stats.add_to_ranking(self.object:id())

	if rx_ai then rx_ai.actor_net_spawn() end

-----------------------------------------------------------
	cmd("r_SunShafts_Radius 2.0")
	cmd("r_SunShafts_Blend 0.01")
-----------------------------------------------------------
	cmd("cam_inert 0") --сбрасываем инерцию камеры в 0
	cmd("g_cop_death_anim 0") --Отключаем Death Anims, с ними куча багов.
	if get_console():get_integer("r3_dynamic_wet_surfaces_sm_res") < 1024 then
		cmd("r3_dynamic_wet_surfaces_sm_res 1024") --Чтобы полос на стенах не было во время дождя.
	end
	cmd("r2_exp_donttest_shad off") --Это экономит фпс.
	cmd("r_terrain_parallax_enable off") --не все текстуры земли у нас адаптированы под параллакс
	cmd("unbind use_medkit") --эти кнопки нам не нужны.
	cmd("unbind use_bandage")
	if isIndoor(level.name()) then --SSS18
		get_console():execute("ssfx_is_underground 1")
	else
		get_console():execute("ssfx_is_underground 0")
	end
	cmd("r2_rain_drops_control off") --Без шлема выключено, управляется из скрипта ogse_dynamic_hud
-----------------------------------------------------------
	if not ogse.var_exists("ES_GRAPHICS_SETTINGS") then
		cmd("r2_sun_lumscale 1.5") --Фикс темноты
		cmd("r2_sun_lumscale_amb 1.")
		cmd("r2_sun_lumscale_hemi 2.") --Фикс темноты
		cmd("r2_ls_bloom_threshold 0.00001") --откат со сжима
		cmd("r2_ls_bloom_kernel_scale 0.8") --Откат со сжима, но чуть прибавлено по сравнению с ЗП
--Откат тонмапа со сжима
		cmd("r2_tonemap on")
		cmd("r2_tonemap_adaptation 1.")
		cmd("r2_tonemap_amount 0.7")
		cmd("r2_tonemap_lowlum 0.0001")
		cmd("r2_tonemap_middlegray 1.")
--
		cmd("r3_dynamic_wet_surfaces_far 100.") --Если уменьшать - видна будет граница между мокрой поверхностью и сухой
		cmd("ssfx_wetsurfaces_1 1.700000, 1.400000, 0.700000, 2.000000")
		cmd("ssfx_wetsurfaces_2 1.200000, 1.500000, 0.200000, 0.700000")
		cmd("ssfx_gloss_method 1") --Только так и иначе никак!
		cmd("ssfx_gloss_minmax 0.600000, 0.800000, 0.15") --так выглядит лучше чем с максимумом 0.9 по крайней мере на вагонах + для худа глосс чуть прибавлен
		cmd("ssfx_lightsetup_1 0.95, 0.5, 1.0, 1.0") --Вот это для максимального блеска
		cmd("ssfx_florafixes_1 0.2, 0.3, 0.2, 0.3")
		cmd("ssfx_florafixes_2 4.0, 1.0, 0.0, 0.0") --Так солнце на листьях выглядит максимально сочно. Больше - уже слишком.
--Это наиболее близко к тому чтоб получить картинку как до добавления шейдеров Color Grading
		cmd("ssfx_exposure 1")
		cmd("ssfx_gamma 1")
		cmd("ssfx_saturation 1.3")
		cmd("ssfx_color_grading 0.500000, 0.515000, 0.500000")
--
		ogse.save_var("ES_GRAPHICS_SETTINGS", true)
	end
-----------------------------------------------------------

	self.am:subscribe({ signal = "on_talk_open",  fun = this.hide_weapon    })
	self.am:subscribe({ signal = "on_talk_hide",  fun = this.restore_weapon })
	self.am:subscribe({ signal = "on_trade_open", fun = this.hide_weapon    })
	self.am:subscribe({ signal = "on_trade_hide", fun = this.restore_weapon })

	self.am:call("on_spawn", data)

	return true
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:net_destroy()
--log3("~~[%s] Start destroy [%s]", script_name(), self.object and self.object:name() or "nil")

	actor_stats.remove_from_ranking(self.object:id())

	db.del_actor(self.object)

	self.object:set_callback(callback.inventory_info, nil)
	self.object:set_callback(callback.article_info, nil)
	self.object:set_callback(callback.on_item_take, nil)
	self.object:set_callback(callback.on_item_drop, nil)
	self.object:set_callback(callback.trade_sell_buy_item, nil)
	self.object:set_callback(callback.task_state, nil)
	self.object:set_callback(callback.level_border_enter, nil)
	self.object:set_callback(callback.level_border_exit, nil)
	self.object:set_callback(callback.take_item_from_box, nil)
	self.object:set_callback(callback.use_object, nil)
	self.object:set_callback(callback.on_key_press, nil)
	self.object:set_callback(callback.on_key_release, nil)
	self.object:set_callback(callback.on_key_hold, nil)
	self.object:set_callback(callback.on_mouse_wheel, nil)
	self.object:set_callback(callback.on_mouse_move, nil)
	self.object:set_callback(callback.on_belt, nil)
	self.object:set_callback(callback.on_ruck, nil)
	self.object:set_callback(callback.on_slot, nil)
	self.object:set_callback(callback.hit, nil)
	self.object:set_callback(callback.on_goodwill_change, nil)
	self.object:set_callback(callback.death, nil)
	self.object:set_callback(callback.entity_alive_before_hit, nil)
	self.object:set_callback(callback.on_before_use_item, nil)
	self.object:set_callback(callback.level_changer_action, nil)
	self.object:set_callback(callback.update_artefacts_on_belt, nil)
	self.object:set_callback(callback.on_cell_item_focus, nil )
	self.object:set_callback(callback.on_cell_item_focus_lost, nil )
	self.object:set_callback(callback.on_cell_item_mouse, nil )
	self.object:set_callback(callback.on_footstep, nil)
	self.object:set_callback(callback.on_actor_land, nil)
	self.object:set_callback(callback.on_actor_jump, nil)

	if ui_grenade_marks then
		ui_grenade_marks.remove_grenade_marks()
	end

	self.am:call("on_destroy")
--log3("--[%s] End destroy [%s]", script_name(), self.object and self.object:name() or "nil")
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:reinit()
--log3("~~[%s] Start reinit [%s]", script_name(), self.object and self.object:name() or "nil")
	local npc_id = self.object:id()
	db.storage[npc_id] = {}
	self.st = db.storage[npc_id]
	self.st.pstor = nil

	self.object:set_callback(callback.inventory_info, self.info_callback, self)
	self.object:set_callback(callback.article_info, self.article_callback, self)
	self.object:set_callback(callback.on_item_take, self.on_item_take, self)
	self.object:set_callback(callback.on_item_drop, self.on_item_drop, self)
	self.object:set_callback(callback.trade_sell_buy_item, self.on_trade, self)
	self.object:set_callback(callback.task_state, self.task_callback, self)
	self.object:set_callback(callback.level_border_enter, self.level_border_enter, self)
	self.object:set_callback(callback.level_border_exit, self.level_border_exit, self)
	self.object:set_callback(callback.take_item_from_box, self.take_item_from_box, self)
	self.object:set_callback(callback.use_object, self.use_inventory_item, self)
	self.object:set_callback(callback.hit, self.actor_hit_callback, self)
	self.object:set_callback(callback.death, self.actor_death_callback, self)
	self.object:set_callback(callback.on_key_press, self.on_key, self)			-- нажатие клавиши
	self.object:set_callback(callback.on_key_release, self.on_key_free, self)		-- отпускание клавиши
	self.object:set_callback(callback.on_key_hold, self.on_key_hold, self)		-- удержание клавиши
	self.object:set_callback(callback.on_mouse_wheel, self.on_wheel_rotation, self)	-- вращение колесика мыши
	self.object:set_callback(callback.on_mouse_move, self.on_mouse_move, self)		-- движение мыши
	self.object:set_callback(callback.on_belt, self.item_to_belt, self)		-- перемещение предмета на пояс
	self.object:set_callback(callback.on_ruck, self.item_to_backpack, self)	-- перемещение предмета в рюкзак
	self.object:set_callback(callback.on_slot, self.item_to_slot, self)		-- перемещение предмета в слот
	self.object:set_callback(callback.on_goodwill_change, self.on_goodwill_change, self) -- изменение отношений
	self.object:set_callback(callback.entity_alive_before_hit, self.before_hit_callback, self)
	self.object:set_callback(callback.on_before_use_item, self.before_use, self)
	self.object:set_callback(callback.level_changer_action, self.level_changer_action, self)
	self.object:set_callback(callback.update_artefacts_on_belt, self.update_artefacts_on_belt, self)
	self.object:set_callback(callback.on_cell_item_focus, self.on_cell_item_focus, self)
	self.object:set_callback(callback.on_cell_item_focus_lost, self.on_cell_item_focus_lost, self)
	self.object:set_callback(callback.on_cell_item_mouse, self.on_cell_item_mouse, self)
	self.object:set_callback(callback.on_footstep, self.on_footstep, self)
	self.object:set_callback(callback.on_actor_land, self.on_actor_land, self)
	self.object:set_callback(callback.on_actor_jump, self.on_actor_jump, self)

	self.am:call("on_reinit")
--log3("--[%s] End reinit [%s]", script_name(), self.object and self.object:name() or "nil")
end

function actor_binder:on_goodwill_change(from, to)
	self.am:call("on_goodwill_change", from, to)
end

function actor_binder:actor_death_callback(victim, who)
	level.set_snd_volume( 1 )

	self.am:call("on_actor_death", victim, who)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:take_item_from_box(box, item)
	if not box or not item then return end
	local sobj = alife():object(item:id())
	if not sobj then return end

	self.am:call("on_take_from_box", box, item, sobj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:level_border_enter(npc, info_id)
	self.am:call("on_level_border_enter", npc, info_id)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:level_border_exit(npc, info_id)
	self.am:call("on_level_border_exit", npc, info_id)
end
----------------------------------------------------------------------------------------------------------------------
local info2call = {
	ui_pda                   = "on_pda_open",
	ui_pda_hide              = "on_pda_hide",
	ui_pda_contacts          = "on_pda_contacts_open",
	ui_pda_contacts_hide     = "on_pda_contacts_hide",
	ui_pda_map_local         = "on_pda_map_local",
	ui_pda_map_global        = "on_pda_map_global",
	ui_pda_news              = "on_pda_news_open",
	ui_pda_news_hide         = "on_pda_news_hide",
	ui_pda_jobs_failed       = "on_pda_jobs_failed",
	ui_pda_jobs_accomplished = "on_pda_jobs_accomplished",
	ui_pda_jobs_current      = "on_pda_jobs_current",
	ui_pda_jobs              = "on_pda_jobs_open",
	ui_pda_jobs_hide         = "on_pda_jobs_hide",
	ui_pda_diary             = "on_pda_diary_open",
	ui_pda_diary_hide        = "on_pda_diary_hide",
	ui_pda_encyclopedia      = "on_pda_encyclopedia_open",
	ui_pda_encyclopedia_hide = "on_pda_encyclopedia_hide",
	ui_pda_actor_info        = "on_pda_actor_info",
	ui_pda_ranking           = "on_pda_ranking",
	ui_pda_events            = "on_pda_events",
	ui_inventory             = "on_inventory_open",
	ui_inventory_hide        = "on_inventory_hide",
	ui_talk                  = "on_talk_open",
	ui_talk_hide             = "on_talk_hide",
	ui_trade                 = "on_trade_open",
	ui_trade_hide            = "on_trade_hide",
	ui_car_body              = "on_body_open",
	ui_car_body_hide         = "on_body_hide",
}
function actor_binder:info_callback(npc, info_id)
	level_tasks.proceed() --Сюжет

	level_tasks.process_info_portion(info_id) --Отметки на карте

	self.am:call("on_info", npc, info_id)

	local sc = info2call[info_id]
	if sc then
		self.am:call(sc, npc)
	end
end

function actor_binder:fix_ui_inventory_info()
  for info, _ in pairs( info2call ) do
    if self.object:has_info( info ) then
      log3( "~~[%s]: disable [%s]", script_name(), info )
      self.object:disable_info_portion( info )
    end
  end
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_trade(item, sell_bye, money)
	self.am:call("on_trade", item, sell_bye, money)
end
----------------------------------------------------------------------------------------------------------------------
local table_group = {
	["Diary"]="%c[255,0,38,255]"..game.translate_string("bind_stalker_table_group_1_text"),
	["Mutants"]="%c[255,0,38,255]"..game.translate_string("bind_stalker_table_group_2_text"),
	["Social"]="%c[255,0,38,255]"..game.translate_string("bind_stalker_table_group_3_text"),
	["Artifacts"]="%c[255,0,38,255]"..game.translate_string("bind_stalker_table_group_4_text"),
	["Klondike_Artifacts"]="%c[255,0,38,255]"..game.translate_string("bind_stalker_table_group_4_text"),
	["Anomalies"]="%c[255,0,38,255]"..game.translate_string("bind_stalker_table_group_5_text"),
	["Locations"]="%c[255,0,38,255]"..game.translate_string("bind_stalker_table_group_6_text"),
	["Zone-story"]="%c[255,0,38,255]"..game.translate_string("bind_stalker_table_group_7_text"),
	["Stories"]="%c[255,0,38,255]"..game.translate_string("bind_stalker_table_group_8_text"),
	["memuars"]="%c[255,0,38,255]"..game.translate_string("bind_stalker_table_group_9_text"), 
	["Found_PDA"]="%c[255,0,38,255]"..game.translate_string("bind_stalker_table_group_10_text"), 
	["st_operation_agroprom"]="%c[255,0,38,255]"..game.translate_string("bind_stalker_table_group_1_text"),
	["LabX18_information"]="%c[255,0,38,255]"..game.translate_string("bind_stalker_table_group_1_text"), 
	["aes_military_task"]="%c[255,0,38,255]"..game.translate_string("bind_stalker_table_group_1_text"),
	["Vehicles"]="%c[255,0,38,255]"..game.translate_string("bind_stalker_table_group_1_text"),
	["Hunter_tips"]="%c[255,0,38,255]"..game.translate_string("bind_stalker_table_group_1_text"),
}

function actor_binder:article_callback(npc, group, name, article_type)
	if device().precache_frame >1 then return end

	if table_group[group] then
		news_manager.send_encyclopedy(group == "Diary" and "diary" or "encyclopedy", group)
		ogse.send_tip(game.translate_string(name), table_group[group], nil, 7)
	end

	self.am:call("on_article", npc, group, name, article_type)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_item_take(obj)
	if not obj then return end
	local sobj = alife():object(obj:id())
	if not sobj then
		if obj:section() ~= "bolt" then
			self.object:drop_item(obj)
		end
		return
	end

	if obj:is_artefact() and not has_alife_info("tutorial_artefact_gain") then
		game.start_tutorial("part_19_activation")
		self.object:give_info_portion("tutorial_artefact_gain")
	end

    level_tasks.proceed()

	if rx_ai then rx_ai.actor_item_take(obj) end

	self.am:call("on_take", obj, sobj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_item_drop(obj)
	if not obj then return end
	local sobj = alife():object(obj:id())
	if not sobj then return end

    level_tasks.proceed()

	self.am:call("on_drop", obj, sobj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:before_use(item)
	if not item then return end
	local sobj = alife():object(item:id())
	if not sobj then return end

	self.am:call("on_actor_before_use", item, sobj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:use_inventory_item(obj)
	if not obj then return end
	local sobj = alife():object(obj:id())
	if not sobj then return end

	self.am:call("on_use", obj, sobj)
end
----------------------------------------------------------------------------------------------------------------------

function actor_binder:before_hit_callback(hit_data)
  local obj = level.object_by_id( hit_data.who_id )
  if obj then -- если есть виновник хита
    if -- проверЯем условиЯ игнорированиЯ урона от дружественного огнЯ
      obj:id() ~= self.object:id()
      and obj:is_stalker()
      and not obj:is_relation_enemy( self.object )
    then
      local enemy = obj:best_enemy()
      if ( not enemy ) or enemy:id() ~= self.object:id() then
        -- подстрелил друг, игнорируем
        hit_data.ignore_hit = true
        log3( "~~[%s]: ignore ff from [%s]", script_name(), obj:name() )
      end
    elseif ogse_car_control.current_car and ogse_car_control.current_car:id() == hit_data.who_id then
      --Љостыль от ситуации, когда бтр в редких случаЯх стрелЯет под каким-то углом, убивает актора, сидЯщего внутри.
      --‘мотрел демо_рекордом, вроде позициЯ актора нормальнаЯ, хз как там еЮ можно ещЮ поправить.
      --Ќачну ведь менЯть позицию - ещЮ какаЯ-нибудь хернЯ вылезет.
      hit_data.ignore_hit = true
      log3( "~~[%s]: ignore ff from [%s]", script_name(), obj:name() )
    end
  end
  if not hit_data.ignore_hit then
    if not self.last_hit_data then
      self.last_hit_data = {}
    end
    dsh.copy_hit_data( hit_data, self.last_hit_data )
    --
    self.am:call("on_actor_before_hit", self.object, hit_data, self)
  end
end


function actor_binder:actor_hit_callback(obj, amount, local_direction, who, bone_index)
--log3("--[%s] Called hit_callback for [%s]. Who: [%s], amount: [%s]", script_name(), self.object:name(), who:name(), amount)
	ogse_critical_hit.check_critical(amount, bone_index, who)

	self.am:call("on_hit", obj, amount, local_direction, who, bone_index)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:task_callback(_task, _objective, _state)
	self.am:call("on_task", _task, _objective, _state)
end
----------------------------------------------------------------------------------------------------------------------
local update_was_never_called = true
function actor_binder:update(delta)
	if update_was_never_called then
-------------------------------------------------------------------
		if not has_alife_info("storyline_actor_start") then
			self.object:give_info_portion("global_dialogs") --KRodin: не совсем понял для чего это нужно, но пусть будет.

			self.am:call("on_storyline_start")
			self.object:give_info_portion("storyline_actor_start")
		end
-------------------------------------------------------------------
		self.am:call("on_first_update")
		update_was_never_called = false
	end

	if rx_ai then rx_ai.actor_update() end

	self.am:call("on_update", delta)	
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_footstep(obj, power)
	self.am:call("on_footstep", obj, power)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_actor_land(obj)
    self.am:call("actor_on_land", obj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_actor_jump(obj, power)
    self.am:call("actor_on_jump", obj, power)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_key(key, bind)
	self.am:call("on_key_down", key, bind)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_key_free(key, bind)
	self.am:call("on_key_up", key, bind)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_key_hold(key, bind)
	self.am:call("on_key_hold", key, bind)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_wheel_rotation(vol)
	self.am:call("on_wheel", vol)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_mouse_move(velx, vely)
	self.am:call("on_mouse_move", velx, vely)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:item_to_belt(obj)
	if not obj then return end
	local sobj = alife():object(obj:id())
	if not sobj then return end

	self.am:call("on_item_to_belt", obj, sobj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:item_to_backpack(obj)
	if not obj then return end
	local sobj = alife():object(obj:id())
	if not sobj then return end

	self.am:call("on_item_to_ruck", obj, sobj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:item_to_slot(obj)
	if not obj then return end
	local sobj = alife():object(obj:id())
	if not sobj then return end

	self.am:call("on_item_to_slot", obj, sobj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:save(packet)
	ogse.save_var("game_difficulty", level.get_game_difficulty(), "u8") --Сохраняем уровень сложности

	xr_logic.pstor_save_all(self.object, packet)

	if rx_ai then rx_ai.actor_save(packet) end

	self.am:call("on_save", packet)
	self.am:call("on_save_after_all")
end 
----------------------------------------------------------------------------------------------------------------------
local game_difficulty_by_num = {"gd_novice", "gd_stalker", "gd_veteran", "gd_master"}
function actor_binder:load(reader)
--log3("~~[%s] Start load [%s]", script_name(), self.object and self.object:name() or "nil")

	local game_difficulty = ogse.load_var("game_difficulty", 3) --Загружаем уровень сложности
	cmd("g_game_difficulty", game_difficulty_by_num[game_difficulty + 1]) --и устанавливаем его.

	xr_logic.pstor_load_all(self.object, reader)

	self.am:call("on_load", reader)

--log3("--[%s] End load [%s]", script_name(), self.object and self.object:name() or "nil")
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:level_changer_action( obj, wnd )
  local sobj = obj:get_alife_object()
  local lc   = sobj:get_level_changer()
  local dest_vertex = lc.dest_game_vertex_id
  local dest_lname  = alife():level_name(
    game_graph():vertex( dest_vertex ):level_id()
  )
  local msg_text_wnd = wnd:FindChild( "message_box_change_level:message_text" )
  msg_text_wnd:GetCUIStatic():SetText(
    game.translate_string( dest_lname ) .. ": "
    .. game.translate_string( "level_changer_invitation" )
  )
  self.am:call( "level_changer_action", obj, wnd )
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:update_artefacts_on_belt( dt )
  self.am:call( "update_artefacts_on_belt", dt )
end

function actor_binder:on_cell_item_focus( obj )
  self.am:call( "on_cell_item_focus", obj )
end


function actor_binder:on_cell_item_focus_lost( obj )
  self.am:call( "on_cell_item_focus_lost", obj )
end


function actor_binder:on_cell_item_mouse( obj, x, y, action )
  self.am:call( "on_cell_item_mouse", obj, x, y, action )
end

----------------------------------------------------------------------------------------------------------------------

-- Weapon functions
local restore_wpn_t, weapon_hide

function hide_weapon()
  weapon_hide = true
  if restore_wpn_t then return end
  db.actor:hide_weapon()
  restore_wpn_t = dsh.wait_condition(
    function()
      return not ( weapon_hide or db.actor:is_talking() )
    end,
    function()
      db.actor:restore_weapon()
      weapon_hide   = false
      restore_wpn_t = nil
    end,
    function()
      ogse_signals.get_mgr():reschedule( 200 )
    end
  )
end

function restore_weapon()
   weapon_hide = false
end