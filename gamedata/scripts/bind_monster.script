-- -*- mode: lua; coding: windows-1251-dos -*-

--------------------
--Monster binding
--------------------
function bind(obj)
	local new_binder = generic_object_binder(obj)
	obj:bind_object(new_binder)
end

------------------------------------------------------------------------------------
class "generic_object_binder" (object_binder)

function generic_object_binder:__init(obj) super(obj)
	self.loaded = false

	self.am = ogse_signals.get_mgr()
	self.am:call( "on_monster_init", obj, self )
end 
function generic_object_binder:__finalize()
	--log1("--generic_object_binder:__finalize() called!")
end

function generic_object_binder:reload(section)
	object_binder.reload(self, section)
end

function generic_object_binder:reinit()
--log3("~~[%s] Start reinit [%s]", script_name(), self.object and self.object:name() or "nil")
	object_binder.reinit(self)

	-- У торговца нет поддержки перемещения
	if self.object:clsid() ~= clsid.script_trader then
		self.object:set_patrol_extrapolate_callback(self.extrapolate_callback, self)
	end

	db.storage[self.object:id()] = {}
	self.st = db.storage[self.object:id()]
--log3("--[%s] End reinit [%s]", script_name(), self.object and self.object:name() or "nil")
end

function generic_object_binder:net_spawn(sobject)
--log3("~~[%s] Start net_spawn [%s]", script_name(), self.object and self.object:name() or "nil")

	if not object_binder.net_spawn(self, sobject) then return false end

	db.add_obj(self.object)
	--
	self:subscribe_updaters()
	--
	--self.object:set_callback(callback.use_object, self.use_callback, self)
	--
	if not self.object:alive() then
		--' Наносим небольшой импульс вперед.
		local h = hit()
		h.draftsman = self.object
		h.type = hit.fire_wound
		h.direction = db.actor:position():sub(self.object:position())
		h:bone( get_string( self.object:section(), "bone_torso", "bip01_spine" ) )
		h.power = 0.01
		h.impulse = 1
		self.object:hit(h)	

		local s_obj = alife():object(self.object:id())
		if s_obj.offline_dead == 0 then
			--log3("--[%s] Added trup to delete: [%s]", script_name(), s_obj:name())
			s_obj.offline_dead = game.time()+(1*24*60*60*1000)
		elseif s_obj.offline_dead == 1 then
			s_obj.offline_dead = game.time()+(1*24*60*60*1000)
		elseif s_obj.offline_dead > 1 and s_obj.offline_dead <= game.time() then
			if self.object:position():distance_to( db.actor:position() ) > alife():switch_distance() / 2 then --Удаляем только вдалеке от актора
				log3("--[%s] Released trup: [%s]", script_name(), s_obj:name())
				alife():release(s_obj, true)
			end
		end
		return true
	end
	--
	self.object:set_callback(callback.patrol_path_in_point, self.waypoint_callback, self)
	self.object:set_callback(callback.hit, self.hit_callback, self)
	self.object:set_callback(callback.death, self.death_callback, self)
	self.object:set_callback(callback.entity_alive_before_hit, self.before_hit_callback, self)
	self.object:set_enemy_callback( self.enemy_callback, self )
	--
	xr_gulag.setup_gulag_and_logic_on_spawn( self.object, self.st, sobject, modules.stype_mobile, self.loaded )
	--
	self.am:call( "on_monster_spawn", self.object, self )
	return true
end


function generic_object_binder:subscribe_updaters()
  local s_name = "on_monster_update." .. self.object:id()
  if self.object:alive() then
    self.updaters = {
      {
        [ "signal" ] = s_name,
        [ "self"   ] = self,
        [ "fun"    ] = self.update_tip_text,
        [ "queued" ] = true,
      },
    }
  else
    self.updaters = {}
  end
  for _, s in ipairs( self.updaters ) do
    self.am:subscribe( s )
  end
end

function generic_object_binder:unsubscribe_updaters()
  if not self.updaters then return end

  for k, s in pairs( self.updaters ) do
    self.am:unsubscribe( s )
	self.updaters[k] = nil
  end
  self.updaters = nil
end


function generic_object_binder:update(delta)	
	if string.find(self.object:name(), "crow_") then return false end

	object_binder.update(self, delta)

	if self.st.active_section ~= nil then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "update", delta)
	end

	self.am:call( "on_monster_update." .. self.object:id(), self.object, delta )
end

function generic_object_binder:update_tip_text()
	if self.object:is_talk_enabled() then
		self.object:set_tip_text("character_use")
	else
		self.object:set_tip_text("")
	end
end

--function generic_object_binder:use_callback(obj, who)
--	self.am:call("on_monster_use", self.object, who)
--end

function generic_object_binder:extrapolate_callback()
    if not self.object:get_script() then return false end
	--
	local cur_pt = self.object:get_current_point_index() 
	local patr = self.object:patrol()
	if patr == "" then
		--Такая ситуация - это норма, просто ванильный движок не вылетал при вызове patrol(""), а новый вылетает, проверено.
		log3("!![%s] Invalid patrol path name [%s] for object [%s]", script_name(), patr, self.object:name())
	elseif patrol(patr):flags(cur_pt):get() == 0 then
		return true
	end
	return false
end

function generic_object_binder:waypoint_callback(obj, action_type, index)
	if self.st.active_section ~= nil then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "waypoint_callback", self.object, action_type, index)
	end
end

function generic_object_binder:death_callback(victim, who)
	self:unsubscribe_updaters()

	self.object:set_tip_text_default()

	self:clear_callbacks()

	--log3("!!![%s][%s] killed from [%s]!!!", script_name(), self.object:name(), who:name())

	if self.object:name() == "secret_villager" then
		db.actor:give_info_portion("secret_villager_dead")
	end

	--if db.actor then -- добавлено KamikaZze  с целью отладки 25/02/2009
	--	if who:is_actor() then
	-- добавление опыта за убийство
			xr_statistic.addKillCount(who, self.object)
	--	end
	--end

	if self.st and self.st.mob_death then
		xr_logic.issue_event(self.object, self.st.mob_death, "death_callback", self.object, who)
	end

	if self.st and self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "death_callback", self.object, who)
	end

	smart_terrain.on_death( self.object:id() )

	self.am:call( "on_monster_death", self.object, who )
end

function generic_object_binder:before_hit_callback(hit_data)
--log3("--[%s] Called before_hit_callback for [%s]: %s", script_name(), self.object:name(), hit_data)
--log3("--Hit_data: who: [%s], who_id: [%s], dir.x: [%s], hit_type: [%s], weapon_id: [%s]", hit_data.who and hit_data.who:name() or "NIL", hit_data.who_id, hit_data.dir.x, hit_data.hit_type, hit_data.weapon_id)
	if hit_data.who then -- если есть виновник хита
		if
			hit_data.who_id == bind_statpkm.pkm_captured -- если это турель
			or ( ogse_car_control.current_car and ogse_car_control.current_car:id() == hit_data.who_id ) -- если это БТР, в котором сидит актор
		then -- то надо заменить на реального виновника, т.е. ГГ
			hit_data.who = db.actor
			hit_data.who_id = db.actor:id()
		end
	end
	--
	if not self.last_hit_data then
		self.last_hit_data = {}
	end
	dsh.copy_hit_data( hit_data, self.last_hit_data )
	--
	self.am:call( "on_monster_before_hit", self.object, hit_data, self )
end

function generic_object_binder:hit_callback(obj, amount, local_direction, who, bone_index)
--log3("--[%s] Called hit_callback for [%s]. Who: [%s], amount: [%s]", script_name(), self.object:name(), who:name(), amount)
	if amount == 0 or bone_index == 0 then return end --Не учитываем выстрелы в воздух. Причину описал в мотиваторе.
	--
	if self.st.hit then
		xr_logic.issue_event(self.object, self.st.hit, "hit_callback", self.object, amount, local_direction, who, bone_index)
	end

	self.am:call( "on_monster_hit", self.object, amount, local_direction, who, bone_index, self )
end

function generic_object_binder:net_destroy()
--log3("~~[%s] Start destroy [%s]", script_name(), self.object and self.object:name() or "nil")
	self:clear_callbacks()
	--self.object:set_callback(callback.use_object, nil)

	local st = db.storage[self.object:id()]
	if st and st.active_scheme then
		xr_logic.issue_event(self.object, st[st.active_scheme], "net_destroy")
	end

	db.del_obj(self.object)
	db.storage[self.object:id()] = nil

	self.am:call( "on_monster_net_destroy", self.object, self )
	self:unsubscribe_updaters()
	self.am:cleanup_signal_subs( "on_monster_update." .. self.object:id() )

	object_binder.net_destroy(self)

	local id   = self.object:id()
	local sobj = alife():object( id )
	if sobj then
		alife():remove_in_restrictions( sobj )
	end

--log3("--[%s] End destroy [%s]", script_name(), self.object and self.object:name() or "nil")
end 

function generic_object_binder:clear_callbacks()
	self.object:set_callback(callback.death, nil)
	self.object:set_callback(callback.patrol_path_in_point, nil)
	self.object:set_callback(callback.hit, nil)
	self.object:set_callback(callback.entity_alive_before_hit, nil)
	self.object:set_enemy_callback()
end

function generic_object_binder:reload(section)
	object_binder.reload(self, section)
end

function generic_object_binder:net_save_relevant()
	return true
end

function generic_object_binder:save(packet)
	if string.find(self.object:name(), "crow_") then return false end

	if self.object:clsid() ~= clsid.script_trader then
		xr_logic.pstor_store(self.object, "is_invulnerable", self.object:invulnerable())
	end

	object_binder.save(self, packet)

	xr_logic.save_obj(self.object, packet)
end

function generic_object_binder:load(reader)
--log3("~~[%s] Start load [%s]", script_name(), self.object and self.object:name() or "nil")

	if string.find(self.object:name(), "crow_") then return false end

	self.loaded = true

	object_binder.load(self, reader)

	if reader:r_eof() then
		abort("SAVE FILE IS CORRUPT")
	end

	xr_logic.load_obj(self.object, reader)

	if self.object:clsid() ~= clsid.script_trader then
		local is_invulnerable = xr_logic.pstor_retrieve(self.object, "is_invulnerable", false)
		self.object:invulnerable(is_invulnerable)
	end

--log3("--[%s] End load [%s]", script_name(), self.object and self.object:name() or "nil")
end

--Функция проверяет, может ли объект вступать в бой с предполагаемым противником (enemy_st).
--Если вернёт false - объект не будет вступать в бой.
--Вызывается:
--Одноименным калбеком из движка (для движковой боёвки)
--Из xrs_battle_ai.check_is_enemy (скриптовая боёвка)
--Из xr_danger
--Из xr_camper.action_patrol:process_danger()
--Из функции check_sound в мотиваторе
local enemy_callback_freq = 1000
function generic_object_binder:enemy_callback( obj, enemy_st )
  local valid, enemy = validate_enemy_object( enemy_st )
  if not valid then return false end

  return true
--[=[ --Отключено, т.к. пока не используется.
  local res, ttl, t
  local cached = self[ "bind_monster.cached" ]
  if cached then
    t = cached[ enemy:id() ]
	if t then
      res, ttl = unpack( t )
    end
  end
  if res == nil or ttl < time_global() then
    --log3("~~[%s] Called add_cache_rec for [%s], [%s]", script_name(), self.object:name(), enemy:name())
    local result = {}
    self.am:call( "on_monster_enemy_callback", self.object, enemy, result )
    res = result[1] ~= false
    if cached then
	--
      if t then
        t[ 1 ] = res
        t[ 2 ] = time_global() + enemy_callback_freq
      else
        cached[ enemy:id() ] = { res, time_global() + enemy_callback_freq }
      end
    else
      self[ script_name() .. ".cached" ] = {
        [ enemy:id() ] = { res, time_global() + enemy_callback_freq }
      }
    end
  end
  return res
--]=]
end
