-- -*- mode: lua; coding: windows-1251-dos -*-

function attach( sm )
  sm:subscribe({ signal = "on_destroy",   fun = this.on_destroy   })
  sm:subscribe({ signal = "on_npc_death", fun = this.on_death     })
  sm:subscribe({ signal = "on_npc_spawn", fun = this.on_npc_spawn })
end


function on_npc_spawn( obj, binder )
  if not obj:alive() then return end
  local s = {
    [ "signal" ] = "on_npc_update." .. obj:id(),
    [ "fun"    ] = this.on_update,
    [ "queued" ] = true,
  }
  binder[ script_name() .. ".subscribed" ] = s
  ogse_signals.get_mgr():subscribe( s )
end


function on_update( obj )
  ogse_signals.get_mgr():reschedule( math.random( 1000, 3000 ) )
  check_light( obj )
end


function on_death( obj )
  local binder     = obj:binded_object()
  local subscribed = binder[ script_name() .. ".subscribed" ]
  if subscribed then
    ogse_signals.get_mgr():unsubscribe( subscribed )
    binder[ script_name() .. ".subscribed" ] = nil
  end
  check_light( obj )
end


function on_destroy()
  clean_up()
end


local light_zones = {}

class "action_light"
function action_light:__init (obj, storage)
	self.object = obj
	self.st = storage
	self.active = false
	self.id = obj:id()
end
function action_light:reset_scheme()
    light_zones[self.id] = self
end
function action_light:update(delta)
	local actor = db.actor

	if xr_logic.try_switch_to_another_section(self.object, self.st, actor) then
	   self.active = false     
	   self.stalkers = {}
	   light_zones[self.id] = nil
	   return
	end	
	self.active = true
end
function action_light:check_stalker(stalker)
    if self.active == false then 
       return false, false
    end
    
	if stalker and self.object:inside(stalker:position()) then
		return self.st.light, true
	end

	return false, false
end

---------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, ini, scheme, section, storage)
	local new_action = action_light (npc, storage)
	xr_logic.subscribe_action_for_events(npc, storage, new_action)
end

function set_scheme(npc, ini, scheme, section, gulag_name)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	st.logic = xr_logic.cfg_get_switch_conditions(ini, section, npc)
	st.light = utils.cfg_get_bool (ini, section, "light_on", npc, false, false)
end

---------------------------------------------------------------------------------------------------------------------
function check_light(stalker)
    local torch = stalker:object("device_torch")
    if not torch then
       return
    end

	local light = false
	local forced = false

	if stalker:alive() == false then
		if torch then
			torch:enable_attachable_item(false)	
		end
		return
	end

	if xr_companion.is_companion(stalker:id()) then
		local actor_torch = db.actor:item_in_slot(9)
		if
			xr_combat_companion.in_ambush(stalker)
			or not (actor_torch and actor_torch:is_torch() and get_torch_obj(actor_torch).on)
		then
			if torch then
				torch:enable_attachable_item(false)	
			end
			return
		end
	end

    --' Проверка по лайтзонам
    if not forced then
	    for k,v in pairs(light_zones) do
			light, forced = v:check_stalker(stalker)
			if forced == true then
				break
			end
	    end
    end

	local weather = ogse_weather_mgr.monitoring_weather_sect
	if not forced then
		--' Проверка по времени суток (ночью всегда включено)
		local htime = level.get_time_hours()
		if htime then
			if (htime <= 5 or htime >= 20) or (weather and string.find(weather, "storm")) then
				light = true
			else
				light = false
			end
		end
	
		--' Проверка на индор-аутдор (внутри всегда включено)
		if light == false then
			if isIndoor(level.name()) then
				light = true
			end
		end
	end			

	--' Проверка по активному действию
	if not forced and light == true then
		--' Фонарики должны быть выключены у костра или если непись спит.
		local scheme = db.storage[stalker:id()].active_scheme
		if scheme and (scheme == "kamp" or scheme == "camper" or scheme == "sleeper") then
			light = false
			forced = true
		end
	end

	if not forced and light == true then
		--' Фонарики должны быть выключены в бою. Но если в бою идет поиск врага - то включены.
		if stalker:alive() and stalker:best_enemy() then
			light = false
		end				
	end	

	if light ~= nil and torch then
		torch:enable_attachable_item(light)
	end
end

function clean_up ()
   light_zones = {} 
end