

-----------------------------------------------------------------------
--- ogse_repair.script
--- Ремонт торговцами/механиками вещей
--- KamikaZze, OGS Evolution Team 2010, на основе ремкита Dusty79
--- version 1.0
-----------------------------------------------------------------------
--- Настройки ремонта
-----------------------------------------------------------------------
local profit_margin = 1.5		-- прибыль с ремонта, считается от себестоимости вещи
local price_multiplier = 1		-- множитель, на который умножается общая цена ремонта (для удобной регулировки цены)
local min_condition = 0.2		-- минимальное состояния для приема в ремонт
local max_condition = 0.99		-- максимальное состояния для приема в ремонт
local partial_repair = 0.3		-- размер прибавки состояния при частичном ремонте
-----------------------------------------------------------------------

local repaired_item = 0
local item_table
local item_table_index = 0

function open_repair_dialog()
	local spwn = repair_dialog(get_hud())
	level.start_stop_menu(spwn,true)	
end

function shorten_name(str)
	if str then
		local out_str = string.gsub(str, game.translate_string("ogse_repair_short_1_text"), game.translate_string("ogse_repair_short_2_text"))
		out_str = string.gsub(out_str, game.translate_string("ogse_repair_short_3_text"), game.translate_string("ogse_repair_short_4_text"))
		out_str = string.gsub(out_str, game.translate_string("ogse_repair_short_5_text"), game.translate_string("ogse_repair_short_6_text"))
		out_str = string.gsub(out_str, game.translate_string("ogse_repair_short_7_text"), game.translate_string("ogse_repair_short_8_text"))
		out_str = string.gsub(out_str, game.translate_string("ogse_repair_short_9_text"), game.translate_string("ogse_repair_short_10_text"))
		out_str = string.gsub(out_str, game.translate_string("ogse_repair_short_11_text"), game.translate_string("ogse_repair_short_12_text"))
		out_str = string.gsub(out_str, game.translate_string("ogse_repair_short_13_text"), game.translate_string("ogse_repair_short_14_text"))
		out_str = string.gsub(out_str, game.translate_string("ogse_repair_short_15_text"), game.translate_string("ogse_repair_short_16_text"))
		return out_str
	end
end

function play_repair_sound()
	local remkit_sounds = {
		[1] = [[scripts\remkit\ui_repairweapon_01]],
		[2] = [[scripts\remkit\ui_repairweapon_02]],
		[3] = [[scripts\remkit\ui_repairweapon_03]],
		[4] = [[scripts\remkit\ui_repairweapon_04]],
		[5] = [[scripts\remkit\ui_repairweapon_05]],
		[6] = [[scripts\remkit\ui_repairweapon_06]],
		[7] = [[scripts\remkit\ui_repairweapon_07]],
	}
	local rnd = math.random(1, 7)
	soundtrack.s_play_no_feedback(remkit_sounds[rnd])
end


class "select_repair_items" (CUIListItemEx)

function select_repair_items:__init() super() --Начинаем инициализацию поля списка предметов
	self.item_name		= "itemname"
	self:SetWndRect		(0,0,320,22)

	local ca = 255
	local cr = 216
	local cg = 186
	local cb = 140

	self.itmnum				= CUIStatic	()
	self.itmnum:SetAutoDelete	(true)
	self:AttachChild		(self.itmnum)
	self.itmnum:SetWndRect	(0,0,10,22)
	self.itmnum:SetText		("itemnum")
	self.itmnum:SetFont		(GetFontLetterica16Russian())
	self.itmnum:SetTextColor	(ca,cr,cg,cb)

	self.itmn					= CUIStatic	()
	self.itmn:SetAutoDelete	(true)
	self:AttachChild		(self.itmn)
	self.itmn:SetWndRect		(12,0,150,22)
	self.itmn:SetText			("itemname")
	self.itmn:SetFont			(GetFontLetterica18Russian())
	self.itmn:SetTextColor	(ca,cr,cg,cb)

	self.itmage				= CUIStatic	()
	self.itmage:SetAutoDelete	(true)
	self:AttachChild		(self.itmage)
	self.itmage:SetWndRect	(250,0,40,22)
	self.itmage:SetText		("itemage")
	self.itmage:SetFont		(GetFontLetterica16Russian())
	self.itmage:SetTextColor	(ca,cr,cg,cb)
end


class "repair_dialog" (CUIScriptWnd)

function repair_dialog:__init() super()
	self:InitControls()
	self:InitCallBacks()
	self:FillList()
end

function repair_dialog:__finalize() end

function repair_dialog:InitControls() --Инициализируем управление формой
	self:Init(50,50,550,450) --здесь определяем координаты левого верхнего угла и ширину-высоту

	local xml = CScriptXmlInit()
	xml:ParseFile("ui_repair.xml") --файл-описатель наших элементов
	xml:InitStatic("back_video", self) --видео на заднем плане
	xml:InitStatic("background", self) --рамка
	xml:InitStatic("item_frame2", self) --рамка предмета
	xml:InitStatic("bar_frame2", self) --колба предмета
	xml:InitFrame("list_frame", self) --список предметов

	local ctrl
	ctrl = xml:InitList("list", self)
	ctrl:ShowSelectedItem(true)
	self:Register(ctrl, "list_window")

-----------------------------------кнопки---------------------------------
	self:Register(xml:Init3tButton("window_name", self),"window_name")
	self:Register(xml:Init3tButton("caption1", self),"caption1")
	self:Register(xml:Init3tButton("caption2", self),"caption2")
	self:Register(xml:Init3tButton("caption4", self),"caption4")
	self:Register(xml:Init3tButton("caption5", self),"caption4")
	self:Register(xml:Init3tButton("caption6", self),"caption4")
	self:Register(xml:Init3tButton("caption7", self),"caption4")		

	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)	

	self.btn_5 = xml:Init3tButton("btn_5", self)
	self:Register(self.btn_5, "btn_5")
	self.btn_5:Enable(false)	

	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit") --кнопка выхода
--------------------------------------------------------------------------
	self.message_box = CUIMessageBoxEx()
	self:Register(self.message_box,"message_box")

	local money = db.actor:money()
	self:DrawMoney(money, 260, 63)
end

function repair_dialog:InitCallBacks() --Инициализируем коллбэки
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED, self.rep_btn, self)
	self:AddCallback("btn_5", ui_events.BUTTON_CLICKED, self.rep_btn_full, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
	self:AddCallback("list_window", ui_events.LIST_ITEM_CLICKED, 			  self.OnListItemClicked,		self)
	self:AddCallback("list_window", ui_events.WINDOW_LBUTTON_DB_CLICK,		  self.OnListItemDbClicked,		self)
	self:AddCallback("message_box",		ui_events.MESSAGE_BOX_OK_CLICKED,	  self.OnMsgYes,				self)
end

function repair_dialog:FillList() --Наполняем список предметами
------------Начинаем перебирать инвентарь------------
	item_table = 0
	item_table = {}
	item_table_index = 0
	db.actor:iterate_inventory(item_for_repair, db.actor)
-----------Закончили перебирать инвентарь------------

	local item_in_slot_1 = db.actor:item_in_slot( 1 ) and db.actor:item_in_slot( 1 ):id() or false
	local item_in_slot_2 = db.actor:item_in_slot( 2 ) and db.actor:item_in_slot( 2 ):id() or false
	local item_in_slot_6 = db.actor:item_in_slot( 6 ) and db.actor:item_in_slot( 6 ):id() or false

	local i = 1
	while (item_table[i]) do --Извлекаем предмет из таблицы
		local s_item = item_table[i]
		local s_item_section = s_item:section()
		local _item_num = "" .. i .. ""
		local name_to_cut = game.translate_string(get_inv_name_short(s_item_section))
		local _item_name = shorten_name(name_to_cut)
		
		--[=[local len_point = 29
		
		if s_item:id() == item_in_slot_1 
		or s_item:id() == item_in_slot_2 then
			len_point = 19
		elseif s_item:id() == item_in_slot_6 then
			len_point = 22
		end		
		
		if string.len(_item_name)>len_point then
			_item_name=string.sub(_item_name,1,len_point)
			_item_name=_item_name.."..."
		end--]=]
		
		if s_item:id() == item_in_slot_1 
		or s_item:id() == item_in_slot_2 then
			_item_name = _item_name..game.translate_string("ogse_repair_in_use_text")
		elseif s_item:id() == item_in_slot_6 then
			_item_name = _item_name..game.translate_string("ogse_repair_equipped_text")
		end
		
		local _item_cond = s_item:condition()*100
		if _item_cond ~= 100 then _item_cond = string.format("%.1f", _item_cond) end
		_item_cond = "[" .. _item_cond .. "%]"
		self:AddItemToList(_item_num, _item_name, _item_cond)
		i = i+1
	end
	self.has_sil = false
	self.has_gl = false
	self.has_scope = false
end

function item_for_repair(npc, item)
	if item:condition() < max_condition and item:condition() > min_condition and ((item:is_weapon_magazined() and not string.find( item:section(), "wpn_binoc" )) or item:is_outfit()) then
		item_table_index = item_table_index + 1
		item_table[item_table_index] = item
	end
end

function repair_dialog:OnListItemClicked()
	local list_box = self:GetListWnd("list_window")
	if list_box:GetSize() == 0 then return end
	local itm_index = list_box:GetSelectedItem()
	local item = list_box:GetItem(itm_index)
	if not item then return end

	self.btn_4:Enable(true)
	self.btn_5:Enable(true)

	local destr_item_name = item.itmn:GetText()
	local destr_item_index = tonumber(item.itmnum:GetText())
	local destr_item_st = item_table[destr_item_index]

	if destr_item_st:is_weapon_magazined() then
		if ogse_wpn_utils.get_grenade_launcher_status( destr_item_st )	== 2 and ogse_wpn_utils.get_grenade_launcher_flag( destr_item_st )	then self.has_gl	= true else self.has_gl		= false end
		if ogse_wpn_utils.get_scope_status( destr_item_st )				== 2 and ogse_wpn_utils.get_scope_flag( destr_item_st )				then self.has_scope	= true else self.has_scope	= false end
		if ogse_wpn_utils.get_silencer_status( destr_item_st )			== 2 and ogse_wpn_utils.get_silencer_flag( destr_item_st )			then self.has_sil	= true else self.has_sil	= false end
	else
		self.has_gl		= false
		self.has_scope	= false
		self.has_sil	= false
	end

	self:DrawConditionRemBar(destr_item_st, 300, 130)
	self:DrawCurRemItemName(destr_item_name, 300, 45)
	self:DrawCurRemItem(destr_item_st, 300, 90)

	local destr_item = item_table[destr_item_index]
	local to_repair = 1.0 - destr_item:condition()
	local money = db.actor:money()
	local item_repair_cost = math.floor(destr_item:cost() * to_repair * profit_margin * price_multiplier)
	local repair_step_cost = 0

	if destr_item:condition() < 1-partial_repair then
		repair_step_cost = math.floor((destr_item:cost() * profit_margin) * partial_repair * price_multiplier)
	else
		repair_step_cost = item_repair_cost
	end

	self:DrawMoney(money, 260, 63)
	self:DrawStepCost(repair_step_cost, 260, 83)
	self:DrawCost(item_repair_cost, 260, 103)

	self.item_name_rem:Show(true)
	self.stepcost:Show(true)
	self.cost:Show(true)
	self.cond_rem_bar:Show(true)
end

function repair_dialog:OnListItemDbClicked()
	self:rep_btn()
end

function repair_dialog:rep_btn() --кнопка частичного ремонта
	local list = self:GetListWnd("list_window")	
	if list:GetSize()==0 then return end --нечего ремонтировать

	local index = list:GetSelectedItem()
	if index == -1 then --Если не выбран ствол для ремонта:
		self.msgbox_id = 1
		self.message_box:Init("message_box_select_item_repair") --Выберите предмет для ремонта
		self:GetHolder():start_stop_menu(self.message_box, true)
		return
	end

	local item = list:GetItem(index)
	if not item then --если ствола нет
		self.msgbox_id = 1
		self.message_box:Init("message_box_select_item_repair") --Выберите предмет для ремонта
		self:GetHolder():start_stop_menu(self.message_box, true)
		return
	end		

	local destr_item_index = tonumber(item.itmnum:GetText())
	local destr_item = item_table[destr_item_index]

	local to_repair = 1.0 - destr_item:condition()
	local money = db.actor:money()
	local item_repair_cost = math.floor(destr_item:cost() * to_repair * profit_margin * price_multiplier)
	local repair_step_cost = 0

	if destr_item:condition() < 1-partial_repair then
		repair_step_cost = math.floor((destr_item:cost() * profit_margin) * partial_repair * price_multiplier)
	else
		repair_step_cost = item_repair_cost
	end

	if money >= repair_step_cost then
		local cond 		= destr_item:condition()
		local out_cond 	= cond + partial_repair
		if out_cond > 1 then
			destr_item:set_condition(1)
		else
			destr_item:set_condition(out_cond)
		end
		db.actor:give_money(0-repair_step_cost)
		local list_box = self:GetListWnd("list_window")
--------------------------------------------------------
		if self.cur_rem_textur then self.cur_rem_textur:DetachFromParent() self.cur_rem_textur = nil end
		if self.has_sil then self.silencer_rem_textur:DetachFromParent() self.silencer_rem_textur = nil end
		if self.has_gl then self.grenade_rem_textur:DetachFromParent() self.grenade_rem_textur = nil end
		if self.has_scope then self.scope_rem_textur:DetachFromParent() self.scope_rem_textur = nil end
		self.item_name_rem:Show(false)
		self.stepcost:Show(false)
		self.cost:Show(false)
		self.cond_rem_bar:Show(false)
--------------------------------------------------------
------Костыли от багов. По-другому сделать сложно.------
		self.btn_4:Enable(false)
		self.btn_5:Enable(false)
--------------------------------------------------------
		play_repair_sound()

		list_box:RemoveAll()
		self:FillList()
		local money = db.actor:money()
		self:DrawMoney(money, 260, 63)		
	else --если не хватает денег:
		self.msgbox_id = 1
		self.message_box:Init("message_box_repair_nomoney")
		self:GetHolder():start_stop_menu(self.message_box, true)	
	end
end

function repair_dialog:rep_btn_full() --кнопка полного ремонта
	local list = self:GetListWnd("list_window")	
	if list:GetSize()==0 then
		return
	end
	local index = list:GetSelectedItem()
	if index == -1 then
		self.msgbox_id = 1
		self.message_box:Init("message_box_select_item_repair")
		self:GetHolder():start_stop_menu(self.message_box, true)
		return
	end

	local item = list:GetItem(index)
	
	if not item then
		self.msgbox_id = 1
		self.message_box:Init("message_box_select_item_repair")
		self:GetHolder():start_stop_menu(self.message_box, true)
		return
	end	

	local destr_item_index = tonumber(item.itmnum:GetText())
	local destr_item = item_table[destr_item_index]

	local to_repair = 1.0 - destr_item:condition()
	local money = db.actor:money()
	local item_repair_cost = math.floor(destr_item:cost() * to_repair * profit_margin * price_multiplier)

	if money >= item_repair_cost then
		destr_item:set_condition(1)
		db.actor:give_money(0-item_repair_cost)	
		local list_box = self:GetListWnd("list_window")
--------------------------------------------------------
		if self.cur_rem_textur then self.cur_rem_textur:DetachFromParent() self.cur_rem_textur = nil end
		if self.has_sil then self.silencer_rem_textur:DetachFromParent() self.silencer_rem_textur = nil end
		if self.has_gl then self.grenade_rem_textur:DetachFromParent() self.grenade_rem_textur = nil end
		if self.has_scope then self.scope_rem_textur:DetachFromParent() self.scope_rem_textur = nil end
		self.item_name_rem:Show(false)
		self.stepcost:Show(false)
		self.cost:Show(false)
		self.cond_rem_bar:Show(false)
--------------------------------------------------------
------Костыли от багов. По-другому сделать сложно.------
		self.btn_4:Enable(false)
		self.btn_5:Enable(false)
--------------------------------------------------------
		play_repair_sound()

		list_box:RemoveAll()
		self:FillList()		

		local money = db.actor:money()
		self:DrawMoney(money, 260, 63)		
	else
		self.msgbox_id = 1
		self.message_box:Init("message_box_repair_nomoney")
		self:GetHolder():start_stop_menu(self.message_box, true)	
	end
end	

function repair_dialog:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik == DIK_keys.DIK_ESCAPE then --на выход повесим Esc
			self:on_quit()
		end
	end
	return true
end

function repair_dialog:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self:ClearCallbacks()
end

function repair_dialog:AddItemToList(item_num, item_name, item_cond)
	local _itm = select_repair_items()
	_itm.itmnum:SetText (item_num)
	_itm.itmn:SetText (item_name)
	_itm.itmage:SetText (item_cond)

	local list_box = self:GetListWnd("list_window")
	list_box:AddItem (_itm)
end

function get_inv_name_short(section)
	return sys_ini:r_string(section,"inv_name_short")
end

--Рисуем ремонтируемый предмет
function repair_dialog:DrawCurRemItem(de_item, x, y)
	if self.cur_rem_textur then self.cur_rem_textur:DetachFromParent() self.cur_rem_textur = nil end
	if self.grenade_rem_textur then self.grenade_rem_textur:DetachFromParent() self.grenade_rem_textur = nil end
	if self.scope_rem_textur then self.scope_rem_textur:DetachFromParent() self.scope_rem_textur = nil end
	if self.silencer_rem_textur then self.silencer_rem_textur:DetachFromParent() self.silencer_rem_textur = nil end

	local di_section = de_item:section()
	local sect_addon
	local xa,ya,wa,ha
	local x_g,y_g,x_sco,y_sco,x_sil,y_sil

	local a = self.cur_rem_textur
	if not a then
		self.cur_rem_textur = CUIStatic()
		a = self.cur_rem_textur
		a:SetWindowName("cur_rem_textur")
		a:SetAutoDelete(true)  
		CIconParams( di_section ):set_shader( a )
		self:AttachChild(a)
	end

	tx=get_u32(di_section, "inv_grid_x")*50
	ty=get_u32(di_section, "inv_grid_y")*50
	tw=get_u32(di_section, "inv_grid_width")*50
	th=get_u32(di_section, "inv_grid_height")*50

	x = x-(tw/4)
	y = y-(th/4)

    --a:SetOriginalRect(tx,ty,tw,th)
	a:Init(x,y,tw/2,th/2)

--Рисуем подствольник
	if self.has_gl then
		sect_addon=get_string(di_section,"grenade_launcher_name")
		x_g=x+(get_u32(di_section, "grenade_launcher_x")/2)
		y_g=y+(get_u32(di_section, "grenade_launcher_y")/2)
		xa=get_u32(sect_addon, "inv_grid_x")*50
		ya=get_u32(sect_addon, "inv_grid_y")*50
		wa=get_u32(sect_addon, "inv_grid_width")*50
		ha=get_u32(sect_addon, "inv_grid_height")*50
  
		local b = self.grenade_rem_textur
		if not b then
			self.grenade_rem_textur=CUIStatic()
			b = self.grenade_rem_textur
			b:SetWindowName("grenade_rem_textur")
			b:SetAutoDelete(true)  
			CIconParams( sect_addon ):set_shader( b )
			self:AttachChild(b)
		end
		--b:SetOriginalRect(xa,ya,wa,ha)
		b:Init(x_g,y_g,wa/2,ha/2)
	end

 --Рисуем оптический прицел
	if self.has_scope then
		sect_addon=get_string(di_section,"scope_name")
		x_sco=x+(get_u32(di_section, "scope_x")/2)
		y_sco=y+(get_u32(di_section, "scope_y")/2)
		xa=get_u32(sect_addon, "inv_grid_x")*50
		ya=get_u32(sect_addon, "inv_grid_y")*50
		wa=get_u32(sect_addon, "inv_grid_width")*50
		ha=get_u32(sect_addon, "inv_grid_height")*50
  
		local b = self.scope_rem_textur
		if not b then
			self.scope_rem_textur=CUIStatic()
			b = self.scope_rem_textur 
			b:SetWindowName("scope_rem_textur ")
			b:SetAutoDelete(true)  
			CIconParams( sect_addon ):set_shader( b )
			self:AttachChild(b)
		end
		--b:SetOriginalRect(xa,ya,wa,ha)
		b:Init(x_sco,y_sco,wa/2,ha/2)
	end

--Рисуем глушитель
	if self.has_sil then 	
		sect_addon=get_string(di_section,"silencer_name")
		x_sil=x+(get_u32(di_section, "silencer_x")/2)
		y_sil=y+(get_u32(di_section, "silencer_y")/2)
		xa=get_u32(sect_addon, "inv_grid_x")*50
		ya=get_u32(sect_addon, "inv_grid_y")*50
		wa=get_u32(sect_addon, "inv_grid_width")*50
		ha=get_u32(sect_addon, "inv_grid_height")*50
  
		local b = self.silencer_rem_textur
		if not b then
			self.silencer_rem_textur=CUIStatic()
			b = self.silencer_rem_textur
			b:SetWindowName("silencer_rem_textur")
			b:SetAutoDelete(true)  
			CIconParams( sect_addon ):set_shader( b )
			self:AttachChild(b)
		end
		--b:SetOriginalRect(xa,ya,wa,ha)
		b:Init(x_sil,y_sil,wa/2,ha/2)
	end
end

--Полоска состояния оружия, которое ремонтируем
function repair_dialog:DrawConditionRemBar(de_item, x, y)
	local cond_rem_bar_width = (math.floor(de_item:condition()*100)*1.1)
	x = x - 55
	local c=self.cond_rem_bar
	if not c then
		self.cond_rem_bar = CUIStatic()
		c = self.cond_rem_bar
		c:SetWindowName("cond_rem_bar")
		c:SetAutoDelete(true)
		c:InitTexture("ui\\ui_hud")
		c:SetOriginalRect(347,207,110,10)   
		c:SetStretchTexture(true)
		self:AttachChild(c) 
	end
	c:SetOriginalRect(346+cond_rem_bar_width,207,1,10)   
	c:Init(x,y,cond_rem_bar_width,10)
	if cond_rem_bar_width > 109 then
		cond_rem_bar_width = 109
	elseif cond_rem_bar_width <= 0 then
		cond_rem_bar_width = 1
	end
end

--Название предмета, который ремонтируем
function repair_dialog:DrawCurRemItemName(de_item, x, y)
	local w = self.item_name_rem
	if not w then
		self.item_name_rem = CUI3tButton()
		w = self.item_name_rem
		w:SetWindowName("item_name_rem")
		w:SetAutoDelete(true)
		self:AttachChild(w) 
	end
	w:SetFont(GetFontLetterica16Russian())
	w:SetTextColor (255,216,186,140)
	--[=[local len_point = 25
	if string.len(de_item)>len_point then
		de_item=string.sub(de_item,1,len_point)
		de_item=de_item.."..."
	end--]=]
	w:SetText(de_item)
	w:Init(x-100,y,200,10)
end

function repair_dialog:DrawMoney(insert_text, x, y)
	local w = self.money
	if not w then
		self.money = CUI3tButton()
		w = self.money
		w:SetWindowName("money")
		w:SetAutoDelete(true)
		self:AttachChild(w) 
	end
	w:SetFont(GetFontLetterica16Russian())
	w:SetTextColor (255,255,255,255)
	w:SetText(insert_text)
	w:Init(x-100,y,200,10)
	w:SetTextAlign(CGameFont.alLeft)
end

function repair_dialog:DrawStepCost(insert_text, x, y)
	local w = self.stepcost
	if not w then
		self.stepcost = CUI3tButton()
		w = self.stepcost
		w:SetWindowName("stepcost")
		w:SetAutoDelete(true)
		self:AttachChild(w) 
	end
	w:SetFont(GetFontLetterica16Russian())
	w:SetTextColor (255,255,255,255)
	w:SetText(insert_text)
	w:Init(x-100,y,200,10)
	w:SetTextAlign(CGameFont.alLeft)
end

function repair_dialog:DrawCost(insert_text, x, y)
	local w = self.cost
	if not w then
		self.cost = CUI3tButton()
		w = self.cost
		w:SetWindowName("cost")
		w:SetAutoDelete(true)
		self:AttachChild(w) 
	end
	w:SetFont(GetFontLetterica16Russian())
	w:SetTextColor (255,255,255,255)
	w:SetText(insert_text)
	w:Init(x-100,y,200,10)
	w:SetTextAlign(CGameFont.alLeft)
end

function repair_dialog:OnMsgYes()
	if self.msgbox_id == 1 then return end

	self.msgbox_id = 0
end
