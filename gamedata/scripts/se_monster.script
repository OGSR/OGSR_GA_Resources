-- -*- mode: lua; coding: windows-1251-dos -*-


class "se_monster" (cse_alife_monster_base)
--------------------
function se_monster:__init (section) super (section)
	self.ini = nil
	self.ini_initialized = false

	self.smart_terrain_conditions = nil

	self.spawner_present = false
	self.check_distance = false
	self.min_distance   = 150

	-- этот флаг берЄтс€ из работы смарта
	-- true     = всегда в онлайне
	-- false    = всегда в офлайне
	-- condlist = условие, которое отпредел€ет true или false
	-- nil      = смарту всЄ равно
	self.job_online          = nil
	self.job_online_condlist = nil
	
	--' ‘лаг смерти в оффлайне
	self.offline_dead = 0
end
--------------------
function se_monster:get_ini()
	if not self.ini_initialized then
		self.ini             = self:spawn_ini ()
		self.ini_initialized = true

		self.spawner_present = self.ini:section_exist ("spawner")

		if self.ini ~= nil and self.spawner_present == true then
		   if self.ini:line_exist ("spawner", "check_distance") == true then
		      self.check_distance = self.ini:r_bool ("spawner", "check_distance")
		      if self.check_distance == nil then self.check_distance = false end
		      if self.ini:line_exist ("spawner", "min_distance") == true then
		         self.min_distance = self.ini:r_u32 ("spawner", "min_distance")
		      end
		   end

		   if self.min_distance == nil then
		      self.min_distance = alife():switch_distance() - 50
		      ASSERT(self.min_distance > 50, "SE_MONSTER - SWITCH DISTANCE IS TOO SMALL!!!")
		   end
		end
	end
end
--------------------
function se_monster:get_job_online()
	if self.job_online_condlist == nil then
		return self.job_online
	else
		return xr_logic.pick_section_from_condlist(db.actor_proxy, self, self.job_online) ~= nil
	end
end
--------------------
function se_monster:can_switch_offline ()
	if self:get_job_online() ~= nil then
		return not self:get_job_online()
	else
		return cse_alife_monster_base.can_switch_offline (self)
	end
end
--------------------
function se_monster:can_switch_online()
	if self:get_job_online() ~= nil then
		return self:get_job_online()
	end

    --стандартна€ проверка у родител€, если нет спавнера или игрок помер
	if self.ini == nil or self.spawner_present == false then --or (db.actor_proxy.online and not db.actor:alive())
	--if self.ini == nil or self.spawner_present == false or not db.actor_proxy.online
	    return cse_alife_monster_base.can_switch_online (self)
	end

	if self.online == false then
   	    -- если игрока нет, то в оффлайн
        if not db.actor_proxy.online or not db.actor:alive() then return false end

        --если задана дистанци€ проверки, то проверим.
        if self.check_distance == true then
           --получим позицию.
           local pos = level.vertex_position (self.m_level_vertex_id)
            -- проверим дистанцию до игрока. если меньше требуемой, то от винта
            if pos:distance_to (db.actor:position ()) < self.min_distance then
               return false
            end
        end
        --все проверки прошли - финал, вызов спавнера
	    return xr_spawner.check_spawn (self) and cse_alife_monster_base.can_switch_online (self)
    else
        if not db.actor_proxy.online or not db.actor:alive() then return true end
        if xr_spawner.check_spawn (self) == true then
           return true
        end
        if self.check_distance == true then
           local pos = level.vertex_position (self.m_level_vertex_id)
           -- проверим дистанцию до игрока. если больше требуемой, то от винта
           if pos:distance_to (db.actor:position ()) > self.min_distance then
              return false
           end
        end
        return cse_alife_monster_base.can_switch_online (self)
    end
end
--------------------
function se_monster:STATE_Write(packet)
	cse_alife_monster_base.STATE_Write (self, packet)

	if self.job_online == true then
		packet:w_u8(0)
	elseif self.job_online == false then
		packet:w_u8(1)
	elseif self.job_online == nil then
		packet:w_u8(2)
	else
		packet:w_u8(3)
		packet:w_stringZ(self.job_online_condlist)
	end

	--KRodin: вот это важное условие! ≈сли его убрать, не спавн€тс€ некоторые вечные трупы, в т.ч. квестовые, например труп ѕризрака в X-16
	--Ќа монстров оно тоже может вли€ть, значит.
	if self.id ~= 65535 then
		--log3("~~[se_stalker:STATE_Write] id of [%s] is [%s]", self:name(), self.id)
		packet:w_u32(self.offline_dead)
	else
		--log3("~~[se_stalker:STATE_Write] id of [%s] is [%s]", self:name(), self.id)
	end
end
--------------------
function se_monster:STATE_Read(packet, size)
	cse_alife_monster_base.STATE_Read (self, packet, size)

	local t = packet:r_u8()

	if t == 0 then
		self.job_online = true
	elseif t == 1 then
		self.job_online = false
	elseif t == 2 then
		self.job_online = nil
	else
		self.job_online_condlist = packet:r_stringZ()
		self.job_online = xr_logic.parse_condlist(nil, "se_monster:STATE_Read", "job_online", self.job_online_condlist)
	end

	--KRodin: вот это важное условие! ≈сли его убрать, не спавн€тс€ некоторые вечные трупы, в т.ч. квестовые, например труп ѕризрака в X-16
	--Ќа монстров оно тоже может вли€ть, значит.
	if self.id ~= 65535 then
		--log3("~~[se_monster:STATE_Read] id of [%s] is [%s]", self:name(), self.id)
		self.offline_dead = packet:r_u32()
	else
		--log3("~~[se_monster:STATE_Read] id of [%s] is [%s]", self:name(), self.id)
	end
end
--------------------
function se_monster:on_before_register()
	local strn_id = self:smart_terrain_id()
	if strn_id ~= 65535 then
		ASSERT(
			alife():object( strn_id ),
			"[%s]: %s: wrong smart_terrain_id(): %s",
			script_name(), self:name(), strn_id
		)
	end
	--
	ogse_signals.get_mgr():call( "se_monster_on_before_register", self )
	self:fill_exclusives()
	if not self.has_none_true then
		self.has_none_true = not self:alive() or self:clsid() == clsid.psy_dog_phantom_s --ћертвых и фантомов не провер€ть смартами
	end
	if self.has_none_true then
		self:brain():can_choose_alife_tasks( false )
	end
end
--------------------
function se_monster:on_register()
	alife():remove_in_restrictions( self )
	--
	cse_alife_monster_base.on_register( self )
	--
	if not self.has_none_true and self:smart_terrain_id() == 65535 then
		self:brain():update()
	end
	--
	alife():set_interactive( self, true )
end
--------------------
function se_monster:on_unregister()
	cse_alife_monster_base.on_unregister( self )

	smart_terrain.unregister_npc(self)
end
--------------------
function se_monster:on_death(killer)
	cse_alife_monster_base.on_death(self, killer)

	-- почистим отношени€
	ogse_signals.get_mgr():call("on_release_npc", self.id)
end
--------------------
function se_monster:fill_exclusives()
	self:get_ini()
	self.smart_terrain_conditions, self.has_none_true = smart_terrain.read_smart_terrain_conditions( self )

	if self.smart_terrain_conditions then
		for name, condlist in pairs(self.smart_terrain_conditions) do
			smart_terrain.exclusives[name] = (smart_terrain.exclusives[name] or 0) + 1
		end
	end
end
