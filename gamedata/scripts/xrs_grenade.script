-- -*- mode: lua; coding: windows-1251-dos -*-

------------------------------------------------
--' ‘хема метаниЯ гранат и убеганиЯ от них
--' мод OGSE, версиЯ 2.5, 18/08/2011
--' автор: xStream
--' переработка, доработки алгоритма: KamikaZze
------------------------------------------------

function attach( sm )
  sm:subscribe({ signal = "on_npc_death", fun = this.on_death     })
  sm:subscribe({ signal = "on_npc_spawn", fun = this.on_npc_spawn })
end


function on_npc_spawn( obj, binder )
  if not obj:alive() then return end
  if
    obj:character_community() == "ecolog"
    or obj:character_community() == "zombied"
    or obj:character_community() == "trader"
    or obj:character_community() == "arena_enemy"
    or obj:character_community() == "quest_stalker"
    or obj:name() == "mil_stalker0012"
    or obj:name() == "yantar_ecolog_general"
    or string.find( obj:section(), "arena" )
    or string.find( obj:section(), "aem" )
  then
    return
  end

  local s = {
    [ "signal" ] = "on_npc_update." .. obj:id(),
    [ "fun"    ] = this.npc_update,
    [ "queued" ] = true,
  }
  binder[ script_name() .. ".subscribed" ] = s
  ogse_signals.get_mgr():subscribe( s )
end


function on_death( obj )
  local binder     = obj:binded_object()
  local subscribed = binder[ script_name() .. ".subscribed" ]
  if subscribed then
    ogse_signals.get_mgr():unsubscribe( subscribed )
    binder[ script_name() .. ".subscribed" ] = nil
  end
  death_callback( obj )
end


local gr_types={
	[1]="grenade_f1",
	[2]="grenade_rgd5",
}

local grenades = {}
local grenadiers = {}

local grenade_owners = {}
local grenade_times = {}

local test_grenades={}

local grenade_max_dist = 50

local snd_grenade_replics={
	stalker = {
		[[stalker\ready_1]],
		[[stalker\ready_2]],
		[[stalker\ready_3]],
		[[stalker\ready_4]],
		[[stalker\ready_5]],
		[[stalker\ready_6]],
		[[stalker\ready_7]],
		[[stalker\ready_8]]
	},
	military = {
		[[voyaki\ready_1]],
		[[voyaki\ready_2]],
		[[voyaki\ready_3]]
	},
	bandit = {
		[[bandos\ready_1]],
		[[bandos\ready_2]],
		[[bandos\ready_3]],
		[[bandos\ready_4]],
		[[bandos\ready_5]],
		[[bandos\ready_6]],
		[[bandos\ready_7]],
		[[bandos\ready_8]],
		[[bandos\ready_9]],
		[[bandos\ready_10]]
	},
	monolith = {
		[[mono\ready_1]],
		[[mono\ready_2]],
		[[mono\ready_3]]
	},
	killer = {
		[[merc\ready_1]],
		[[merc\ready_2]]
	},
	dolg = {
		[[dolgos\abuse_3]],
		[[dolgos\backup_3]],
		[[dolgos\panic_monster_2]],
		[[dolgos\panic_monster_4]],
		[[dolgos\search_8]],
		[[dolgos\threat_distant_2]],
		[[dolgos\threat_distant_5]]
	},
	freedom = {
		[[freedom\freedom1]],
		[[freedom\freedom2]],
		[[freedom\freedom3]]
	}
}

local excluded_npcs={
	["trader"]							= true,
	["watchtower"]						= true,
	["sniper"]							= true,
}

local no_grenades = {}

local forbidden_comms = {			-- запретные коммунити
	["zombied"] = true,
	["trader"] = true
}

----------------------------------------------------------------------------------------------------------------------
-- EVALUATORS
----------------------------------------------------------------------------------------------------------------------

class "evaluator_love_napalm_smell" (property_evaluator)
function evaluator_love_napalm_smell:__init( name, storage ) super ( nil, name )
	self.a = storage
	self.a.next_check_time = time_global() + math.random(5000,10000)
	self.a.throwing = false
	self.a.grenades = {}
	for k,v in pairs(gr_types) do
		self.a.grenades[v] = {}
		self.a.grenades[v].radius, self.a.grenades[v].explode_time = get_grenade_radius(v)
	end
end
function evaluator_love_napalm_smell:evaluate()

	if forbidden_comms[self.object:character_community()] then
		return false
	end

	if self.a.throwing then 
		ogse_debug.add_active_eval( self.object, script_name(), "love_napalm_smell" )
		return true 
	end
	local npc = self.object
	
	if no_grenades[npc:id()] then return false end
	--if xrs_battle_ai and xrs_battle_ai.is_combat_ignore(npc) then
	--	return false
	--end		
	
	if self.a.testing then
		if not self.a.test_grenades.hi or not self.a.test_grenades.lo or
			not alife():object(self.a.test_grenades.hi) or not alife():object(self.a.test_grenades.hi) or
			not level.object_by_id(self.a.test_grenades.hi) or not level.object_by_id(self.a.test_grenades.lo)
			then
			self.a.testing = false
			self.a.test_running = false
			self.a.test_begun = false
			self.a.next_check_time = time_global() + 1000
			local s_obj = alife():object(self.a.test_grenades.hi)
			if s_obj then
				alife():release(s_obj, true) 
			end
			s_obj = alife():object(self.a.test_grenades.lo)
			if s_obj then 
				alife():release(s_obj, true) 
			end
			test_grenades[self.a.test_grenades.hi]=nil
			test_grenades[self.a.test_grenades.lo]=nil
			return false
		end
			if not self.a.test_begun then
				self.a.grenades_from_pos = npc:bone_position(get_string(npc:section(), "bone_head", "bip01_head"))
				--
				local hi = get_grenade( self.a.test_grenades.hi )
				if hi then
					npc:drop_item_and_teleport( hi, self.a.grenades_from_pos )
					mark_grenade_non_pickable( hi )
				else
					return false
				end
				local lo = get_grenade( self.a.test_grenades.lo )
				if lo then
					npc:drop_item_and_teleport( lo, self.a.grenades_from_pos )
					mark_grenade_non_pickable( lo )
				else
					return false
				end
				--
				self.a.test_begun = true
				return false
			end
			if self.a.test_begun and not self.a.test_running and get_grenade(self.a.test_grenades.hi) and get_grenade(self.a.test_grenades.lo) then 
				
				throw(self.a.test_grenades.hi,'hi',self.a.target_point)
			
				throw(self.a.test_grenades.lo,'lo',self.a.target_point)
				
				self.a.test_running = true
				self.a.test_end_time = time_global() + self.a.grenades[self.a.test_grenades_sect].explode_time
				return false
			end
			if self.a.test_running and self.a.test_end_time<time_global() then
				local hi_pos,lo_pos = get_grenade(self.a.test_grenades.hi):position(),get_grenade(self.a.test_grenades.lo):position()
				local pos = level.vertex_position(self.a.from_vert)
				local radius = self.a.grenades[self.a.test_grenades_sect].radius
				
				local can_throw=false
				local hi_d,lo_d = false,false
				if hi_pos:distance_to(pos)>radius and hi_pos:distance_to(self.a.target_point)<radius then
					hi_d = hi_pos:distance_to(self.a.target_point)
				end
				if lo_pos:distance_to(pos)>radius and lo_pos:distance_to(self.a.target_point)<radius then
					lo_d = lo_pos:distance_to(self.a.target_point)
				end
				if hi_d then
					can_throw=true
					self.a.throwing_type="hi"
				end
				if lo_d and lo_d<(hi_d or 10000) then
					can_throw=true
					self.a.throwing_type="lo"
				end
				if can_throw and get_grenade(self.a.grenade) then
					self.a.throwing=true
				end
				
				s_obj = alife():object(self.a.test_grenades.hi)
				if s_obj then
					alife():release(s_obj, true) 
				end
				
				s_obj = alife():object(self.a.test_grenades.lo)
				if s_obj then 
					alife():release(s_obj, true) 
				end				

				test_grenades[self.a.test_grenades.hi]=nil
				test_grenades[self.a.test_grenades.lo]=nil
				
				self.a.testing = false
				self.a.test_running = false
				self.a.test_begun = false
				self.a.next_check_time = time_global() + 1000
			end
		return false
	end
	
	if self.a.next_check_time < time_global() then
		if npc:body_state()==move.crouch then return false end
		self.a.next_check_time = time_global() + 1000
		local alt_be = nil
		if xrs_battle_ai then
			alt_be = xrs_battle_ai.get_target(npc)
		end
		local be = alt_be or npc:best_enemy()
		if not be then return false end
		if check_enemy(npc,be) and xrs_battle_ai.we_are_under_attack(npc, be) then
			local curr_gr = nil
			for k,v in pairs(gr_types) do
				curr_gr = npc:object(v)
				if curr_gr and self:check_grenade(curr_gr:section())==true then 
					break 
				end
				curr_gr = nil
			end
			if curr_gr==nil then return false end

			--можно швыряться - вероятность никого не задеть (кроме врагов) достаточно велика
			self.a.from_vert = npc:level_vertex_id()
			self.a.from_pos = npc:position()
			self.a.target_point = be:position():add(vector_rotate_y(be:position():sub(npc:position()),90):normalize():mul(2))

			self.a.grenade = curr_gr:id()
			
			local timeout = time_global() + self.a.grenades[get_grenade(self.a.grenade):section()].explode_time
			self.a.test_grenades={}
			local t
			t = alife():create(get_grenade(self.a.grenade):section().."_test", npc:position(), npc:level_vertex_id(), npc:game_vertex_id(), npc:id())
			test_grenades[t.id]=timeout+5000
			self.a.test_grenades.hi=t.id
			t = alife():create(get_grenade(self.a.grenade):section().."_test", npc:position(), npc:level_vertex_id(), npc:game_vertex_id(), npc:id())
			test_grenades[t.id]=timeout+5000
			run_grenade_timer()
			self.a.test_grenades.lo=t.id
			self.a.test_grenades_sect = get_grenade(self.a.grenade):section()
			
			self.a.test_end_time = timeout
			self.a.testing = true
		end
	end
	return false
end
function evaluator_love_napalm_smell:check_grenade(section)
	local npc = self.object
	
	if forbidden_comms[self.object:character_community()] then
		return false
	end	

	local alt_be = nil
	if xrs_battle_ai then
		alt_be = xrs_battle_ai.get_target(npc)
	end
	local be = alt_be or npc:best_enemy()
	
	local bp = be:position()
	local np = npc:position()
	local throw_dist=np:distance_to(bp)

	--далеко кидать никак, мы ж не атлеты...
	if throw_dist>grenade_max_dist then return false end
	
	local throw_dir=be:position():sub(np)
	-- если накроет взрывом - не будем кидать
	if throw_dist<self.a.grenades[section].radius then return false end
--[[
	--теперь проверим, чтоб не задеть своих и нейтралов
	local function check_item(obj)
		obj=obj:object()
		if obj==nil or obj.clsid==nil then return false end
		if not obj:is_actor() and not obj:is_stalker() then return false end
		if npc:relation(obj) ~= game_object.enemy then
			local d=bp:distance_to(obj:position())
			if d<self.a.grenades[section].radius then return true end
		end
		return false
	end
	
	for o in npc:memory_visible_objects() do
		if check_item(o) then return false end
	end
	for o in npc:memory_sound_objects() do
		if check_item(o) then return false end
	end
]]
	--можно использовать эту гранату....
	return true
end


class "evaluator_oh_shit" (property_evaluator)
function evaluator_oh_shit:__init( name, storage ) super ( nil, name )
	self.a = storage
	self.a.throwing = false
	self.a.grenades = {}
	for k,v in pairs(gr_types) do
		self.a.grenades[v] = {}
		self.a.grenades[v].radius, self.a.grenades[v].explode_time = get_grenade_radius(v)
	end
end
function evaluator_oh_shit:evaluate()
	local npc = self.object
	
	if forbidden_comms[self.object:character_community()] then
		return false
	end	
	if no_grenades[npc:id()] then return false end
	
	if self.a.danger_inert and self.a.danger_inert>time_global() then 
		ogse_debug.add_active_eval( self.object, script_name(), "oh_shit" )
		return true 
	end
	local danger,danger_r,dist = false,0,1000
	for k,v in pairs(grenades) do
		if get_grenade(k) and v.time - 1500 > time_global() then
			if grenade_times[k] and time_global() - grenade_times[k] < 250 then
				self.a.cover = nil
				return false
			end
			local gdist = get_grenade(k):position():distance_to(npc:position())
			if gdist<self.a.grenades[get_grenade(k):section()].radius and gdist<dist then
				danger = get_grenade(k):position()
				danger_r = self.a.grenades[get_grenade(k):section()].radius
				if danger then
					self.a.danger_id = k
				end				
				dist = gdist
			end
		end
	end
	if danger then
		self.a.danger = danger
		self.a.danger_r = danger_r
		self.a.last_danger_time = time_global()
		ogse_debug.add_active_eval( self.object, script_name(), "oh_shit_2" )
		return true
	else
		if (self.a.last_danger_time or 0)+2000 > time_global() then
			if npc:position():distance_to(self.a.danger)<self.a.danger_r then
				self.a.danger_inert = time_global()+2500
				ogse_debug.add_active_eval( self.object, script_name(), "oh_shit_3" )
				return true
			end
			self.a.danger_id = nil
			self.a.danger = nil
			self.a.danger_r = nil
			self.a.last_danger_time = nil
		end
	end
	self.a.cover = nil
	return false
end

----------------------------------------------------------------------------------------------------------------------
-- ACTIONS
----------------------------------------------------------------------------------------------------------------------
class "action_kill_it_with_fire" (action_base)
function action_kill_it_with_fire:__init ( name, storage ) super ( nil, name )
	self.a = storage
end
function action_kill_it_with_fire:initialize()
	action_base.initialize(self)
	self.at_pos = false
	self.begin_throw = false
	self.throw_end = false
	
	self.time_back_to_pos = time_global()+5000
	
	self.can_explode = false
	self.finalized = false
	local npc = self.object
	
	xr_sound.set_sound(npc, nil)
	stop_play_sound(npc)

end
function action_kill_it_with_fire:execute()
	action_base.execute (self)
	
	if self.finalized then return end
	if not get_grenade(self.a.grenade) then
		self.a.throwing = false
		return
	end
	local npc = self.object
		
	if not self.at_pos then
		if time_global()>self.time_back_to_pos then
			self.a.throwing = false
			return
		end
		if self.a.from_vert==npc:level_vertex_id() and self.a.from_pos:distance_to(npc:position())<0.3 then

			local en_inj,fr_inj = false,false
			local r = self.a.grenades[get_grenade(self.a.grenade):section()].radius
			for k, is_npc in pairs( db.creature ) do
				local obj = level.object_by_id( k )
				if obj and obj:alive() then
					local od = self.a.target_point:distance_to( obj:position() )
					if od <= r then
						if npc:relation( obj ) == game_object.enemy then
							en_inj = true
						else
							fr_inj = true 
							break
						end
					end
				end
			end
			if fr_inj or not en_inj then
				self.a.grenade = nil	
				self.a.throwing = false
				self.a.target_point = nil
				self.finalized = true
				return
			end	
			
			npc:set_item(object.idle,nil)
			npc:set_movement_type(move.stand)
			npc:set_mental_state(anim.danger)
			npc:set_body_state(move.standing)
			npc:movement_enabled(true)
			
			local snd_sect = snd_grenade_replics[npc:character_community()] or snd_grenade_replics.stalker
			local snd = [[grenadier\]]..snd_sect[math.random(table.getn(snd_sect))]
			snd = xr_sound.get_safe_sound_object(snd)
			if snd then
				snd:play_no_feedback(npc, sound_object.s3d, 0, npc:position(), 1.0)
			end
			
			self.start_time = time_global()
			self.throw_time = self.start_time + 1000
			self.end_time = self.throw_time + 300
			
			grenadiers[npc:id()]=self.a.grenade
			self.at_pos = true
			return
		end
		utils.send_to_nearest_accessible_vertex(npc, self.a.from_vert)
		npc:set_movement_type(move.run)
		npc:set_body_state(move.standing)
		npc:set_desired_position(self.a.from_pos)
		npc:clear_animations()
		local alt_be = nil
		if xrs_battle_ai then
			alt_be = xrs_battle_ai.get_target(npc)
		end
		local be = alt_be or npc:best_enemy()
		if be and npc:see(be) then
			npc:set_sight(look.point,be:position())
			npc:set_desired_direction(be:position():sub(npc:position()))
		end
		return
	end
	
	npc:set_sight(look.point,self.a.target_point)
	npc:set_desired_direction(utils.vector_copy_by_val(self.a.target_point):sub(npc:position()))

	if time_global() > self.throw_time and not self.begin_throw then
		self.begin_throw=true
		npc:clear_animations()
		if self.a.throwing_type == 'lo' then
			npc:add_animation("udar_0")
		else
			npc:add_animation("norm_all_6_attack_2")
		end
		return
	end
	
	if time_global() < self.end_time and self.begin_throw then
		if npc:animation_count() > 0 then
			return
		else
			state_mgr.set_state( script_name(),  npc, "sneak_fire", nil, nil, {look_object = be} )
		end
	end
	
	if time_global() > self.end_time and not self.can_explode then
		npc:drop_item_and_teleport(get_grenade(self.a.grenade), self.a.grenades_from_pos)
		grenade_owners[self.a.grenade] = npc:id()
		grenade_times[self.a.grenade] = time_global()
		grenadiers[npc:id()]=nil
		self.can_explode=time_global()
		return
	end

	if self.can_explode then
		throw(self.a.grenade,self.a.throwing_type,self.a.target_point)

		level.map_add_object_spot(self.a.grenade, "grenade_location", get_grenade(self.a.grenade):section())
		
		local timeout = self.a.grenades[get_grenade(self.a.grenade):section()].explode_time-(time_global()-self.can_explode)
		
		grenades[get_grenade(self.a.grenade):id()] = { ["time"] = time_global() + timeout, ["killer_id"] = npc:id() }
		run_grenade_timer()
		
		self.a.grenade = nil	
		self.a.next_check_time = time_global() + math.random(7000,15000)
		self.a.throwing = false
		self.a.target_point = nil
		self.finalized = true
		
	end
end
function action_kill_it_with_fire:finalize()
	action_base.finalize (self)
end

class "action_run_run_run" (action_base)
function action_run_run_run:__init ( name, storage ) super ( nil, name )
	self.a = storage
end
function action_run_run_run:initialize()
	action_base.initialize(self)
	local npc=self.object
	npc:clear_animations()
	npc:set_item(object.idle,nil)
	
	xr_sound.set_sound(npc, nil)
	stop_play_sound(npc)
end
function action_run_run_run:execute()
	action_base.execute (self)
	
	local npc=self.object

--	if npc:animation_count()>0 then return end
	
	if self.a.danger_id and grenade_owners[self.a.danger_id] and grenade_owners[self.a.danger_id] == npc:id() then
		-- наша личная гренка
		ogse_debug.add_active_eval( self.object, script_name(), "action_grenade" )
--		npc:movement_enabled(true)
		npc:set_mental_state(anim.danger)
		npc:set_sight(look.direction,self.a.danger)
		state_mgr.set_state( script_name(),  npc, "hide_fire" )
	else
		-- а это не наша... никто гренку не терял?
		ogse_debug.add_active_eval( self.object, script_name(), "action_grenade_panic" )
--		npc:movement_enabled(true)
		if not self.a.cover then
			local cover = npc:best_cover(npc:position(), self.a.danger, 15, 5, 20)

			if cover then
				self.a.cover = cover:level_vertex_id()
			end
		end

		local best_dist,best_dir = 0,vector():set(0,0,0)
		local dir = npc:position():sub(self.a.danger):normalize()
		local dvert = npc:level_vertex_id()
		

		if self.a.cover then
			dvert = self.a.cover
		else	
			for a=-120,120,10 do
				local ndir = vector_rotate_y(dir,a)
				local vert = level.vertex_in_direction(npc:level_vertex_id(),ndir,50)
				local ndist = level.vertex_position(vert):distance_to(self.a.danger)
				if ndist>best_dist and npc:accessible(vert) then
					best_dist=ndist
					dvert = vert
					break
				end
			end		
		end

		npc:set_sight(look.direction,level.vertex_position(dvert))
		state_mgr.set_state( script_name(), npc, "sprint_p")	
		utils.send_to_nearest_accessible_vertex(npc, dvert)	
	end

end
function action_run_run_run:finalize()
	self.object:set_mental_state(anim.danger)
	action_base.finalize (self)
end



--------------------------------------------------------------------------------------------------------------
-- Идентификаторы эвалуаторов схемы
--------------------------------------------------------------------------------------------------------------
local base = 87460
prop_fire 			= base + 0
prop_grenade 		= base + 1

local base_act = 87480
act_kill_it			= base_act + 0
act_run				= base_act + 1
----------------------------------------------------------------------------------------------------------------------
-- BINDER
----------------------------------------------------------------------------------------------------------------------

function add_to_binder( object, char_ini, scheme, section, st )

	-- вообще не пользуем схемы
	local name = object:name()
	for k,v in pairs(excluded_npcs) do
		if string.find(name, k) then
			no_grenades[object:id()] = true
			break
		end
	end

	local manager = object:motivation_action_manager()
		
	local property_wounded 			= xr_evaluators_id.sidor_wounded_base
	local state_mgr_to_idle_combat 	= xr_actions_id.state_mgr + 1
	local state_mgr_to_idle_alife 	= xr_actions_id.state_mgr + 2
		
	manager:remove_evaluator( prop_fire )
	manager:remove_evaluator( prop_grenade )

	
	manager:add_evaluator( prop_fire,			evaluator_love_napalm_smell	( "evaluator_love_napalm_smell",        st ) )
	manager:add_evaluator( prop_grenade,		evaluator_oh_shit	( "evaluator_oh_shit",        st ) )

	local action = action_kill_it_with_fire( "action_kill_it_with_fire", st )
	action:add_precondition( world_property( stalker_ids.property_alive,     true  ) )
	action:add_precondition( world_property( stalker_ids.property_anomaly,   false ) )
	action:add_precondition( world_property( property_wounded,				 false ) )
	action:add_precondition( world_property( prop_grenade,          	     false ) )
	if ogsm_hideout then
		action:add_precondition( world_property( ogsm_hideout.property_blowout,  false ) )
		action:add_precondition( world_property( ogsm_hideout.property_hideout_lost, false) )
		action:add_precondition( world_property( ogsm_hideout.property_inhide,   false ) )
	end
	action:add_precondition( world_property( prop_fire,          		     true  ) )
	action:add_effect      ( world_property( prop_fire,   					 false ) )
	manager:add_action( act_kill_it, action )
	
	local action = action_run_run_run( "action_run_run_run", st )
	action:add_precondition( world_property( stalker_ids.property_alive,     true  ) )
	action:add_precondition( world_property( stalker_ids.property_anomaly,   false ) )
	action:add_precondition( world_property( property_wounded,				 false ) )
	if ogsm_hideout then
		action:add_precondition( world_property( ogsm_hideout.property_hideout_lost, false ) )
	end
	action:add_precondition( world_property( prop_grenade,          	     true  ) )
	action:add_effect      ( world_property( prop_grenade,   				 false ) )
	manager:add_action( act_run, action )
		
	action = manager:action (stalker_ids.action_combat_planner)	
	action:add_precondition( world_property( prop_fire,          		     false  ) )
	action:add_precondition( world_property( prop_grenade,          	     false  ) )
		
	action = manager:action (stalker_ids.action_danger_planner)	
	action:add_precondition( world_property( prop_fire,          		     false  ) )
	action:add_precondition( world_property( prop_grenade,          	     false  ) )

	-- action = manager:action (stalker_ids.action_alife_planner)				--- причина отсутствия реакции на гранаты в спокойном состоянии. НЕ РАСКОММЕНТИРОВАТЬ! 18/08/2001 KamikaZze
	-- action:add_precondition( world_property( prop_fire,          		     false  ) )
	-- action:add_precondition( world_property( prop_grenade,          	     false  ) )	
	
	action = manager:action(state_mgr_to_idle_alife)
	action:add_precondition( world_property( prop_fire,          		     false  ) )
	action:add_precondition( world_property( prop_grenade,          	     false  ) )

	action = manager:action(state_mgr_to_idle_combat)
	action:add_precondition( world_property( prop_fire,          		     false  ) )
	action:add_precondition( world_property( prop_grenade,          	     false  ) )
	
end


-- Функции включения/выключения схемы
function enable_scheme(npc, ini)
	local st = xr_logic.assign_storage_and_bind(npc, ini, "grenade_evade")
	if st then
		st.enabled = true
	end
end
function disable_scheme(npc, scheme)
	local st = db.storage[npc:id()][scheme]
	if st then
		st.enabled = false
	end
end

----------------------------------------------------------------------------------------------------------------------
-- HELPERS
----------------------------------------------------------------------------------------------------------------------
function get_grenade(id)
	return level.object_by_id(id)
end

function get_grenade_srv(id)
	return alife():object(id)
end

function get_grenade_radius(section)
	local r,t = 1000,0
	local br = utils.cfg_get_number(sys_ini, section, "blast_r", false, false, false, 1000)
	local fr = utils.cfg_get_number(sys_ini, section, "frags_r", false, false, false, 1000)
	t = utils.cfg_get_number(sys_ini, section, "destroy_time", false, false, false, 0)
	r = math.max(br,fr)

	return r,t
end


function update()
  --ogse_signals.get_mgr():reschedule( 1000 )
  for k, v in pairs( grenades ) do
    local sobj = alife():object( k )
    if sobj and sobj.parent_id == 65535 then
      if time_global() > v.time then
        local obj = level.object_by_id( k )
        if obj then
          local a = alife():create(
            obj:section() .. "_fake",
            obj:position():add( vector():set( 0, 1, 0 ) ),
            obj:level_vertex_id(), obj:game_vertex_id()
          )
          level.client_spawn_manager():add(
            a.id, -1, function( killer_id, id, obj )
              mark_grenade_non_pickable( obj )
              obj:explode_initiator( killer_id )
            end, v.killer_id
          )
        end
        alife():release( sobj, true )
        grenades[ k ] = nil
      end
    else
      grenades[ k ] = nil
    end
  end
  for k, v in pairs( test_grenades ) do
    local sobj = alife():object( k )
    if sobj then
      if time_global() > v then
        alife():release( sobj, true )
        test_grenades[ k ] = nil
      end
    else
      test_grenades[ k ] = nil
    end
  end
end


function death_callback(npc)
	if grenadiers[npc:id()] then
		local grenade = grenadiers[npc:id()]
		local g_obj = get_grenade(grenade)
		if g_obj then
			local dummy,timeout = get_grenade_radius(g_obj:section())
			grenade = alife():create(g_obj:section(), npc:bone_position(get_string(npc:section(), "bone_head", "bip01_head")), npc:level_vertex_id(), npc:game_vertex_id())
			grenades[grenade.id] = { ["time"] = time_global() + timeout, ["killer_id"] = npc:id() }
			run_grenade_timer()
		end
		grenadiers[npc:id()]=nil
	end
end

function check_enemy(npc,be)
	return npc:alive() and be and (
		be:is_stalker()
		or be:is_actor()
		or be:clsid() == clsid.bloodsucker_s
		or be:clsid() == clsid.burer_s
		or be:clsid() == clsid.chimera_s
		or be:clsid() == clsid.controller_s
		or be:clsid() == clsid.fracture_s
		or be:clsid() == clsid.gigant_s
		or be:clsid() == clsid.poltergeist_s
		or be:clsid() == clsid.snork_s
		or be:clsid() == clsid.zombie_s
	) and be:alive() and npc:see(be) and be:position():distance_to(level.vertex_position(be:level_vertex_id()))<2 --из-за глюков движка кидать будем только в объекты, недалеко от аи сетки
end

function npc_update( npc )
  ogse_signals.get_mgr():reschedule(
    120000 - 20000 * level.get_game_difficulty()
  )
  for k, v in ipairs( gr_types ) do
    local curr_gr = npc:object( v )
    if not curr_gr then
      local sobj = alife():object( npc:id() )
      if sobj and sobj.rank and sobj:rank() ~= 0 then
        local prb = sobj:rank() / 2500
        if prb > 0.9  then prb = 0.9  end
        if prb < 0.01 then prb = 0.01 end
        if math.random() < prb then
          alife():create(
            v,
            npc:position(), npc:level_vertex_id(), npc:game_vertex_id(),
            npc:id()
          )
        end
      end
    else
      break
    end
  end
end

function throw(id,typ,target)
	if not get_grenade(id):get_physics_shell() then return end
	
	local bone = get_grenade(id):get_physics_shell():get_element_by_bone_name("wpn_body")
	local dir=utils.vector_copy_by_val(target):sub(get_grenade(id):position())
	dir:mul(1300)
	if typ=="lo" then
		dir:add(vector():set(0,8000,0))
	else
		dir:add(vector():set(0,19000,0))
	end
	if bone then bone:apply_force(dir.x+math.random(-3, 3),dir.y,dir.z+math.random(-3, 3)) end
end


local grenade_t
function run_grenade_timer()
  if not grenade_t then
    grenade_t = check_grenade_timer():start()
  end
end

class "check_grenade_timer" ( ogse_qt.quick_timer )
function check_grenade_timer:__init() super()
end

function check_grenade_timer:condition()
  return next( grenades ) == nil and next( test_grenades ) == nil
end

function check_grenade_timer:action()
  grenade_t = nil
end

function check_grenade_timer:update()
  update()
end
