local ANIMS_ENABLED = get_bool("options","animated_items", true)

local cfg = {
	["eat_health"]		= function(v) db.actor.health = v end,
	["eat_power"]		= function(v) db.actor.power = v end,
	["eat_radiation"]	= function(v) db.actor.radiation = v end,
	["eat_satiety"]		= function(v) db.actor.satiety = v end,
	["eat_thirst"]		= function(v) db.actor.thirst = v end,
	["eat_alcohol"]		= function(v) db.actor.alcohol = v end,
	["eat_psy_health"]	= function(v) db.actor.psy_health = v end,
	["wounds_heal_perc"]= function(v) db.actor:heal_wounds( v ) end,
}

local function apply_item( sect )
	if sect == "bipsizon" then
		ogse_healing.use_bipsizon(sect)
		return
	elseif sect == "yod" then
        	ogse_healing.use_B190(sect)
		return
	elseif sect == "dix" then
        	ogse_healing.use_dix(sect)
		return
	elseif string.find(sect, "^medkit") then
		if ogse_healing.slow_medicine then
			ogse_healing.use_medkit(sect)
			return
		end
	elseif sect == "kolba_zombie" then
		tasks_functor.use_kolba_zombie()
		return
	elseif sect == "kordon_samogon" then
		db.actor:give_info_portion("kordon_samogon_forsage")
	elseif sect == "glassful" then
		jekan_update.pervach_use()
	end		

	for line, func in pairs( cfg ) do
		local val = get_float( sect, line )
		if val ~= 0	then
			func(val)
		end
	end

	if sect == "voda" then
		ogse_healing.use_voda(sect)
	elseif sect == "vodka" then
		ogse_healing.use_vodka(sect)
	end
end

local function respawn_item(obj)
	obj:zero_effects()
	alife():create( obj:section(), db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id() )	   
end

local snd_in_use = false

local function play_use_sound(sect, snd_name)
	local snd = snd_name or get_string( sect, "snd_use" )
	if snd then
		if snd_in_use then
			snd_in_use:stop()
		end
		snd_in_use = sound_object( snd )
		snd_in_use:play( db.actor, 0, sound_object.s2d )
	end
end

local function play_item_use(item)
    local anim = ( string.find(item, "^bandage") and math.random() > 0.5 ) and "anm_use_alt" or "anm_use"
    local item_hud = get_string(item, "hud")
    local cam_effect = get_string(item, "cam_effect")
    local used_time = get_u32(item, "item_used_timing")
    local snd = get_string(item, "snd_use_anm")
    local outfit = db.actor:item_in_slot(6)

    if outfit then
        if string.find(outfit:section(), "_exo") and ( string.find(item, "^medkit") or item == "antirad" ) then
            item_hud = get_string(item, "hud_exo")
            used_time = get_string(item, "item_used_timing_exo")
            snd = get_string(item, "snd_use_exo_anm")
            cam_effect = get_string(item, "cam_effect_exo")
        elseif (outfit:section() == "scientific_outfit" or outfit:section() == "ecolog_outfit" or outfit:section() == "protection_outfit") and string.find(item, "^medkit") then
            anim = "anm_use_alt"
        end
    end

	if level.get_inventory_wnd():IsShown() then
		level.start_stop_menu(level.get_inventory_wnd(), true)
	elseif level.get_car_body_wnd():IsShown() then
		level.start_stop_menu(level.get_car_body_wnd(), true)			
	end

    level.only_allow_movekeys(true)
    level.set_actor_allow_ladder(false)

	local prev_active_slot = db.actor:active_slot()
	db.actor:activate_slot(255)

	dsh.wait_condition(function() return not db.actor:active_item() end, function()
		snd_in_use = sound_object(snd)
		snd_in_use:play(db.actor, 0, sound_object.s2d)

		local anm_start = time_global()
		local anm_duration = game.play_hud_motion(2, item_hud, anim, true, 1, true)
		level.add_cam_effector(cam_effect, 7538, false, "", 0, false)

		local hud = get_hud()
		local anim_hud = hud:GetCustomStatic("static_anim") or hud:AddCustomStatic("static_anim", true)
		local anim_hud_wnd = anim_hud:wnd()
		local xml = CScriptXmlInit()
		xml:ParseFile("ui_custom_msgs.xml")
		anim_hud_wnd:SetText(game.translate_string("st_item_used")..":"..game.translate_string(news_manager.get_inv_name(item)))		
		local anim_progress = xml:InitProgressBar("static_anim:anim_progress", anim_hud_wnd)
		anim_progress:Show(true)

		dsh.timeout(used_time, function()
			apply_item(item)
		end)

		local tmr = dsh.timeout(anm_duration, function()
			level.only_allow_movekeys(false)
			level.set_actor_allow_ladder(true)

			db.actor:activate_slot(prev_active_slot)

			hud:RemoveCustomStatic("static_anim")
			anim_progress = false
		end)

		dsh.wait_condition(function() return not tmr.slot_desc end, function() end, function()
			if anim_progress then
				anim_progress:SetProgressPos( 100 - 100 * ( ((anm_start + anm_duration) - time_global()) / anm_duration ) )
			end
		end)
	end)
end

local function use_item_without_anim(obj, sobj, sect)
	if sect == "kolba_zombie" then
		if tasks_functor.can_use_kolba_zombie() then
			tasks_functor.use_kolba_zombie()
		else
			respawn_item(obj)
		end
	elseif sect == "kordon_samogon" then
		db.actor:give_info_portion("kordon_samogon_forsage")
	elseif sect == "glassful" then
		jekan_update.pervach_use()
	elseif ogse_healing.on_before_use_item(obj, sobj) then
		play_use_sound(sect)
	else
		play_use_sound(sect)
	end
end

local function on_actor_before_use( obj, sobj )
    local sect = obj:section()

    if ANIMS_ENABLED then
		if not get_string(sect, "snd_use_anm") then --лучше всего отсекать не анимационные предметы по наличию этой строки, потому что строка hud есть у многих предметов без худа почему то.
			return
		elseif db.actor:has_info("ui_talk") then -- Нужно для того что бы диалог не обрывался если мы решили выпить\перекусить с собеседником
			use_item_without_anim(obj, sobj, sect)
		elseif ogsr_actor_animation.allow_animation() then
            if sect == "yod" then
                if not ogse_healing.can_use_B190() then
                    respawn_item(obj)
                    return
                end
            elseif string.find(sect, "^medkit") then
                if not ogse_healing.can_use_medkit() then
                    respawn_item(obj)
                    return
                end
            elseif sect == "dix" then
                if not ogse_healing.can_use_dix() then
                    respawn_item(obj)
                    return
                end
            elseif sect == "bipsizon" then
                if not ogse_healing.can_use_bipsizon() then
                    respawn_item(obj)
                    return
                end
            elseif sect == "kolba_zombie" then
                if not tasks_functor.can_use_kolba_zombie() then
                    respawn_item(obj)
                    return
                end
            end

            obj:zero_effects()

            play_item_use(sect)
		else
			respawn_item(obj) --Это важно!
        end
    else
		use_item_without_anim(obj, sobj, sect)
    end
end

local function animation_off()
	level.only_allow_movekeys(false)
	level.set_actor_allow_ladder(true)
end


function attach( sm )
	sm:subscribe({ signal = "on_actor_before_use", fun = on_actor_before_use })
	sm:subscribe({ signal = "on_first_update",     fun = animation_off       })
end
