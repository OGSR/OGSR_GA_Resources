

--[[----------------------------------------------------------------------------
-|remkit_main.script
-|Модуль походного ремонтного комплекта
-|KRodin © 2016
-|Version: 2.0 (Переделано очень много, собрано из трех скриптов в один и адаптировано под новую систему аддонов)
-|Для работы нужен модуль функций работы с оружием ogse_wpn_utils.script
------------------------------------------------------------------------------]]
--[[
Новый принцип работы ремкита:
Починить можно вещь, состояние которой выше 10% (убавил ограничение, в оригинале было больше)
После ремонта вещь ремонтируется ПОЛНОСТЬЮ! (т.е до 100% состояния), и ремкит удаляется.
Транспорт чинится по старой схеме. Там ничего не менял.
]]

function attach(sm)
	sm:subscribe({signal = "on_use",	fun = this.check_use_repair_kit})
end

function check_use_repair_kit(obj, sobj) --действие при запуске ремкита из инвентаря.
	--if not obj or not sobj then return end

	if obj:section() == "repair_kit" then
		local spwn = remkit()
		level.start_stop_menu(spwn,true)
		return true
	end
end

function create_repair_kit()
	ogse.spawn_item_in_inv("repair_kit")
end

function dismantle_wpn(destr_item) --Полностью разобрать оружие - снять все аддоны, магазин, гранаты из подствола, патроны и тд.
--------------------------------------Снимаем со ствола аддоны:------------------------------------------
	local dest_itm_sect = destr_item:section()
	local has_gl, has_scope, has_sil, has_grip, has_scope_mount, has_magazine = false, false, false, false, false, false
	if ogse_wpn_utils.get_grenade_launcher_status( destr_item ) == 2 and ogse_wpn_utils.get_grenade_launcher_flag( destr_item )	then has_gl				= true end
	if ogse_wpn_utils.get_scope_status( destr_item )			== 2 and ogse_wpn_utils.get_scope_flag( destr_item )			then has_scope			= true end
	if ogse_wpn_utils.get_silencer_status( destr_item )			== 2 and ogse_wpn_utils.get_silencer_flag( destr_item )			then has_sil			= true end

	if has_scope		then ogse.spawn_item_in_inv(get_string(dest_itm_sect,"scope_name"))				end
	if has_gl			then ogse.spawn_item_in_inv(get_string(dest_itm_sect,"grenade_launcher_name"))	end
	if has_sil			then ogse.spawn_item_in_inv(get_string(dest_itm_sect,"silencer_name"))			end
	if has_grip			then ogse.spawn_item_in_inv(get_string(dest_itm_sect,"grip_name"))				end
	if has_scope_mount	then ogse.spawn_item_in_inv(get_string(dest_itm_sect,"scope_mount_name"))		end
	if has_magazine		then ogse.spawn_item_in_inv(get_string(dest_itm_sect,"magazine_name"))			end
---------------------------------------------------------------------------------------------------------
	destr_item:unload_magazine(true, true) --Теперь движок всё сам разряжает, в т.ч. подствольник, и сам спавнит патроны владельцу.
end

function use_repair_kit(repaired_slot, destroy_item)
	local repair_item = db.actor:item_in_slot(repaired_slot)
	if not repair_item then return false end --на всякий случай: Если ремонтируемого предмета нет в слоте, то ничего не делаем.

	if destroy_item:is_weapon_magazined() then dismantle_wpn(destroy_item) end --если разбираемый на запчасти предмет является оружием, разрядим его и снимем с него аддоны.
	ogse.remove_item_from_inventory(destroy_item) --удаляем из инвентаря разобранный предмет
	repair_item:set_condition( 1 ) -- Ремонтируем предмет в полностью исправное состояние.
	play_repair_sound() --играем звук ремонта
	return true
end

function compatibility_item(item, repaired_item) --Проверка совместимости ремонтируемого предмета и предмета, разбираемого на запчасти
	if item == nil or repaired_item == nil then return false end
	if alife():object(item:id()) == nil or alife():object(repaired_item:id()) == nil then return false end

	local itm_name = item:section()
	local rprd_itm_name = repaired_item:section()
	local itm_compat = ""
	local rep_itm_compat = ""

	if sys_ini:line_exist(itm_name, "repair_compatibility") then
		itm_compat = sys_ini:r_string(itm_name, "repair_compatibility")
	elseif sys_ini:line_exist(itm_name.."_repair", "repair_compatibility") then
		itm_compat = sys_ini:r_string(itm_name.."_repair", "repair_compatibility")
	elseif sys_ini:line_exist(itm_name, "repair") then
		local repair_section = sys_ini:r_string(itm_name, "repair")
		if sys_ini:line_exist(repair_section, "repair_compatibility") then
			itm_compat = sys_ini:r_string(repair_section, "repair_compatibility")
		end
	end

	if sys_ini:line_exist(rprd_itm_name, "repair_compatibility") then
		rep_itm_compat = sys_ini:r_string(rprd_itm_name, "repair_compatibility")
	elseif sys_ini:line_exist(rprd_itm_name.."_repair", "repair_compatibility") then
		rep_itm_compat = sys_ini:r_string(rprd_itm_name.."_repair", "repair_compatibility")
	elseif sys_ini:line_exist(rprd_itm_name, "repair") then
		local rprd_repair_section = sys_ini:r_string(rprd_itm_name, "repair")
		if sys_ini:line_exist(rprd_repair_section, "repair_compatibility") then
			rep_itm_compat = sys_ini:r_string(rprd_repair_section, "repair_compatibility")
		end
	end

	if itm_compat == rep_itm_compat and rep_itm_compat ~= "" then return true end
---------------Дополнительная проверка, для новых стволов, на всякий случай--------------------
	if not item:is_weapon_magazined() or not repaired_item:is_weapon_magazined() then return false end
	local ammo_1 = get_string_wq(item:section(), "ammo_class", nil)
	local ammo_2 = get_string_wq(repaired_item:section(), "ammo_class", nil)
	if not ammo_1 or not ammo_2 then return false end
	return ammo_1 == ammo_2
-----------------------------------------------------------------------------------------------
end

function play_repair_sound()
	soundtrack.s_play_no_feedback("scripts\\remkit\\ui_repairweapon_0"..math.random(7))
end

--========================================ОСНОВНОЕ МЕНЮ, ЗАПУСКАЕТСЯ СРАЗУ ПОСЛЕ ЗАПУСКА РЕМКИТА===========================================
rep_slot = 0 --ибо нефиг вызывать из db. Пусть тут будет.

class "remkit" (CUIScriptWnd)

function remkit:__init() super()
	self:InitControls()
	self:InitCallBacks()
end

function remkit:__finalize() end

function remkit:InitControls()
	self:Init(50,50,550,450) --здесь определяем координаты левого верхнего угла и ширину-высоту

	local xml = CScriptXmlInit() --файл-описатель наших элементов
	xml:ParseFile("ui_remkit_wnd.xml")
	xml:InitStatic("back_video", self) --видео на заднем плане
	xml:InitStatic("background", self) --рамка
---------------------------------Кнопки----------------------------------
	self:Register(xml:Init3tButton("window_name", self),"window_name")
	self:Register(xml:Init3tButton("caption", self),"caption")
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)	
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)	
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)	
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)	
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit") --кнопка выхода
-------------------------------------------------------------------------
---------------------определяем доступность кнопок---------------------
	if db.actor:item_in_slot(1) then
		self.btn_1:Enable(true)
	end
	if db.actor:item_in_slot(2) then
		self.btn_2:Enable(true)
	end
	if db.actor:item_in_slot(6) then
		self.btn_3:Enable(true)
	end
	local car = ogse_car_control.get_car_nearby()
	if car and not ogse_car_control.current_car then
		local script_car = car:get_car()
		local car_state = script_car:GetfHealth()
		if car_state < 0.85 then
			self.btn_4:Enable(true)
		end
	end
-------------------------------------------------------------------------
	self.message_box = CUIMessageBoxEx()
	self:Register(self.message_box,"message_box")
end

function remkit:InitCallBacks()
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED, self.rep_s1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED, self.rep_s2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED, self.rep_s6, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED, self.rep_trans, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self) --кнопка выхода
	self:AddCallback("message_box", ui_events.MESSAGE_BOX_OK_CLICKED, self.OnMsgYes, self) --кнопка ОК во всплывающих сообщениях
end

function remkit:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik == DIK_keys.DIK_ESCAPE then --на выход повесим Esc
			self:on_quit()
		end
	end
	return true
end

function remkit:cheat_main()
	local act_item = db.actor:item_in_slot(rep_slot)
	if not act_item then return end
	if not act_item:is_outfit() and not act_item:is_weapon_magazined() then --Предмет не поддаётся ремонту, т.к. не является ни костюмом, ни оружием.
		self.msgbox_id = 1
		self.message_box:Init("message_box_item_not_repaireble")
		self:GetHolder():start_stop_menu(self.message_box, true)
	else
		local rep_item_cond = act_item:condition()
		if rep_item_cond >= 0.95 then --Предмет не нуждается в ремонте, т.к исправен на более чем 95%
			self.msgbox_id = 1
			self.message_box:Init("message_box_item_not_wanted")
			self:GetHolder():start_stop_menu(self.message_box, true)
			return
		elseif rep_item_cond <= 0.1 then --Это уже не починить.
			self.msgbox_id = 1
			self.message_box:Init("message_box_item_not_repaireble")
			self:GetHolder():start_stop_menu(self.message_box, true)
			return
		elseif self.remkit_sel == nil then
			self.remkit_sel = repair_dialog()
		end
		self:GetHolder():start_stop_menu(self.remkit_sel, true)
		self:GetHolder():start_stop_menu(self, true)
		self:ClearCallbacks()
	end
end

function remkit:rep_s1() --ремонт ствола в первом слоте
	rep_slot = 1
	self:cheat_main()
end

function remkit:rep_s2() --ремонт ствола во втором слоте
	rep_slot = 2
	self:cheat_main()
end

function remkit:rep_s6() --ремонт брони
	rep_slot = 6
	self:cheat_main()
end
-------------------------Ремонт транспорта-------------------------
function remkit:rep_trans()
	local car = ogse_car_control.get_car_nearby()
	if car and not ogse_car_control.current_car then
		local s_car = car:get_car()
		local car_state = s_car:GetfHealth()
		local new_state = tonumber(car_state) + 0.5
		if new_state > 1 then
			s_car:SetfHealth(1)
		else
			s_car:SetfHealth(new_state)
		end
		s_car:SetExplodeTime(120000)
		play_repair_sound()
	end
	self:GetHolder():start_stop_menu(self,true)
	self:ClearCallbacks()
end
--------------------------------------------------------------------
function remkit:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	create_repair_kit() 
	self:ClearCallbacks()
end

function remkit:OnMsgYes()
	if self.msgbox_id == 1 then return end
	self.msgbox_id = 0
end
--=============================================================================================================================================

--======================================================МЕНЮ РЕМОНТА БРОНИ И ОРУЖИЯ============================================================
local successful_repair --НЕ УДАЛЯТЬ!
local repaired_item = 0
local item_table
local item_table_index = 0
local need_close = 0

function shorten_name(str)
	if str then
		local out_str = string.gsub(str, game.translate_string("remkit_string1"), game.translate_string("remkit_string2"))
		out_str = string.gsub(out_str, game.translate_string("remkit_string3"), game.translate_string("remkit_string2"))
		out_str = string.gsub(out_str, game.translate_string("remkit_string4"), game.translate_string("remkit_string6"))
		out_str = string.gsub(out_str, game.translate_string("remkit_string5"), game.translate_string("remkit_string7"))
		out_str = string.gsub(out_str, game.translate_string("remkit_string8"), game.translate_string("remkit_string10"))
		out_str = string.gsub(out_str, game.translate_string("remkit_string9"), game.translate_string("remkit_string10"))
		out_str = string.gsub(out_str, game.translate_string("remkit_string11"), game.translate_string("remkit_string13"))
		out_str = string.gsub(out_str, game.translate_string("remkit_string12"), game.translate_string("remkit_string14"))
		return out_str
	end
end


class "select_repair_items" (CUIListItemEx)

function select_repair_items:__init() super()
	self.item_name		= "itemname"
	self:SetWndRect		(0,0,320,22)
	
	local ca = 255
	local cr = 216
	local cg = 186
	local cb = 140
	
	self.itmnum				= CUIStatic	()
	self.itmnum:SetAutoDelete	(true)
	self:AttachChild		(self.itmnum)
	self.itmnum:SetWndRect	(0,0,10,22)
	self.itmnum:SetText		("itemnum")
	self.itmnum:SetFont		(GetFontLetterica16Russian())
	self.itmnum:SetTextColor	(ca,cr,cg,cb)

	self.itmn					= CUIStatic	()
	self.itmn:SetAutoDelete	(true)
	self:AttachChild		(self.itmn)
	self.itmn:SetWndRect		(12,0,150,22)
	self.itmn:SetText			("itemname")
	self.itmn:SetFont			(GetFontLetterica18Russian())
	self.itmn:SetTextColor	(ca,cr,cg,cb)

	self.itmage				= CUIStatic	()
	self.itmage:SetAutoDelete	(true)
	self:AttachChild		(self.itmage)
	self.itmage:SetWndRect	(250,0,40,22)
	self.itmage:SetText		("itemage")
	self.itmage:SetFont		(GetFontLetterica16Russian())
	self.itmage:SetTextColor	(ca,cr,cg,cb)
end


class "repair_dialog" (CUIScriptWnd)

function repair_dialog:__init() super()
	successful_repair = false
	self:InitControls()
	self:InitCallBacks()
	self:FillList()
	if not repaired_item then return end

	local repaired_item_name = game.translate_string(get_inv_name_short(repaired_item:section()))
	repaired_item_name = shorten_name(repaired_item_name)
	self:DrawCurItem(repaired_item, 100, 90)
	self:DrawConditionBar(repaired_item, 100, 130)
	self:DrawCurItemName(repaired_item_name, 100, 45)
end

function repair_dialog:__finalize() end

function repair_dialog:InitControls() --Инициализируем управление формой
	self:Init(50,50,550,450) --здесь определяем координаты левого верхнего угла и ширину-высоту
	local xml = CScriptXmlInit()  --файл-описатель наших элементов
	xml:ParseFile("ui_remkit_sel.xml")
	xml:InitStatic("back_video", self) --видео на заднем плане
	xml:InitStatic("background", self) --рамка
	xml:InitStatic("item_frame1", self) --рамка предмета 1
	xml:InitStatic("bar_frame1", self) --колба предмета 1
	xml:InitStatic("item_frame2", self) --рамка предмета 2
	xml:InitStatic("bar_frame2", self) --колба предмета 2
	xml:InitFrame("list_frame", self) --список предметов
	local ctrl
	ctrl = xml:InitList("list", self)
	ctrl:ShowSelectedItem(true)
	self:Register(ctrl, "list_window")
----------------------------------кнопки----------------------------------
	self:Register(xml:Init3tButton("window_name", self),"window_name")
	self:Register(xml:Init3tButton("caption1", self),"caption1")
	self:Register(xml:Init3tButton("caption2", self),"caption2")
	self:Register(xml:Init3tButton("caption4", self),"caption4")
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit") --кнопка выхода
--------------------------------------------------------------------------
	self.message_box = CUIMessageBoxEx()
	self:Register(self.message_box,"message_box")
end

function repair_dialog:InitCallBacks()
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED, self.rep_btn, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
	self:AddCallback("list_window", ui_events.LIST_ITEM_CLICKED, self.OnListItemClicked, self)
	self:AddCallback("list_window", ui_events.WINDOW_LBUTTON_DB_CLICK, self.OnListItemDbClicked, self)
	self:AddCallback("message_box",	ui_events.MESSAGE_BOX_OK_CLICKED, self.OnMsgYes, self)
end

function repair_dialog:FillList()
	if db.actor:item_in_slot(rep_slot) then
		repaired_item = db.actor:item_in_slot(rep_slot)
	end

	item_table = 0
	item_table = {}
	item_table_index = 0
	db.actor:inventory_for_each(item_for_repair) --перебираем инвентарь в поиске совместимых стволов для ремонта

	local item_in_slot_1 = db.actor:item_in_slot( 1 ) and db.actor:item_in_slot( 1 ):id() or false
	local item_in_slot_2 = db.actor:item_in_slot( 2 ) and db.actor:item_in_slot( 2 ):id() or false
	local item_in_slot_6 = db.actor:item_in_slot( 6 ) and db.actor:item_in_slot( 6 ):id() or false

	local i = 1
	while (item_table[i]) do
		local s_item = item_table[i]
		local s_item_section = s_item:section()
		local _item_num = "" .. i .. ""
		local name_to_cut = game.translate_string(get_inv_name_short(s_item_section))
		local _item_name = shorten_name(name_to_cut)
		
		--[=[local len_point = 29
		if string.len(_item_name)>len_point then
			_item_name=string.sub(_item_name,1,len_point)
			_item_name=_item_name.."..."
		end--]=]
		
		if s_item:id() == item_in_slot_1 
		or s_item:id() == item_in_slot_2 then
			_item_name = _item_name..game.translate_string("ogse_repair_in_use_text")
		elseif s_item:id() == item_in_slot_6 then
			_item_name = _item_name..game.translate_string("ogse_repair_equipped_text")
		end
		
		local _item_cond = s_item:condition()*100
		if _item_cond ~= 100 then _item_cond = string.format("%.1f", _item_cond) end
		_item_cond = "[" .. _item_cond .. "%]"
		self:AddItemToList(_item_num, _item_name, _item_cond)
		i = i+1
	end
end

function item_for_repair(item, npc) --Сравниваем предмет с ремонтируемым
	if not npc:is_in_ruck( item ) then return end

	if item:section() == repaired_item:section() then --если секции предмета совпадают, то доп. проверка не нужна.
		item_table_index = item_table_index + 1
		item_table[item_table_index] = item
	elseif compatibility_item(item, repaired_item) then --если не совпадают, проверяем дополнительно.
		item_table_index = item_table_index + 1
		item_table[item_table_index] = item
	end
end

function repair_dialog:OnListItemClicked()
	local list_box = self:GetListWnd("list_window")
	if list_box:GetSize() == 0 then return end
	local itm_index = list_box:GetSelectedItem()
	local item = list_box:GetItem(itm_index)
	if not item then return end

	self.btn_4:Enable(true)

	local destr_item_name = item.itmn:GetText()
	local destr_item_index = tonumber(item.itmnum:GetText())
	local destr_item_st = item_table[destr_item_index]

	self:DrawConditionRemBar(destr_item_st, 300, 130)
	self:DrawCurRemItemName(destr_item_name, 300, 45)
	self:DrawCurRemItem(destr_item_st, 300, 90)
end

function repair_dialog:OnListItemDbClicked()
	self:rep_btn()
end

function repair_dialog:rep_btn()
	local list = self:GetListWnd("list_window")	
	if list:GetSize()==0 then --Нет предметов для разбора на запчасти.
		self.msgbox_id = 1
		self.message_box:Init("message_box_out_of_item")
		self:GetHolder():start_stop_menu(self.message_box, true)
		return
	end
	local index = list:GetSelectedItem()
	if index == -1 then --Выберите предмет для разбора на запчасти.
		self.msgbox_id = 1
		self.message_box:Init("message_box_select_item")
		self:GetHolder():start_stop_menu(self.message_box, true)
		return
	end

	local item = list:GetItem(index)
	local destr_item_index = tonumber(item.itmnum:GetText())
	local destr_item = item_table[destr_item_index]
	if destr_item:condition() < 0.1 then --вещь разбита в хлам, не подходит.
		self.msgbox_id = 1
		self.message_box:Init("message_box_invalid_item")
		self:GetHolder():start_stop_menu(self.message_box, true)
		return
	else
		if use_repair_kit(rep_slot,destr_item) then --если ремонт прошел удачно
			successful_repair = true
			self.msgbox_id = 1
			self.message_box:Init("message_box_repair_success")
			self:GetHolder():start_stop_menu(self.message_box, true)
		else --если неудачно
			self.msgbox_id = 1
			self.message_box:Init("message_box_item_not_repaireble")
			self:GetHolder():start_stop_menu(self.message_box, true)
		end
		need_close = 1
	end
end	

function repair_dialog:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	--log3("--Called OnKeyboard. key: [%s], action: [%s]", dik, keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik == DIK_keys.DIK_ESCAPE then --на выход повесим Esc
			self:on_quit()
		end
	elseif keyboard_action == ui_events.WINDOW_KEY_RELEASED then
		if dik == DIK_keys.DIK_ESCAPE then
			if self.msgbox_id == 1 then 
				if need_close == 1 then
					need_close = 0
					self:on_quit()
					--log1("--Repair menu closed by esc!")
				end
			end
		end
	end
	return true
end

function repair_dialog:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	if not successful_repair then --если ремонт не удался, вернем ремкит в инвентарь.
		create_repair_kit() 
	end
	self:ClearCallbacks()
end

function repair_dialog:OnMsgYes()
	if self.msgbox_id == 1 then 
		if need_close == 1 then
			need_close = 0
			self:on_quit()
		end
		return
	end
	self.msgbox_id = 0
end

function repair_dialog:AddItemToList(item_num, item_name, item_cond) --добавление предмета в список разбираемых
	local _itm = select_repair_items()
	_itm.itmnum:SetText (item_num)
	_itm.itmn:SetText (item_name)
	_itm.itmage:SetText (item_cond)
	local list_box = self:GetListWnd("list_window")
	list_box:AddItem (_itm)
end

function get_inv_name_short(section)
	return get_string(section,"inv_name_short")
end

--***********************************************Рисуем ремонтируемый предмет***************************************************
---------------------Название предмета, который ремонтируем--------------------
function repair_dialog:DrawCurItemName(item, x, y)
	local w = self.item_name
	if not w then
		self.item_name = CUI3tButton()
		w = self.item_name
		w:SetWindowName("item_name")
		w:SetAutoDelete(true)
		self:AttachChild(w) 
	end
	w:SetFont(GetFontLetterica16Russian())
	w:SetTextColor (255,216,186,140)
	--[=[local len_point = 25
	if string.len(item)>len_point then
		item=string.sub(item,1,len_point)
		item=item.."..."
	end--]=]
	w:SetText(item)
	w:Init(x-100,y,200,10)
end
--------------------------------------------------------------------------------
function repair_dialog:DrawCurItem(item, x, y)
	local item_section = item:section()
	local x_g,y_g,x_sco,y_sco,x_sil,y_sil
	local xa,ya,wa,ha
	local sect_addon
	local has_gl, has_scope, has_sil = false, false, false

	if item:is_weapon_magazined() then
		if ogse_wpn_utils.get_grenade_launcher_status( item )	== 2 and ogse_wpn_utils.get_grenade_launcher_flag( item )	then has_gl		= true end
		if ogse_wpn_utils.get_scope_status( item )				== 2 and ogse_wpn_utils.get_scope_flag( item )				then has_scope	= true end
		if ogse_wpn_utils.get_silencer_status( item )			== 2 and ogse_wpn_utils.get_silencer_flag( item )			then has_sil	= true end
	end
------------------------------Рисуем сам ствол---------------------------
	local tx,ty,tw,th
	tx=get_u32(item_section, "inv_grid_x")*50
	ty=get_u32(item_section, "inv_grid_y")*50
	tw=get_u32(item_section, "inv_grid_width")*50
	th=get_u32(item_section, "inv_grid_height")*50
	x = x-(tw/4)
	y = y-(th/4)

	local a = self.cur_textur
	if not a then
		self.cur_textur = CUIStatic()
		a = self.cur_textur
		a:SetWindowName("cur_textur")
		a:SetAutoDelete(true)  
		CIconParams( item_section ):set_shader( a )
		self:AttachChild(a)
	end
    --a:SetOriginalRect(tx,ty,tw,th)
	a:Init(x,y,tw/2,th/2)
---------------------------------------------------------------------------
--------------------------Рисуем подствольник------------------------------
	if has_gl then
		sect_addon = get_string(item_section,"grenade_launcher_name")
		x_g=x+(get_u32(item_section, "grenade_launcher_x")/2)
		y_g=y+(get_u32(item_section, "grenade_launcher_y")/2)
		xa=get_u32(sect_addon, "inv_grid_x")*50
		ya=get_u32(sect_addon, "inv_grid_y")*50
		wa=get_u32(sect_addon, "inv_grid_width")*50
		ha=get_u32(sect_addon, "inv_grid_height")*50

		local b = self.grenade_textur
		if not b then
			self.grenade_textur=CUIStatic()
			b = self.grenade_textur
			b:SetWindowName("grenade_textur")
			b:SetAutoDelete(true)  
			CIconParams( sect_addon ):set_shader( b )
			self:AttachChild(b)
		end
		--b:SetOriginalRect(xa,ya,wa,ha)
		b:Init(x_g,y_g,wa/2,ha/2)
	end
---------------------------------------------------------------------------
--------------------------Рисуем оптический прицел-------------------------
	if has_scope then
		sect_addon=get_string(item_section,"scope_name")
		x_sco=x+(get_u32(item_section, "scope_x")/2)
		y_sco=y+(get_u32(item_section, "scope_y")/2)
		xa=get_u32(sect_addon, "inv_grid_x")*50
		ya=get_u32(sect_addon, "inv_grid_y")*50
		wa=get_u32(sect_addon, "inv_grid_width")*50
		ha=get_u32(sect_addon, "inv_grid_height")*50
  
		local b = self.scope_textur
		if not b then
			self.scope_textur=CUIStatic()
			b = self.scope_textur
			b:SetWindowName("scope_textur")
			b:SetAutoDelete(true)  
			CIconParams( sect_addon ):set_shader( b )
			self:AttachChild(b)
		end
		--b:SetOriginalRect(xa,ya,wa,ha)
		b:Init(x_sco,y_sco,wa/2,ha/2)
	end
---------------------------------------------------------------------------
----------------------------Рисуем глушитель-------------------------------
	if has_sil then 	
		sect_addon=get_string(item_section,"silencer_name")
		x_sil=x+(get_u32(item_section, "silencer_x")/2)
		y_sil=y+(get_u32(item_section, "silencer_y")/2)
		xa=get_u32(sect_addon, "inv_grid_x")*50
		ya=get_u32(sect_addon, "inv_grid_y")*50
		wa=get_u32(sect_addon, "inv_grid_width")*50
		ha=get_u32(sect_addon, "inv_grid_height")*50

		local b = self.silencer_textur
		if not b then
			self.silencer_textur=CUIStatic()
			b = self.silencer_textur
			b:SetWindowName("silencer_textur")
			b:SetAutoDelete(true)  
			CIconParams( sect_addon ):set_shader( b )
			self:AttachChild(b)
		end
		--b:SetOriginalRect(xa,ya,wa,ha)
		b:Init(x_sil,y_sil,wa/2,ha/2)
	end
end
---------------------------------------------------------------------------
-------------------Полоска состояния оружия, которое чиним-------------------
function repair_dialog:DrawConditionBar(item, x, y)
	local cond_bar_width = (math.floor(item:condition()*100)*1.1)
	x = x - 55
	local c = self.cond_bar
	if not c then
		self.cond_bar = CUIStatic()
		c = self.cond_bar
		c:SetWindowName("cond_bar")
		c:SetAutoDelete(true)
		c:InitTexture("ui\\ui_hud")
		c:SetOriginalRect(347,207,110,10)   
		c:SetStretchTexture(true)
		self:AttachChild(c) 
	end
	if cond_bar_width > 109 then
		cond_bar_width = 109
	elseif cond_bar_width <= 0 then
		cond_bar_width = 1
	end
    c:SetOriginalRect(346+cond_bar_width,207,1,10)   
	c:Init(x,y,cond_bar_width,10)
end
------------------------------------------------------------------------------
--*********************************************************************************************************************

--********************************************Рисуем разбираемый предмет***********************************************
---------------------Название предмета, который разбираем-----------------------
function repair_dialog:DrawCurRemItemName(de_item, x, y)
	local w = self.item_name_rem
	if not w then
		self.item_name_rem = CUI3tButton()
		w = self.item_name_rem
		w:SetWindowName("item_name_rem")
		w:SetAutoDelete(true)
		self:AttachChild(w) 
	end
	w:SetFont(GetFontLetterica16Russian())
	w:SetTextColor (255,216,186,140)
	--[=[local len_point = 25
	if string.len(de_item)>len_point then
		de_item=string.sub(de_item,1,len_point)
		de_item=de_item.."..."
	end]=]
	w:SetText(de_item)
	w:Init(x-100,y,200,10)
end
--------------------------------------------------------------------------------
function repair_dialog:DrawCurRemItem(de_item, x, y)
	if self.cur_rem_textur then self.cur_rem_textur:DetachFromParent() self.cur_rem_textur = nil end
	if self.grenade_rem_textur then self.grenade_rem_textur:DetachFromParent() self.grenade_rem_textur = nil end
	if self.scope_rem_textur then self.scope_rem_textur:DetachFromParent() self.scope_rem_textur = nil end
	if self.silencer_rem_textur then self.silencer_rem_textur:DetachFromParent() self.silencer_rem_textur = nil end

	local di_section = de_item:section()
	local x_g,y_g,x_sco,y_sco,x_sil,y_sil
	local xa,ya,wa,ha
	local sect_addon
	local has_gl, has_scope, has_sil = false, false, false

	if de_item:is_weapon_magazined() then
		if ogse_wpn_utils.get_grenade_launcher_status( de_item )== 2 and ogse_wpn_utils.get_grenade_launcher_flag( de_item ) then has_gl	= true end
		if ogse_wpn_utils.get_scope_status( de_item )			== 2 and ogse_wpn_utils.get_scope_flag( de_item )			 then has_scope	= true end
		if ogse_wpn_utils.get_silencer_status( de_item )		== 2 and ogse_wpn_utils.get_silencer_flag( de_item )		 then has_sil	= true end
	end
------------------------------Рисуем сам ствол---------------------------
	tx=get_u32(di_section, "inv_grid_x")*50
	ty=get_u32(di_section, "inv_grid_y")*50
	tw=get_u32(di_section, "inv_grid_width")*50
	th=get_u32(di_section, "inv_grid_height")*50
	x = x-(tw/4)
	y = y-(th/4)

	local a = self.cur_rem_textur
	if not a then
		self.cur_rem_textur = CUIStatic()
		a = self.cur_rem_textur
		a:SetWindowName("cur_rem_textur")
		a:SetAutoDelete(true)  
		CIconParams( di_section ):set_shader( a )
		self:AttachChild(a)
	end
	--a:SetOriginalRect(tx,ty,tw,th)
	a:Init(x,y,tw/2,th/2)
-----------------------------------------------------------------------------
------------------------------Рисуем подствольник----------------------------
	if has_gl then
		sect_addon=get_string(di_section,"grenade_launcher_name")
		x_g=x+(get_u32(di_section, "grenade_launcher_x")/2)
		y_g=y+(get_u32(di_section, "grenade_launcher_y")/2)
		xa=get_u32(sect_addon, "inv_grid_x")*50
		ya=get_u32(sect_addon, "inv_grid_y")*50
		wa=get_u32(sect_addon, "inv_grid_width")*50
		ha=get_u32(sect_addon, "inv_grid_height")*50

		local b = self.grenade_rem_textur
		if not b then
			self.grenade_rem_textur=CUIStatic()
			b = self.grenade_rem_textur
			b:SetWindowName("grenade_rem_textur")
			b:SetAutoDelete(true)  
			CIconParams( sect_addon ):set_shader( b )
			self:AttachChild(b)
		end
		--b:SetOriginalRect(xa,ya,wa,ha)
		b:Init(x_g,y_g,wa/2,ha/2)
	end
------------------------------------------------------------------------------
---------------------------Рисуем оптический прицел---------------------------
	if has_scope then
		sect_addon=get_string(di_section,"scope_name")
		x_sco=x+(get_u32(di_section, "scope_x")/2)
		y_sco=y+(get_u32(di_section, "scope_y")/2)
		xa=get_u32(sect_addon, "inv_grid_x")*50
		ya=get_u32(sect_addon, "inv_grid_y")*50
		wa=get_u32(sect_addon, "inv_grid_width")*50
		ha=get_u32(sect_addon, "inv_grid_height")*50

		local b = self.scope_rem_textur
		if not b then
			self.scope_rem_textur =CUIStatic()
			b = self.scope_rem_textur 
			b:SetWindowName("scope_rem_textur ")
			b:SetAutoDelete(true)  
			CIconParams( sect_addon ):set_shader( b )
			self:AttachChild(b)
		end
		--b:SetOriginalRect(xa,ya,wa,ha)
		b:Init(x_sco,y_sco,wa/2,ha/2)
	end
------------------------------------------------------------------------------
------------------------------Рисуем глушитель--------------------------------
	if has_sil then 	
		sect_addon=get_string(di_section,"silencer_name")
		x_sil=x+(get_u32(di_section, "silencer_x")/2)
		y_sil=y+(get_u32(di_section, "silencer_y")/2)
		xa=get_u32(sect_addon, "inv_grid_x")*50
		ya=get_u32(sect_addon, "inv_grid_y")*50
		wa=get_u32(sect_addon, "inv_grid_width")*50
		ha=get_u32(sect_addon, "inv_grid_height")*50

		local b = self.silencer_rem_textur
		if not b then
			self.silencer_rem_textur=CUIStatic()
			b = self.silencer_rem_textur
			b:SetWindowName("silencer_rem_textur")
			b:SetAutoDelete(true)  
			CIconParams( sect_addon ):set_shader( b )
			self:AttachChild(b)
		end
		--b:SetOriginalRect(xa,ya,wa,ha)
		b:Init(x_sil,y_sil,wa/2,ha/2)
	end
end
-----------------------------------------------------------------------------
-----------------Полоска состояния оружия, которое разбираем------------------
function repair_dialog:DrawConditionRemBar(de_item, x, y)
	local cond_rem_bar_width = (math.floor(de_item:condition()*100)*1.1)
	x = x - 55
	local c = self.cond_rem_bar
	if not c then
		self.cond_rem_bar = CUIStatic()
		c = self.cond_rem_bar
		c:SetWindowName("cond_rem_bar")
		c:SetAutoDelete(true)
		c:InitTexture("ui\\ui_hud")
		c:SetOriginalRect(347,207,110,10)   
		c:SetStretchTexture(true)
		self:AttachChild(c) 
	end
	if cond_rem_bar_width > 109 then
		cond_rem_bar_width = 109
	elseif cond_rem_bar_width <= 0 then
		cond_rem_bar_width = 1
	end
	c:SetOriginalRect(346+cond_rem_bar_width,207,1,10)   
	c:Init(x,y,cond_rem_bar_width,10)
end
-------------------------------------------------------------------------------
--**************************************************************************************************************************
--=============================================================================================================================================
