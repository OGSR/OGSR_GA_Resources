-- -*- mode: lua; coding: windows-1251-dos -*-

--' Ключем является группировка персонажа. Значением является таблица, содержашая имена секций предметов.
local item_by_community = {}
local community_list = { "def_box", "small_box_generic", "small_box_ussr", "small_box_nato", "small_box_army", "small_box_science", "big_box_generic", "big_box_dungeons", "big_box_arsenal"}	

--' Множители и минимаксы для выпадения вещей в зависимости от уровня
local mul_by_level = {}
local count_by_level = {}

--' Предметы, относящиеся к патронам. Их надо спаунить другим методом.
local ammo_sections = {}

local configured = false

function configure()
	for k,v in pairs(community_list) do
        --' Необходимо заполнить таблицу
        item_by_community[v] = {}
        if sys_ini:section_exist(v) then
		    local n = sys_ini:line_count(v)
		    local id, value = "", ""
		    for i=0,n-1 do
			    result, id, value = sys_ini:r_line(v,i)
                item_by_community[v][id] = tonumber(value)
		    end
        end
    end

	--' Множители и минимаксы для выпадения вещей в зависимости от уровня
    local level_name = level.name()

	if not sys_ini:section_exist(level_name) then
		level_name = "default"
	end

    local n = sys_ini:line_count(level_name)
	local id, value = "", ""
	for i=0,n-1 do
		result, id, value = sys_ini:r_line(level_name,i)
        mul_by_level[id] = tonumber(value)
	end        

    local item_count_section = "item_count_" .. level.get_game_difficulty()
    local n = sys_ini:line_count(item_count_section)
	for i=0,n-1 do
		result, id, value = sys_ini:r_line(item_count_section,i)
        --' Нужно распарсить value в два значения
        local t = parse_nums(value)
		if t[1] == nil then
            abort("Error on [sys_ini] declaration. Section [%s], line [%s]", item_count_section, tostring(id))
        end
        local min = t[1]
        local max = t[2]
        if max == nil then
            max = min
        end

        if mul_by_level[id] == nil then
            mul_by_level[id] = 0
        end

        min = tonumber(min) * mul_by_level[id]
        max = tonumber(max) * mul_by_level[id]

        count_by_level[id] = {min = min, max = max}
	end        
	--' Предметы, относящиеся к патронам. Их надо спаунить другим методом.
    local n = sys_ini:line_count("ammo_sections")
	local id, value = "", ""
	for i=0,n-1 do
		result, id, value	= sys_ini:r_line("ammo_sections",i)
        ammo_sections[id] = true
	end
end

class "ph_item_box"
function ph_item_box:__init(obj)
	if not configured then
		configure()
		configured = true
	end

	self.obj = obj

	local ini = self.obj:spawn_ini()
	self.items = r_items(ini, "drop_box", "items")

	local community	= get_string( "drop_box", "community", "def_box", ini )
	--' Доспавниваем необходимое количество итемов:
    --' Необходимо составить список объектов которые могут быть заспавнены для персонажа
    self.random_items = item_by_community[community]
	--' Если комьюнити задана не верно, то ставим дефолт и срем в лог.
	if not self.random_items then 
		self.random_items = item_by_community["def_box"]
	end
end

function ph_item_box:spawn_items()
	if self.items then
		for k,v in pairs(self.items) do
			create_obligatory_items(self.obj, v.section, v.count)
		end
		return
	end

    for k, rnd in pairs(self.random_items) do		
		--' По каждому объекту необходимо получить количество
		local number = math.ceil(math.random(count_by_level[k].min, count_by_level[k].max))
		if number > 0 and rnd > 0 then
			--' Необходимо заспавнить нужное количество.
			create_items(self.obj, k, number, rnd)
		end
    end
end	

--' Функция спавнит необходимое число предметов
function create_items(obj, section, number, rnd)
    --log3("create_items %s of %s", tostring(number), tostring(section))
	local position = obj:center()

    if ammo_sections[section] then
		if math.random() <= rnd	then
			local num_in_box = get_u32(section, "box_size")
			while number > num_in_box or number > 0 do
				local sammo = alife():create_ammo(section, position, obj:level_vertex_id(), obj:game_vertex_id(), 65535, number < num_in_box and number or num_in_box)
				local _sammo = alife():object(sammo.id)
				alife():use_ai_locations(_sammo, false)
				number = number - num_in_box
			end
		end
    else
        for i=1,number do
			--Проверяем вероятность появить каждый объект в отдельности
            if math.random() <= rnd then
				local sitem = alife():create(section, position, obj:level_vertex_id(), obj:game_vertex_id())
				local _sitem = alife():object(sitem.id)
				alife():use_ai_locations(_sitem, false)
			end
        end
    end    
end

function r_items( spawn_ini, section, line)
	if spawn_ini:line_exist( section, line ) then
		--' если default-ов больше, чем значений в ini, то забить недостающие последним значением из ini
		local t = parse_names( spawn_ini:r_string( section, line ) )
		local n = table.getn( t )
		
		local ret_table = {}
		local k = 1
		while k <= n do
			local item = {}
			item.section = t[k]
			-- Проверяем что это не последняя запись
			if t[k+1] ~= nil then
				local p = tonumber(t[k+1])
				-- проверяем что вторым числом задана вероятность, а не другая секция спавну
				if p then
					-- забиваем число
					item.count = p
					k = k + 2
				else
					-- забиваем дефолт 1
					item.count = 1
					k = k + 1
				end
			else
				item.count	 = 1
				k = k + 1
			end
			table.insert(ret_table, item)	
		end
		return ret_table
	end
	return nil
end

function create_obligatory_items(obj, item , count)
	for i = 1,count do
		local position = obj:center()
		local sitem = alife():create(item,	
				position,
				obj:level_vertex_id(),	
				obj:game_vertex_id())
		local sitem = alife():object(sitem.id)
		alife():use_ai_locations(sitem, false)
	end
end