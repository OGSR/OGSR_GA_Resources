-- -*- mode: lua; coding: windows-1251-dos -*-

-- Space restrictor binder
-- Чугай Александр
-----------------------
-- Примечания:
--	обновлений у рестрикторов нету, поэтому для тех, кому надо,
--	актёр вызывает искусственно на своём обновлении


function bind( obj )
	if not string.find(obj:name(), "_hide_restrictor") then --Рестрикторы укрытий биндить не нужно!
		obj:bind_object( restrictor_binder( obj ) )
	end
end


class "restrictor_binder" ( object_binder )
function restrictor_binder:__init( obj ) super( obj )
  self.initialized = false
  self.loaded      = false
  self.sm          = ogse_signals.get_mgr()
end


function restrictor_binder:reload( section )
  object_binder.reload(self, section)
end


function restrictor_binder:reinit()
  object_binder.reinit( self )
  db.storage[ self.object:id() ] = {}
  self.st = db.storage[ self.object:id() ]
end


function restrictor_binder:net_spawn( data )
  if not alife():object(self.object:id()) then return true end --KRodin: я был удивлён, но, оказалось, бывает и такое.

  if not object_binder.net_spawn( self, data ) then
    return false
  end

  db.add_zone( self.object )
  -- Не регистрироваться на апдейты, если у объекта в customdata
  -- нет секции logic вообще.
  --
  -- ОП-2: Функция
  --
  -- xr_logic.get_customdata_or_ini_file(self.object, "<customdata>")
  --
  -- при отсутствии у рестриктора кастомдаты -- возвращает "пустую" логику:
  -- return ini_file([[scripts\dummy.ltx]]), в которой секция logic есть.
  -- Поэтому в updatable_binders в варианте от ПЫСов, несмотря на их
  -- коммент выше, регистрируются на апдейты АБСОЛЮТНО ВСЕ
  -- рестрикторы. Даже те, у которых нет кастомдаты вообще.  Поэтому
  -- условие проверки доработано на проверку строки active ~= nil и
  -- отсутствие строки cfg.
  local char_ini = xr_logic.get_customdata_or_ini_file(
    self.object, "<customdata>"
  )
  if
    xr_logic.logic_not_empty( self.object, char_ini )
	or self.object:section() == "water_restrictor" --Рестрикторы воды надо апдейтить и без logic!!!
  then
	--log3("--Restrictor subscribed to update: [%s]", self.object:name())
    self.subscribed = {
      [ "signal" ] = "on_update",
      [ "fun"    ] = self.actor_update,
      [ "self"   ] = self,
	  [ "script_name" ] = "bind_restrictor.actor_update." .. self.object:name(),
    }
    self.sm:subscribe( self.subscribed )
	--log3("[%s(%s)] self.object:get_shape_radius(): [%s]", script_name(), self.object:name(), self.object:get_shape_radius())
    self.radius = self.object:get_shape_radius() --Для точного рассчёта расстояния до рестрикторов.
  --else
	--log3("!!Restrictor NOT subscribed to update: [%s], logic is empty!", self.object:name())    
  end
  return true
end


function restrictor_binder:net_destroy()
  local st = db.storage[ self.object:id() ]
  if st.active_scheme then
    xr_logic.issue_event( self.object, st[st.active_scheme], "net_destroy" )
  end
  db.del_zone( self.object )
  if self.subscribed then
    self.sm:unsubscribe( self.subscribed )
    self.subscribed = nil
  end
  db.storage[ self.object:id() ] = nil
  object_binder.net_destroy( self )
end


-- вызывается из обновления актёра!
function restrictor_binder:actor_update( delta )
  if not self.initialized and db.actor then
    self.initialized = true
    xr_logic.initialize_obj(
      self.object, self.st, self.loaded, db.actor, modules.stype_restrictor
    )
  end

  if self.object:section() == "water_restrictor" then
    ogse_water_restrictor.update(self.object) --Апдейт рестрикторов воды
  else
    if not self:is_nil_active_section() then
      xr_logic.issue_event(
        self.object, self.st[self.st.active_scheme], "update", delta
      )
    end
    -- пустая логика могла быть пустой изначально, или могла переключиться
    -- активная секция после вызова xr_logic.issue_event(). Поэтому проверим
    -- лишний раз здесь.
    if self:is_nil_active_section() then
      -- Рестрикторы, у которых логика вышла в nil, снимаем с апдейта.
	  ASSERT( self.subscribed, "not subscribed: %s", self.object:name() )
      self.sm:unsubscribe( self.subscribed )
      self.subscribed = nil
	  return
    end
  end

  local dist = self.object:position():distance_to(db.actor:position()) - self.radius --Точный рассчёт расстояния от актора до рестриктора
  self.sm:reschedule(
    --( dist < 15 and 200 ) or ( dist < 30 and math.random(1000, 2000) ) or math.random( 5000, 6000 )
    --dist < 15 and 200 or math.random(1000, 2000)
	200 --KRodin: некоторые сюжетные рестрикторы ведут себя неадекватно при более редком обновлении.
  )
end


function restrictor_binder:is_nil_active_section()
  return
    self.st.active_section == nil
    or self.st.active_section == "sr_idle@nil"
end


function restrictor_binder:net_save_relevant()
  return true
end


function restrictor_binder:save( packet )
	object_binder.save( self, packet )
	xr_logic.save_obj( self.object, packet, not self.initialized )
end


function restrictor_binder:load( reader )
	self.loaded = true
	object_binder.load( self, reader )
	xr_logic.load_obj( self.object, reader )
end
