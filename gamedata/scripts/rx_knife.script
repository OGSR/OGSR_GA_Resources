---- AI Additions ----
---- Rulix aka Bak ----
---- 8.3.2010,6.02.2016

knife_actions_permitted = {		-- экшены, с которых разрешено переключение на action_knife_attack
[stalker_ids.action_combat_planner] = true,
--[xr_actions_id.combat_zombied_base] = true,
--[xr_actions_id.combat_zombied_base+1] = true,
--[xr_actions_id.combat_camper_base] = true,
--[xr_actions_id.combat_camper_base+1] = true,
--[xr_actions_id.stohe_camper_base+1] = true,
--[xr_actions_id.stohe_camper_base+1] = true,
[xr_actions_id.combat_monolith_base] = true,
}

local function printf(s, ...)
--	rx_utils.printf("kn:"..s,...)
end

local kn_ini = ini_file([[misc\ai_additions\knife.ltx]])
ASSERTX(kn_ini:section_exist("main"),"no kn_ini")
local knife_sets = {weapon_to_spawn = rx_utils.read_from_ini(kn_ini,"main","weapon_to_spawn","wpn_knife",1),
					spawn_chance = rx_utils.read_from_ini(kn_ini,"main","spawn_chance",0.3),
					communities = {},
					ranks = {},
					forbidden_factions = rx_utils.parse_list(kn_ini,"main","forbidden_factions",true),
					forbidden_npcs = rx_utils.collect_sections(kn_ini,{"forbidden_npcs"},nil,true),
					attack_courage = rx_utils.collect_sections(kn_ini,{"attack_courage"},true),
					mutant_defend = rx_utils.collect_sections(kn_ini,{"mutant_defend"},nil,true)}

for _,v in ipairs(rx_utils.get_rank_list()) do
	if kn_ini:section_exist(v) then
		knife_sets.ranks[v] = {addhit_actor = rx_utils.read_from_ini(kn_ini,v,"addhit_actor",0.1),
								addhit_stalker = rx_utils.read_from_ini(kn_ini,v,"addhit_stalker",0.1),
								addhit_mutant = math.max(rx_utils.read_from_ini(kn_ini,v,"addhit_mutant",0.1),0.03)}
	end
end
for _,v in ipairs(rx_utils.get_communities_list()) do
	knife_sets.communities[v] = {courage = rx_utils.read_from_ini(kn_ini,v,"courage",1),
								mutant_hunt = rx_utils.read_from_ini(kn_ini,v,"mutant_hunt",true,0)}
end
kn_ini = nil

local courage_mult = 1.0
local melee_slot = 0
local check_prd = 1000
local max_pursue_dist = 40*40
--local actor_hit_anm = [[camera_effects\actor_move\down.anm]]
local actor_hit_ppe = "fire_hit.ppe"

local sneak_attack = 1
local close_attack = 2
local mutant_hunt = 3
local mutant_defend = 4

local attack_clsids = {}
for name,cls_id in pairs(rx_utils.creatures_clslist) do
	attack_clsids[cls_id] = knife_sets.attack_courage[name]
end
knife_sets.attack_courage = nil

local mutant_defend_clsids = {}
for name,cls_id in pairs(rx_utils.creatures_clslist) do
	mutant_defend_clsids[cls_id] = knife_sets.mutant_defend[name]
end
knife_sets.mutant_defend = nil

local small_mutant_clsids = {
	[clsid.dog_s] = true,
	[clsid.flesh_s] = true,
	[clsid.cat_s] = true,
	[clsid.snork_s] = true,
	[clsid.tushkano_s] = true,
}

targets = {}

local function is_low_target(trg)
	local cls_id = trg:clsid()
	if IsStalker(nil,cls_id) then
		if trg:character_community() == "zombied" then
			return trg:wounded()
		end
		return trg:body_state() == move.crouch
	end
	if cls_id == clsid.zombie_s then
		return trg:bone_position("bip01_pelvis").y+0.2 > trg:bone_position("bip01_head").y
	end
	return small_mutant_clsids[cls_id] == true
end

local function is_easy_target(trg,cls_id)
	return cls_id == clsid.zombie_s and trg:bone_position("bip01_pelvis").y+0.2 > trg:bone_position("bip01_head").y
	or cls_id == clsid.script_stalker and trg:character_community() == "zombied" and xr_wounded.is_wounded(trg)
end

local function remove_target(npc_id,st,delay)
	if st.target and targets[st.target] == npc_id then
		targets[st.target] = nil
	end
	if delay then
		st.delay = time_global()+delay
	end
	st.target = nil
end

local function get_target(npc,be,st)
	local be_id,be_pos,be_lvid = be:id(),be:position(),be:level_vertex_id()
	local dist = npc:position():distance_to(be_pos)
	if targets[be_id] or dist > 14 or not npc:accessible(be_lvid) or level.vertex_position(be_lvid):distance_to_sqr(be_pos) > 2 then
		return false
	end
	local courage = st.eva.courage
	local bec = be:clsid()
	if not (attack_clsids[bec] or mutant_defend_clsids[bec]) then
		return false
	end
	if is_easy_target(be,bec) then
		courage = courage+20
	elseif be:wounded() then
		return false
	end
	local knife_active,knife_only = npc:active_slot() == melee_slot
	if knife_active then
		courage = courage+15
		local wpna,wpnb = npc:active_item(),npc:best_weapon()
		if wpna and wpnb and wpna:id() == wpnb:id() then
			knife_only = true
			courage = courage+30
		end
	end
	if be:critically_wounded() then
		courage = courage+5
	end
	local be_see_me = be:see(npc)
	if be_see_me then
		courage = courage-10
	end
	if not be_see_me and courage > 40 and npc:body_state() == move.crouch and dist < 6 and npc.health > 0.7 and npc:see(be) then
		st.target = be_id
		st.type = sneak_attack
		return true
	end
	if IsStalker(nil,bec) then
		if (dist > 4 or knife_active) and npc:see(be) and courage > attack_clsids[bec]+4*dist then
			local npc_wpn,be_wpn = npc:active_item(),be:active_item()
			if courage > 75 or knife_only or not (not knife_active and be_wpn and rx_utils.item_is_fa(be_wpn) and npc_wpn and npc_wpn:get_ammo_in_magazine() ~= 0 and be_wpn:get_ammo_in_magazine() ~= 0) then
				st.target = be_id
				st.type = close_attack
				st.timer = st.timer+6000
				return true
			end
		end
	else
		if not knife_active and math.random() > 0.8 then
			return false
		end
		local bee = be:get_enemy()
		bee = bee and bee:id() == npc:id()
		if st.eva.cmhunt and attack_clsids[bec] and be.health < npc.health and courage > attack_clsids[bec]+3*dist and not (be_see_me and bee) and npc.health > 1-courage/150 then
			st.target = be_id
			st.type = mutant_hunt
			st.timer = st.timer+6000
			return true
		elseif bee and (knife_only or mutant_defend_clsids[bec] and dist < 13 and npc.health > 0.5 and (knife_active or dist > 5) and courage > 37+dist) then
			st.target = be_id
			st.type = mutant_defend
			st.timer = st.timer+4000
			return true
		end
	end
	return false
end

class "evaluator_knife_attack" (property_evaluator)
function evaluator_knife_attack:__init(npc,name,storage) super (nil,name)
	self.st = storage
	storage.delay = 0
	storage.timer = 0
	storage.eva = self
	self.check_timer = 0
	local comm = npc:character_community()
	self.courage = rx_ai.get_var(npc,"courage")
	if not self.courage then
		self.courage = math.random(25,npc:character_rank()*rx_utils.rank_unit*23+53) -- 25-60..25-90
		rx_ai.save_var(npc,"courage",self.courage)
	end
	self.courage = self.courage*knife_sets.communities[comm].courage*courage_mult
	self.cmhunt = knife_sets.communities[comm].mutant_hunt
end

function evaluator_knife_attack:evaluate()
	if self.st.delay > time_global() then
		return false
	end
	local npc = self.object
	if not npc:item_in_slot(melee_slot) then	--  or npc:animation_count() ~= 0
		remove_target(npc:id(),self.st,spawn_knife(npc) and 3000 or 30000)
		return false
	end
	local st = self.st
	local be = npc:best_enemy()
	if not be then
		if st.target and level.object_by_id(st.target) then
			return true
		end
		remove_target(npc:id(),st,2000)
		return false
	end
	if knife_actions_permitted[npc:motivation_action_manager():current_action_id()] ~= true then
		remove_target(npc:id(),self.st,2500)
		return false
	end
	-- проверка имеющейся цели
	local target = st.target and level.object_by_id(st.target)
	if not target and st.target then
		remove_target(npc:id(),st)
	end
	local tg = time_global()
	if target then
		local npc_id = npc:id()
		if self.storage:property(stalker_ids.property_danger_grenade) then
			remove_target(npc_id,st,3000)
			return false
		end
		local target_pos = target:position()
		local dist = target_pos:distance_to(npc:position())
		if targets[st.target] then
			if targets[st.target] ~= npc_id then
				remove_target(npc_id,st)
				target = nil
			elseif st.target ~= be:id() and dist > 5 then	-- or not npc:accessible(target_pos)
				remove_target(npc_id,st,6000)
				return false
			else
				if st.type == sneak_attack and target:see(npc) then
					if dist < self.courage/9 then
						st.type = close_attack
					else
						remove_target(npc_id,st,15000)
						return false
					end
				elseif st.type == close_attack and self.courage < 15+4*dist then
					remove_target(npc_id,st,15000)
					return false
				elseif st.type == mutant_hunt and dist > 15 then
					remove_target(npc_id,st,12000)
					return false
				elseif st.type == mutant_defend and dist > 16 or (npc.health < 0.2 and dist > st.fire_dist*1.2) then -- or not (target:get_enemy() and target:get_enemy():id() == npc_id)
					remove_target(npc_id,st,12000)
					return false
				end
				return true
			end
		else
			if dist > 15 then
				remove_target(npc_id,st)
				target = nil
			end
		end
	end
	-------------------------------
	if self.check_timer > tg then
		return target ~= nil
	end
	self.check_timer = tg+check_prd
	if npc:critically_wounded() or npc.health < 0.35 then
		return false
	end
	return get_target(npc,be,st)
end


class "action_knife_attack" (action_base)
function action_knife_attack:__init(npc,action_name,storage) super (nil,action_name)
	self.st = storage
	self.rankt = knife_sets.ranks[ranks.get_obj_rank_name(npc)]
end
function action_knife_attack:hit_callback(amount,dir,who)
	if self.st.type == mutant_defend and self.st.eva.cmhunt and self.st.target == who:id() and attack_clsids[who:clsid()] then
		self.st.type = mutant_hunt
		rx_sound.set_sound_play(self.object:id(),"knife_attack_mutant")
	end
end
function action_knife_attack:initialize()
	action_base.initialize(self)
	local npc = self.object
	self.st.timer = time_global()+80000
	self.start_time = time_global()
	self.fire_time = time_global()
	self.mental_time = 0
	local wm = npc:get_wm(true)
	if wm then
		wm:disable()
	end
	npc:set_desired_position()
	npc:set_desired_direction()
	npc:set_mental_state(anim.danger)
	npc:set_movement_type(move.run)
	npc:set_path_type(game_object.level_path)
	npc:set_detail_path_type(move.criteria)
	npc:set_sight(look.path_dir,nil,0)
	npc:movement_enabled(true)
	state_mgr.lock(npc,true)
	targets[self.st.target] = npc:id()
	self.ddr = math.random() > 0.5
	self.start_point = npc:position()
	local knife = npc:item_in_slot(melee_slot)
	if not knife then
		self.st.timer = 0
		return
	end
	if knife:get_ammo_in_magazine() == 0 then
		knife:set_ammo_elapsed(1)	-- нужно зарядить нож	--rx_utils.get_mag_size(knife:section())
	end
	self.st.fire_dist = math.min(rx_utils.read_from_ini(nil,knife:section(),"fire_distance",1.5),2)
	self.hit_type = rx_utils.read_from_ini(nil,knife:section(),"hit_type","wound",1)
	self.hit_type = hit[self.hit_type] or hit.wound
	rx_ai.subscribe_for_events(npc,self)
end

function action_knife_attack:execute()
	action_base.execute(self)
	local npc,tg,st = self.object,time_global(),self.st
	local npc_id = npc:id()
	if st.timer < tg then
		remove_target(npc_id,st,10000)
		return
	end
	local knife = npc:item_in_slot(melee_slot)
	local target = level.object_by_id(st.target)
	local target_pos = target:position()
	if self.start_point:distance_to_sqr(target_pos) > max_pursue_dist then
		remove_target(npc_id,st,20000)
		return
	end
	local dist = target_pos:distance_to(npc:position())
	if not target:alive() then
		if not self.relax_time then
			if dist < 4 then
				rx_sound.set_sound_play(npc_id,"enemy_death")
			end
			if npc:best_enemy() then
				remove_target(npc_id,st)
				get_target(npc,npc:best_enemy(),st)
			else
				self.relax_time = tg+math.random(500,1500)
				if target:bone_position(get_string(target:section(), "bone_head", "bip01_head")):distance_to(npc:bone_position("bip01_neck")) < 1.5 then
					npc:set_item(object.fire1,knife)
				else
					npc:set_item(object.aim1,knife)
				end
				npc:set_sight(target,true,true)
				npc:set_dest_level_vertex_id(target:level_vertex_id())
			end
		elseif self.relax_time > tg then
			if self.relax_time > tg+500 then
--				npc:set_item(object.aim1,knife)
			else
				state_mgr.set_state(npc,"idle")
			end
		else
			self.relax_time = nil
			remove_target(npc_id,st)
		end
		return
	end
	if dist > 5 and not npc:best_enemy() then
		remove_target(npc_id,st)
		return
	end
	local acti = npc:active_item() and npc:active_slot() == melee_slot
	if acti and dist < st.fire_dist+(st.type == mutant_defend and 1.4 or 0.8) then
		if self.fire_time < tg then
			if self.fire_time ~= 0 and dist <= st.fire_dist and npc:see(target) then
				self:additional_hit(target)
			end
			self.fire_time = tg+800
		end
		npc:set_item(object.fire1,knife,5,300)
	else
		if st.type == close_attack and target:see(npc) then
			rx_sound.set_sound_play(npc_id,"knife_attack")
		elseif st.type == mutant_defend then
			rx_sound.set_sound_play(npc_id,"monster_defend")
		elseif st.type == mutant_hunt then
			rx_sound.set_sound_play(npc_id,"knife_attack_mutant")
		end
		npc:set_body_state(move.standing)
		npc:set_movement_type(move.run)
		npc:set_item(object.aim1,knife)
		self.fire_time = 0
	end
	if not acti then
		if self.start_time+4000 < tg then
			remove_target(npc_id,st,15000)
			return
		end
	elseif st.type == sneak_attack then
		npc:set_body_state(move.crouch)
		npc:set_mental_state(anim.danger)
	elseif st.type == mutant_hunt then
--		npc:set_body_state(move.standing)
		if self.mental_time < tg then
			if dist < 1.5 and self.mental ~= anim.danger then
				self.mental_time = tg+1000
				self.mental = anim.danger
			elseif dist > 3.5 and self.mental ~= anim.panic then
				self.mental_time = tg+1200
				self.mental = anim.panic
			end
			npc:set_mental_state(self.mental)
		end
	elseif st.type == close_attack then
--		npc:set_body_state(move.standing)
		if dist > 3 then
			npc:set_mental_state(anim.panic)
			npc:set_sight(look.path_dir,nil,0)
		elseif dist < 2 then
			npc:set_mental_state(anim.danger)
		end
	elseif st.type == mutant_defend then
		npc:set_body_state(move.standing)
		npc:set_mental_state(anim.danger)
		if dist < 7 then
			npc:set_movement_type(move.run)
		else
			npc:set_movement_type(move.walk)
		end
	end
	local vertex = target:level_vertex_id()
	local target_actor = rx_utils.is_actor(target)
	local on_target = dist+0.3 < st.fire_dist and self.tlvid == vertex
	if on_target and is_low_target(target) then
		npc:set_body_state(move.crouch)
		npc:set_mental_state(anim.danger)
	end
	local dodge
	self.tlvid = vertex
	if on_target and (target:wounded() or is_easy_target(target,target:clsid())) then
--		npc:set_sight(target,true,true)
		npc:set_sight(look.fire_point,target:bone_position(get_string(target:section(), "bone_head", "bip01_head")))
		npc:set_dest_level_vertex_id(npc:level_vertex_id())
		return
	elseif st.type == mutant_defend or on_target and (st.type == mutant_hunt or st.type == close_attack and target_actor) then	--target:active_slot() ~= melee_slot for COP?
		vertex = self:get_dodge_vertex(target_pos,target:direction())
		dodge = true
	end
	if target_actor and npc:path_completed() and dist > st.fire_dist+0.1 and self.start_time ~= tg then
		remove_target(npc_id,st,15000)
		return
	end
	if npc:mental_state() == anim.panic and not on_target then
		npc:set_sight(look.path_dir,nil,0)
--	elseif on_target or IsStalker(target) and not target_actor then
--		npc:set_sight(look.fire_point,target:bone_position(get_string(target:section(), "bone_head", "bip01_head")))
--		npc:set_sight(look.fire_point,target:bone_position(rx_utils.get_fire_bone(target:section(),"head")))
	elseif dodge then
		npc:set_sight(target,true,false)
		if target_actor then
			npc:set_movement_type(move.walk)
		end
	else
		npc:set_sight(look.fire_point,target:bone_position(get_string(target:section(), "bone_head", "bip01_head")))
	end
	vertex = utils.send_to_nearest_accessible_vertex(npc,vertex)
	if st.type ~= mutant_defend and level.vertex_position(vertex):distance_to_sqr(target_pos) > (target_actor and 6.2 or 10) then
		remove_target(npc_id,st,10000)
	end
end

function action_knife_attack:finalize()
	action_base.finalize(self)
	local npc = self.object
	if not npc:alive() then
		remove_target(npc:id(),self.st)
		return
	end
	local target = not self.relax_time and self.st.target and level.object_by_id(self.st.target)
	if target and not target:alive() and target:position():distance_to(npc:position()) < 3.5 then
		rx_sound.set_sound_play(npc:id(),"enemy_death")
	end
	remove_target(npc:id(),self.st)
	local wm = npc:get_wm(true)
	if wm then
		wm:enable()
	end
	npc:set_sight(look.direction,npc:direction(),0)
	npc:set_item(object.idle,npc:active_item())
	npc:set_mental_state(anim.danger)
	npc:set_movement_type(move.walk)
	state_mgr.lock(npc,false)
	self.mental = nil
	self.ddr = nil
	self.tlvid = nil
	self.relax_time = nil
	self.start_point = nil
	rx_sound.block_alarm_sound(npc)
	rx_ai.process_postponed_setup(npc:id())
	rx_ai.unsubscribe_from_events(npc:id(),self)
end

function action_knife_attack:additional_hit(target)
	local npc = self.object
	local power = 0
	local cls = target:clsid()
	if cls == clsid.script_stalker then
		power = self.rankt.addhit_stalker
	elseif rx_utils.is_actor(nil,cls) then
		power = self.rankt.addhit_actor
	else
		power = self.rankt.addhit_mutant
	end
	if rx_utils.is_actor(nil,cls) then
		if actor_hit_anm then
			level.add_cam_effector(actor_hit_anm,944,false,"")
		end
		if actor_hit_ppe then
			level.add_pp_effector(actor_hit_ppe,943,false)
			level.set_pp_effector_factor(943,0.1,0.3)
		end
	end
	if power == 0 then
		return
	end
	local hi = hit()
	if math.random() < 0.1 or yaw(npc:direction(),target:direction()) < 0.6 then
		hi:bone(rx_utils.get_fire_bone(target:section(),"head"))
	else
		hi:bone(rx_utils.get_fire_bone(target:section(),"torso"))
	end
	hi.type = self.hit_type
	hi.power = power
	hi.impulse = 10
	hi.draftsman = npc
	hi.direction = target:center():sub(npc:center())
	target:hit(hi)
end

function action_knife_attack:get_dodge_vertex(o,d)
	local npc = self.object
	local trgdir = vector():sub(o,npc:position())
	local lvid = npc:level_vertex_id()
	if yaw(trgdir,d) < 0.6 then
		return lvid
	end
	local dir = vector_rotate_y(trgdir,self.ddr and 60 or 300)
	local res = npc:vertex_in_direction(lvid,dir,2)
	if res == lvid then
		self.ddr = not self.ddr
		dir = vector_rotate_y(trgdir,self.ddr and 60 or 300)
		res = npc:vertex_in_direction(lvid,dir,2)
		if res ~= lvid and level.vertex_position(res):distance_to(level.vertex_position(lvid)) < 2.5 then
			res = lvid
		end
	end
	return res
end

function spawn_knife(npc)
	if knife_sets.spawn_chance > 0 and not rx_ai.get_var(npc,"kn_spawn") then
		rx_ai.save_var(npc,"kn_spawn",true)
		local knife = npc:item_in_slot(melee_slot)
		if not knife and npc:best_weapon() and math.random() < knife_sets.spawn_chance and not rx_utils.IsTrader(npc) then
			local money = math.max(0,npc:money()-300)
			npc:give_money(-npc:money()+money)
			alife():create(knife_sets.weapon_to_spawn,npc:position(),npc:level_vertex_id(),npc:game_vertex_id(),npc:id())
			return true
		end
	end
end

evid_knife_attack = rx_ai.base_id+35
actid_knife_attack = evid_knife_attack

knife_actions_permitted[actid_knife_attack] = true
rx_ai.reset_protected_actions[actid_knife_attack] = true
rx_ai.death_disable_evas[evid_knife_attack] = false

function add_to_binder(npc,ini,scheme,section,storage)
	local manager = npc:motivation_action_manager()
	if knife_sets.forbidden_factions[npc:character_community()] or knife_sets.forbidden_npcs[npc:profile_name()] or knife_sets.forbidden_npcs[npc:name()] or knife_sets.forbidden_npcs[npc:section()] or not npc:alive() or rx_utils.IsTrader(npc) then
		manager:add_evaluator(evid_knife_attack,property_evaluator_const(false))
		return
	end
	manager:add_evaluator(evid_knife_attack,evaluator_knife_attack(npc,"evaluator_knife_attack",storage))
	local action = action_knife_attack(npc,"knife_attack",storage)
	action:add_precondition(world_property(stalker_ids.property_alive,true))
	action:add_precondition(world_property(xr_evaluators_id.sidor_wounded_base,false))
	action:add_precondition(world_property(stalker_ids.property_danger_grenade,false))
	action:add_precondition(world_property(xr_evaluators_id.state_mgr+3,true))	--!!
	if rx_gl then
		action:add_precondition(world_property(rx_gl.evid_gl_fire,false))
	end
	if rx_bandage then
		action:add_precondition(world_property(rx_bandage.evid_bandage,false))
	end
	if xrs_grenade then
		action:add_precondition(world_property(xrs_grenade.evid_crazy_grenadier,false))
		action:add_precondition(world_property(xrs_grenade.evid_aaa_grenade,false))
		action:add_precondition(world_property(xrs_grenade.evid_psyh,false))
	end

	if xr_combat_companion then
		action:add_precondition(world_property(xr_combat_companion.prop_combat,false))	
	end

--	if blowout_scheme and blowout_scheme.evid_outside then
--		action:add_precondition(world_property(blowout_scheme.evid_outside,false))
--	end
	action:add_precondition(world_property(evid_knife_attack,true))
	action:add_effect(world_property(evid_knife_attack,false))
	manager:add_action(actid_knife_attack,action)
	-- включение в планировщик
	for i,id in ipairs({stalker_ids.action_combat_planner,stalker_ids.action_danger_planner,xr_actions_id.alife}) do
		action = manager:action(id)
		action:add_precondition(world_property(evid_knife_attack,false))
	end
end

function set_scheme(npc,ini,scheme,section_logic)
	xr_logic.assign_storage_and_bind(npc,ini,scheme,scheme)
end

function reset_scheme(npc,scheme,st,section)
	local enabled
	if st.ini:line_exist(section,"can_use_knife") then
		enabled = st.ini:r_bool(section,"can_use_knife")
	else
		enabled = rx_utils.read_from_ini(st.ini,st.section_logic,"can_use_knife",true,0)
	end
	if not enabled then
		st.rx_knife.delay = math.huge
	elseif st.rx_knife.delay == math.huge then
		st.rx_knife.delay = time_global()+4000
	end
end

--[[
function disable_scheme(npc,scheme)
	local st = db.storage[npc:id()][scheme]
	if st then
		st.enabled = false
	end
end]]
