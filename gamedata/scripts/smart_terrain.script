

--Smart Terrain (механизм, организовывающий всех сталкеров и некоторых монстров в сцены)
--Чугай Александр
--!без симуляции не работает!

local check_period = 10000

local monster_classes
local disagreed, agreed, agreed_exclusive = 0, 1, 2
local smart_section = "smart_terrains"
local smart_terrains = {}
--[[ список всех серверных объектов смартов, которые зарегистрированы в симуляторе
Формат:
	smart_terrains = {
		level_name = { id=obj, id=obj, ... },
		level_name = { id=obj, id=obj, ... },
		...
	}
]]
exclusives = {}
--[[ увеличивается на 1 в каждом se_monster.se_monster:fill_exclusives() и se_stalker.se_stalker:fill_exclusives()
Формат:
	exclusives = {
		smart_name1 = <number of ?available? exclusive positions in smart_name1>,
		smart_name2 = <number of ?available? exclusive positions in smart_name2>,
		...
	}
]]


----------------------------------------------------------------------------------------------------------------------
-- Класс "se_smart_terrain". Обеспечивает поддержку smart terrain в ОФЛАЙНЕ.
-- Унаследован от скриптовой зоны.
----------------------------------------------------------------------------------------------------------------------
class "se_smart_terrain" ( cse_alife_smart_zone )
function se_smart_terrain:__init( section ) super( section )
	self.registred = false
	self.duration_end = game.CTime() -- убрать
	self.idle_end     = game.CTime() -- убрать
	--
	self.obj_exclusive_tbl = {} --В этой табличке будем временно хранить значения, возвращенные функцией obj_accepts_smart_terrain, чтоб не вызывать её три раза подряд
end

-- использовалась в вырезанном оффлайновом комбате
function se_smart_terrain:detect_probability()
	return 0
end

--[=[
function se_smart_terrain:print()
	log1( "NPCs:" )
	if self.npc_info then
		for id, v in pairs( self.npc_info ) do
			log3( "    %d %s", id, tostring(v.name) )
		end
	end
end
--]=]

-- сохранение
function se_smart_terrain:STATE_Write( packet )
--	log1( "se_smart_terrain::STATE_Write called!" )
	cse_alife_smart_zone.STATE_Write( self, packet )

--	self:print()

	utils.w_CTime( packet, self.duration_end ) -- убрать
	utils.w_CTime( packet, self.idle_end ) -- убрать

	if self.gulag_working then
		packet:w_bool( true )

		self.gulag:save_common( packet )

		local n = 0

		for id, v in pairs( self.npc_info ) do
			n = n + 1
		end

		packet:w_u8( n )

		for id, v in pairs( self.npc_info ) do
			packet:w_u16  ( id )
			packet:w_u8   ( v.o_group )
			packet:w_u8   ( v.o_squad )
			packet:w_bool ( v.exclusive )
			utils.w_CTime ( packet, v.stay_end )

			self.gulag:save_obj( packet, id )
		end

		packet:w_bool ( self.population_locked )
	else
		packet:w_bool( false )
	end
end

-- восстановление
function se_smart_terrain:STATE_Read( packet, size )
--	log1( "se_smart_terrain::STATE_Read called!" )
	cse_alife_smart_zone.STATE_Read( self, packet, size )

--	log1( "before read_params" )
--	self:print()
	
	self:read_params()

	-- под LevelEditor не пытаться читать из пакета ничего
	if editor() then
		return
	end

--	log3( "name=%s, script_version=%d", self:name(), self.script_version )

	self.duration_end = utils.r_CTime( packet ) -- убрать
	self.idle_end     = utils.r_CTime( packet ) -- убрать

	self.gulag_working = packet:r_bool()

	-- если есть работающий гулаг
	if self.gulag_working then
		self.check_time = time_global()

		self.gulag:load_common( packet )

		local n = packet:r_u8()
		local o_id, o

--		log3( "npc_info=%s", tostring( n ) )

		for i = 1, n do
			o_id = packet:r_u16()
			self.npc_info[o_id] = {}
			o = self.npc_info[o_id]

			o.o_group   = packet:r_u8()
			o.o_squad   = packet:r_u8()
			o.exclusive = packet:r_bool()
			o.stay_end  = utils.r_CTime( packet )

			self.gulag:load_obj( packet, o_id )
		end

		self.population_locked = packet:r_bool()
	end

--	log3( "after read [%s]", self:name())
--	self:print()
end

-- инициализировать работу смарт террейна.
-- после этой функции смарт ПОЛНОСТЬЮ работоспособен.
-- вызывается из всех мест, которые могут вызвать другие объекты:
--   se_smart_terrain:enabled()
--   se_smart_terrain:update()
--   xr_gulag.setup_gulag_and_logic_on_spawn()
--   xr_gulag.get_npc_gulag()
--   xr_gulag.get_gulag_by_name()
--   xr_gulag.get_gulag_by_sid()

function se_smart_terrain:initialize_if_needed()
	if not self.initialized then

		self:get_se_objs()

		self:preserve_exclusives()

		self.initialized = true
	end
end


function se_smart_terrain:is_initialized()
  return self.initialized
end


-- зарезервировать места для эксклюзивных персонажей
-- выполняется строго один раз как часть initialize_if_needed
function se_smart_terrain:preserve_exclusives()
	local e = exclusives[self:name()]

	if e then
--'	log3( "[smart_terrain %s] exclusives=%d", self:name(), e )

	self.exclusives = e
--'	log3("[smart_terrain %s] preserve_exclusives [%s]", self:name(), tostring(self.gulag.capacity_non_exclusive))
		self.gulag.capacity_non_exclusive = self.gulag.capacity_non_exclusive - e

		exclusives[self:name()] = nil
	else
		self.exclusives = 0
	end
end

-- получить серверные объекты персонажей
-- выполняется строго один раз как часть initialize_if_needed
function se_smart_terrain:get_se_objs()
  local sim = alife()
  local del = {}
  for id, v in pairs( self.npc_info ) do
    local obj = sim:object( id )
    if obj then
      self:fill_npc_info( obj, v )
    else
      log3(
        "!![smart_terrain %s] can't get server object id=%s", self:name(), id
      )
      table.insert( del, id )
    end
  end
  for _, id in ipairs( del ) do
    self.npc_info[ id ] = nil
    self.gulag:removeObject( id )
  end
end

-- заполнить информацию о персонаже
-- у монстров нету метода profile_name()
-- TODO передавать в предикаты не npc_info, а объект
function se_smart_terrain:fill_npc_info( obj, npc_info )
	if not npc_info then
		npc_info = {}
	end

	npc_info.se_obj       = obj

	npc_info.class_id     = obj:clsid()
	npc_info.section_name = obj:section_name()
	npc_info.name         = obj:name()
	npc_info.story_id     = obj.m_story_id
	npc_info.community    = self:get_obj_community( obj )
	npc_info.profile_name = obj.profile_name and obj:profile_name()
	npc_info.rank         = obj:rank()

	npc_info.group        = obj:g_group()
	npc_info.squad        = obj:g_squad()
	npc_info.team         = obj:g_team()

	if npc_info.profile_name then
		npc_info.is_sniper = string.find( npc_info.profile_name, "sniper" ) ~= nil
	end
	npc_info.is_sniper_name = string.find( npc_info.name, "sniper" ) ~= nil

	local t               = obj.smart_terrain_conditions
	if t then
		t = t[self:name()]
	end

	npc_info.cond         = t
	return npc_info
end

-- возвращает:
-- а) если сталкер: группировку сталкера и true
-- б) если монстр:  вид монстра и false
-- TODO: заменить на глобальный функционал
function se_smart_terrain:get_obj_community( obj )
	local cls = obj:clsid()

	if cls == clsid.script_stalker then
		return obj:community(), true
	else
		return monster_classes[cls], false
	end
end


function se_smart_terrain:dsh_override_params()
  local dsh_override_opts = {
    [ "capacity" ] = {
      [ "getter" ] = function( ... ) return get_float(  ... ) end,
      [ "setter" ] = function( v ) self.gparams.capacity = v end,
    },
    [ "communities" ] = {
      [ "getter" ] = function( ... ) return get_string( ... ) end,
      [ "setter" ] = function( v ) self.communities = v end,
    },
    [ "cond" ] = {
      [ "getter" ] = function( ... ) return get_string( ... ) end,
      [ "setter" ] = function( cond, sect )
        self.gparams.cond = xr_logic.parse_condlist( nil, sect, "cond", cond )
      end,
    },
--[==[ --KRodin: у меня это пока не используется
    [ "stay" ] = {
      [ "getter" ] = function( ... ) return get_numbers( ... ) end,
      [ "setter" ] = function( v )
        self.gparams.stay_min = v[ 1 ]
        if table.getn( v ) > 1 then
          self.gparams.stay_max = v[ 2 ]
        else
          self.gparams.stay_max = v[ 1 ]
        end
      end,
    },
--]==]
    [ "type" ] = {
      [ "getter" ] = function( ... ) return get_string( ... ) end,
      [ "setter" ] = function( v ) self.gparams.type = v end,
    },
    [ "on_cleanup" ] = {
      [ "getter" ] = function( ... ) return get_string( ... ) end,
      [ "setter" ] = function( v ) self.on_cleanup = v end,
    },
  }
  local sect = "dsh.gulag.override." .. self:name()
  if sys_ini:section_exist( sect ) then
    for k, v in pairs( dsh_override_opts ) do
      if sys_ini:line_exist( sect, k ) then
        local value = v.getter( sect, k )
        v.setter( value, sect )
      end
    end
  end
end


-- инициализация.
-- чтение custom data.
-- вызывается строго один раз как часть STATE_Read
function se_smart_terrain:read_params()
	local ini  = self:spawn_ini()
	local sect = "smart_terrain"

	if not ini:section_exist( sect ) then
		sect = "gulag1"

		if not ini:section_exist( sect ) then
			log3( "!![se_smart_terrain:read_params] [%s] no configuration!", self:name() )
			self.disabled = true
			return
		end
	end

	ASSERT(ini:line_exist( sect, "type" ), "[smart_terrain %s] type is not specified", self:name() )

	local gp       = {}

	self.npc_info  = {}          -- group и squad для каждого npc
	self.gparams   = gp          -- настройки гулага

	gp.type        = get_string( sect, "type",   nil, ini )
	gp.preset_name = get_string( sect, "preset", nil, ini )
	gp.capacity    = get_float( sect, "capacity", 100, ini ) -- ёмкость. а настоящая ёмкость = min(эта_ёмкость, ёмкость гулага)
	gp.squad       = get_float( sect, "squad", nil, ini )
	gp.respawn     = get_string( sect, "respawn", nil, ini )
	self.communities = get_string( sect, "communities", nil, ini )
	self.rank_inc_min = get_u32( "smart_terrain_rank_change", "min" )
	self.rank_inc_max = get_u32( "smart_terrain_rank_change", "max" )

	local cond_str = get_string( sect, "cond",    nil, ini )
	if cond_str then
		gp.cond = xr_logic.parse_condlist( nil, sect, "cond", cond_str)
	end

	local groups_str = get_string( sect, "groups",  nil, ini )
	if groups_str then
		gp.groups = parse_nums(groups_str)
	end
	--
	self:dsh_override_params()
	--
	if self.communities then
		local t = parse_names( self.communities )
		for i, v in ipairs( t ) do
			if not self.accepted_communities then self.accepted_communities = {} end
			self.accepted_communities[v] = true
		end
	end

	self.population_locked = false

	self.gulag = xr_gulag.gulag( self, self.gparams.type, self.gparams.squad, self.gparams.groups, self.npc_info, self.gparams.capacity )

	self.gulag_working = false
end

-- таблица level_groups задаёт что-то вроде карты, где локации сгруппированы в области.
-- Неписи пойдут в смарт с другого уровня, только если этот уровень находится в одной группе со смартом.
-- Вероятно, надо глянуть на карту и убедиться, что эти группы заданы осмысленно.
-- как минимум, группы должны обеспечивать связность графа в пределах локаций одной группы, и также
-- надо согласовывать место спавна неписей и группы, иначе заспавненные неписи не смогут 
-- попасть в свой смарт. 
-- если локация не прописана в этой таблице, то она будет автоматически изолирована.
local level_groups = {
    l01_escape = "group1",
    l02_garbage = "group1",
    l03_agroprom = "group1",
    l03u_agr_underground = "group1",
    l04_darkvalley = "group1",
    l04u_labx18 = "group1",
    l05_bar = "group1",
    l06_rostok = "group1",
    l07_military = "group1",
    l08_yantar = "group1",
    l08u_brainlab = "group1",
    l10_radar = "group1",
    l10u_bunker = "group1",
    l11_pripyat = "group1",
    l12_stancia = "group3",
    l12u_sarcofag = "group3",
    l12u_control_monolith = "group3",
    l12_stancia_2 = "group3",
	l09_deadcity_ogse = "group1",
	l13_generators_ogse = "group3",
	k01_darkscape_ogse = "group1",
	l22_marsh = "group1",
	l23_x9 = "group3"
}

function is_same_level_group( l1, l2 )
  local g1 = level_groups[ l1 ] or l1
  local g2 = level_groups[ l2 ] or l2
  return g1 == g2
end

--[[
Подходит ли объект гулагу?
1) если объект не согласен сюда идти, то smart terrain его не возьмёт
2) если объект согласен идти куда угодно, то проверить, есть ли ещё места, подходит ли он гулагу,
   подходит ли он хоть на одну работу
3) если объект согласен идти только в этот смарт, то принимаем даже если нету места (он вытеснит кого-то), проверить,
   подходит ли он гулагу, подходит ли он хоть на одну работу
------------
Второй аргумент - результат работы функии obj_accepts_smart_terrain - тип согласия объекта на
вступление в этот смарт.
Вызывается как часть enabled
]]
function se_smart_terrain:smart_terrain_accepts_obj( obj, obj_agreement )
	if obj_agreement == disagreed then -- объект в этот смарт идти не хочет
--		log3("[%s] disagreed", obj:name())
		return false
	end

	local is_exclusive = obj_agreement == agreed_exclusive
	-- в любом случае, если хочет идти только в этот, или если готов без условий и при этом гулаг не заполнен полностью
	if is_exclusive or self.gulag:get_non_exclusive_population() < self.gulag.capacity_non_exclusive then
		local community, is_stalker = self:get_obj_community( obj )
		--
		--Если в кастомдате смарта есть перечень допустимых группировок и непись не попадает в эту группировку
		if self.accepted_communities and not self.accepted_communities[community] then
			return false
		end
		--
        --Проверка что смарттеррейн и НПС находятся в одном кластере уровней
		local npc_level_name = game_graph():valid_vertex_id( obj.m_game_vertex_id ) and object_level_name(obj) or ""
		if not is_same_level_group( object_level_name(self), npc_level_name ) then
			--log3( "~~[%s] gulag [%s] is not in same level group for [%s] (%s, %s)", script_name(), self.gulag.name, obj:name(), object_level_name(self), npc_level_name )
            return false -- с этого уровня в этот смарт идти нельзя
        end
		--
		-- выполнить проверку, заданную скриптом для конкретного уровня (обычно соответствие типа гулага и параметров непися)
		if not xr_gulag.checkNpc( community, is_stalker, self.gparams.type, obj:rank(), obj ) then
			return false
		end
		--
		--Если непись не эксклюзивный, проверяем, не враждебен ли он тем, кто уже есть в смарте. Если враждебен - не принимаем.
		if is_stalker and not is_exclusive then
			if xr_gulag.isGulagEnemy( self.gulag.name, obj ) then
				--log3( "~~[%s] gulag [%s] is enemy for [%s]", script_name(), self.gulag.name, obj:name() )
				return false
			end
		end
		-- если есть работа
		return self.gulag:is_there_any_suitable_job( self:fill_npc_info( obj ), is_exclusive )
	end
	return false -- если не эксклюзив для этого смарта и места нет, то не подходит
end

--[[ подходит ли гулаг объекту?
у объекта в custom data прописаны условия для некоторых smart_terrains:
	<smart_terrain_name1> = <condlist1>
	<smart_terrain_name2> = <condlist2>
	...
Если для какого-то smart_terrain условие выполнилось, он называется эксклюзивным.
Если у объекта появился хоть один эксклюзивный smart terrain, то он будет согласен идти только в него.
Если не появилось ни одного эксклюзивного, то он согласен идти в любой.
Функция возвращает одно из трёх значений:
disagreed        - в этот не идёт
agreed_exclusive - идёт только в этот
agreed           - согласен идти в этот на неэкслюзивной основе
]]
function se_smart_terrain:obj_accepts_smart_terrain( obj )
	local conds = obj.smart_terrain_conditions
	if conds then -- если вообще есть какие-то специальные условия насчёт смартов
		local done = true
		if xr_logic.pick_section_from_condlist( db.actor_proxy, obj, conds["none"]) then
			return disagreed -- явно прописано, что не идёт ни в какой смарт
		elseif xr_logic.pick_section_from_condlist( db.actor_proxy, obj, conds[self:name()] ) then
			return agreed_exclusive -- идёт только в этот смарт
		elseif xr_logic.pick_section_from_condlist( db.actor_proxy, obj, conds["any"] ) then
			done = false -- разрешили идти в любой смартend
		end
		if done then
			return disagreed -- в этот не идёт
		end
	end
	-- здесь имеем: эксклюзивов нет, явного запрета тоже нет
	--
	-- Если объекту запрещено переходить в online и эксклюзивные
	-- смарты недоступны, то не пускаем его никуда. Это исключает
	-- переброску отключенных до (или после) определённого события
	-- людей и мутантов в другой неэксклюзивный смарт.
	--
	--if not obj:can_switch_online() then return disagreed end --старая проверка
	if obj.spawner and not xr_logic.pick_section_from_condlist( db.actor_proxy, obj, obj.spawner ) then
		return disagreed
	end

	return agreed -- просто согласен идти в этот смарт без обязаловки
end


-- может ли объект быть добавлен в smart terrain?
-- вызывается симулятором при поиске задания для объекта/группы.
-- если объект - группа, то вернёт true только если все объекты в группе вернут true
function se_smart_terrain:enabled(obj)
	-- DEBUG
	if self.disabled then
--		log3("[smart_terrain %s] DISABLED obj=%s (self.disabled)", self:name(), obj:name())
		return false
	end

	-- если всё это делаем в первый раз
	self:register_if_needed() -- проинитим ...вообще-то это должно с гарантией происходить при создании смарта движком,
	self:initialize_if_needed() -- но на всякий случай...

	-- если гулаг активен (по cond_list из кастомдаты смарта) и не заблокировано добавление персонажей
	if self:is_gulag_available() and not self.population_locked then
		local a = self:obj_accepts_smart_terrain( obj ) --если смарт подходит неписю
		local b = self:smart_terrain_accepts_obj( obj, a ) --и непись подходит смарту
		if b then
			if a == agreed_exclusive then
				self.obj_exclusive_tbl[obj.id] = true --сразу запомним результат, чтоб не вызывать одну и ту же функцию три раза подряд
			end
			return true
		end
	end
	return false
end

-- возвращает меру подходящести персонажа смарттерейну.
-- вызывается для всех смарттерейнов, которые вернули true из enabled
-- для того, чтобы выбрать тот единственный, в который персонаж всё-таки пойдёт.
-- критерии:
--   1) если объект уже бывал в других смартах, то чем больше свободных работ на уровне этого смарта, тем лучше
--   2) иначе ближе - лучше
-- на основе это функции принимается решение для непися (не смарта), т.е. здесь непись выбирает себе смарт
-- для какого смарта число больше, туда и пойдёт
function se_smart_terrain:suitable( obj )
  if self.obj_exclusive_tbl[obj.id] then --Повысить подходящесть эксклюзивного смарттеррейна
    return 100000 --Сразу возвращаем, зачем ещё что-то проверять, если это заведомо больше всех
  end
  --
  if obj.level_name ~= self.level_name then
    -- смарт на другой локации будет привлекательнее смарта на локации непися.
    -- Полагаю, это приведет к большей движухе.
    if self.level_name == level.name() then
      -- пусть с других локаций первым делом идут к актору
      return math.random( 201, 300 )
    else
      return math.random( 101, 200 )
    end
  end

  return math.random( 100 )
end

------------ добавить npc в smart terrain.
-- после того, как движок с помощью suitable выбрал подходяший смарт, он регистрирует непися в нём
-- с помощью этой функции:
-- если места нету или нету свободных подходящих работ, то
-- вытолкнуть из этого smart terrain с подходящей работы объект, который попал в него не эксклюзивно.
function se_smart_terrain:register_npc( obj )

	--log3( "[smart_terrain %s] register called obj=%s gulag_type=%s", self:name(), obj:name(), self.gparams.type )

	local npc_info = {
		-- старые squad и group
		o_group        = obj:g_group(),
		o_squad        = obj:g_squad(),
		exclusive      = self.obj_exclusive_tbl[obj.id] == true, 

		stay_end       = game.get_game_time() -- время принятия в смарт
	}
	--
	self.obj_exclusive_tbl[obj.id] = nil --дальше это хранить нет смысла
	--
	self:fill_npc_info( obj, npc_info )
	--
	--Если гулаг активен, т.е. содержит неписей и нет неэксклюзивных работ
	if self.gulag_working and not self.gulag:is_there_any_suitable_job( npc_info, false ) then
		--log3( "get_population=%d capacity=%d", self.gulag:get_population(), self.gulag.capacity )
		--log3( "is_there_any_suitable_job=%s", tostring(self.gulag:is_there_any_suitable_job(npc_info, false)) )
		--log1( table.tostring(self.npc_info) )
		self:kick_someone_non_exclusive( npc_info ) -- кого-то выкидываем
	end

	self:update_obj_rank( obj )

	self.npc_info[obj.id] = npc_info

	if not self.gulag_working then -- если там ещё нет объектов
		self:create_gulag() -- активировали гулаг
	end

	self.gulag:addObject( obj.id ) -- таки добавили объект

	self.gulag:update() -- обновили

--	log3( "[smart_terrain %s] added %s to gulag type=%s", self:name(), obj:name(), self.gparams.type )
end

-- отпустить npc
function se_smart_terrain:unregister_npc( obj )
	ASSERT( self.npc_info[obj.id], "object [%s] not found in [%s]", obj:name(), self:name() )

	--' Если анрегистрим мертвого эксклюзивного НПС, нужно уменьшить счетчик эксклюзивности
	if obj.smart_terrain_conditions then
		local condlist = obj.smart_terrain_conditions[self:name()]
		if condlist and xr_logic.pick_section_from_condlist( db.actor_proxy, obj, condlist ) then
			self.exclusives = self.exclusives - 1 --' уменьшаем счетчик
			self.gulag.capacity_non_exclusive = self.gulag.capacity_non_exclusive + 1
		end
	end

	local n = self.npc_info[obj.id]

	self.gulag:removeObject( obj.id )

	obj.squad = n.o_squad
	obj.group = n.o_group

	self.npc_info[obj.id] = nil

	obj:clear_smart_terrain()

--	log3( "[smart_terrain %s] removed %s from gulag type=%s, strn_id=%s", self:name(), obj:name() or "<<<nil>>>", self.gparams.type, obj:smart_terrain_id())
end

-- увеличить ранг сталкера при регистрации в смарте
function se_smart_terrain:update_obj_rank( obj )
	local community, is_stalker = self:get_obj_community( obj )

	if is_stalker then
		local old_rank = obj:rank()

		obj:set_rank( old_rank + math.random( self.rank_inc_min, self.rank_inc_max ) )

--		log3( "[smart_terrain %s] obj=%s rank %d -> %d", self:name(), obj:name(), old_rank, obj:rank() )
	end
end

-- выгнать из-под смарттеррейна первого попавшегося неэксклюзивного персонажа,
-- который занимает работу, подходящую новому персонажу.
-- TODO а если я выгоню кого-то, а его работа не подойдёт по idle ?
function se_smart_terrain:kick_someone_non_exclusive( new_npc_info )
	for obj_id, npc_info in pairs( self.npc_info ) do
		if not npc_info.exclusive and self.gulag:obj1_job_suits_obj2( obj_id, new_npc_info ) then
			--log3("[smart_terrain %s] kicking %s", self:name(), npc_info.name)
			self:unregister_npc( npc_info.se_obj )
			return
		end
	end

	abort( "[smart_terrain %s] can't add npc, all are exclusive or there are no suitable jobs", self:name() )
end


function se_smart_terrain:reset_npc_logic(obj)
	if obj then
		local npc = level.object_by_id(obj.id)
		local npc_id = obj.id
		if npc then
			xr_logic.reset_generic_schemes_on_scheme_switch(npc, "nil", "nil")
		end
		if db.storage[npc_id] then
			db.storage[npc_id].overrides = nil
			db.storage[npc_id].active_section = nil
			db.storage[npc_id].active_scheme = nil	
		end
	end
end
-- выдать объекту задание.
-- вызывается движком после включения непися в состав смарта
-- задание в оффлайне заключается попросту топать к смарту, где непись 
-- выйдет в онлайн и будет подхвачен уже логикой гулага
local def_task = false
function se_smart_terrain:task( obj )
    local task = self.gulag:get_obj_job_task(obj.id)
    if not task then
        self.gulag:free_obj( obj.id )
        self:unregister_npc(obj) --Затычка против вылета.
        self:reset_npc_logic(obj)

        if not def_task then
            def_task = CALifeSmartTerrainTask("simulation_default_path")
        end
        return def_task
    end
    return task
end

-- может ли данный гулаг создаться в данный момент?
function se_smart_terrain:is_gulag_available()
	-- если есть специальные условия создания гулага
	if self.gparams.cond then
		-- то используем их
		local bb = xr_logic.pick_section_from_condlist( db.actor_proxy, self, self.gparams.cond ) ~= nil
		return bb
	else -- если специальных условий нет
		return true -- то значит всегда можно работать
	end
end

-- в гулаг поступил первый персонаж и он начинает работать
-- название в целом запутывает! Это не создание, а скорее активация гулага
function se_smart_terrain:create_gulag()
	self.check_time = time_global()

	self.gulag:initialize()

	self.gulag_working = true
end

-- всех освободить, убить гулаг,
-- создать новый нерабочий гулаг, зарезервировать в нём места для эксклюзивных
function se_smart_terrain:remove_gulag( disable )
	-- DEBUG
	self.disabled = disable
	--------

	if not self.gulag_working then
		return
	end

	--log3( "[smart_terrain %s] removed gulag type=%s", self:name(), self.gparams.type )

	-- освободить всех персонажей
	for id, npc_info in pairs( self.npc_info ) do
		self:unregister_npc( npc_info.se_obj )
		--Если смарт закрылся, то всех подопечных попробуем поскорее пристроить
		--Что бы не шлялись по локации почем зря и как можно скорее получили
		--свою логику, если новый смарт на этой же локации, как в случае с
		--бандитами, который долговца расстреливают.
		npc_info.se_obj:brain():update()
	end

	self.gulag = xr_gulag.gulag( self, self.gparams.type, self.gparams.squad, self.gparams.groups, self.npc_info, self.gparams.capacity )
	self.gulag:load_jobs()

	self.gulag_working = false

	self.gulag.capacity_non_exclusive = self.gulag.capacity_non_exclusive - self.exclusives
end

-- заполняет таблицу monster_classes
-- TODO: заменить на глобальный функционал
function se_smart_terrain:fill_monster_classes()
	if not monster_classes then
		monster_classes = {
			[clsid.bloodsucker_s ] = "bloodsucker",
			[clsid.boar_s        ] = "boar",
			[clsid.burer_s       ] = "burer",
			[clsid.cat_s         ] = "cat",
			[clsid.chimera_s     ] = "chimera",
			[clsid.controller_s  ] = "controller",
			[clsid.pseudodog_s   ] = "pseudodog",
			[clsid.psy_dog_s     ] = "psy_dog",
			[clsid.dog_s         ] = "dog",
			[clsid.flesh_s       ] = "flesh",
			[clsid.fracture_s    ] = "fracture",
			[clsid.poltergeist_s ] = "poltergeist",
			[clsid.gigant_s      ] = "pseudo_gigant",
			[clsid.snork_s       ] = "snork",
			[clsid.tushkano_s    ] = "tushkano",
			[clsid.zombie_s      ] = "zombie"
		}
	end
end

-- регистрация объекта в симуляторе.
-- вызывается движком после загрузки/создания объекта.
function se_smart_terrain:on_register()

	cse_alife_smart_zone.on_register( self )

	--TODO: А что будет если это удалить?
	--KRodin: эти смарты и так закрываются по кондлисту cond = {-pri_stadium_scene_start} , т.ч. этот код не имеет смысла. Костыль какой-то.
	--if has_alife_info("pri_stadium_scene_start") and string.find(self:name(), "pri_wave") then
	--	self:remove_gulag(true)
	--end		

	-- проинитить объект
	self:register_if_needed()
	self:initialize_if_needed()
end

function se_smart_terrain:register_if_needed()
	--' Если уже зарегистрены то ничего не делать.
	if self.registred then
		return
	end
	self.registred = true
	
	--log3( "%s register called", self:name() )
	-- DEBUG
	if self.disabled then
		return
	end

	self:fill_monster_classes()

	local level_name = object_level_name(self)

	if not self.gparams.preset_name then
		self.gparams.preset_name = level_name
	end

	if not smart_terrains[level_name] then
		smart_terrains[level_name] = {}
	end

	smart_terrains[level_name][self.id] = self

	self.gulag:load_jobs()

	if self.gulag_working then
		self.gulag:initialize()
	end
end



-- дерегистрация объекта в симуляторе.
-- вызывается движком перед удалением объекта (вызывается ли вообще, смарты никто не удаляет)
function se_smart_terrain:on_unregister()
	cse_alife_smart_zone.on_unregister( self )

--	log3( "[smart_terrain %s] on_unregister called", self:name() )

	local lvl_smarts = smart_terrains[object_level_name(self)]

	if lvl_smarts then
		lvl_smarts[self.id] = nil
	end

	db.actor_proxy:deinit() -- ?? вызывается из каждого такого метода
end

-- вызвать спавнер, если настроен.
-- вызывается из gulag:beginJob( obj_id )
function se_smart_terrain:call_respawn()
	if self.gparams.respawn then
		dsh_respawn.spawn( self.gparams.respawn )
	end
end

--[==[
-- возвращает строку с принимаемыми группировками и рангами
function se_smart_terrain:stat_get_accepted_communities() -- отладочная, только для информации!!
	local comms = {}

	-- from preset
	local ltx         = dsh.cached_ini_file( "misc\\" .. self.gparams.type .. ".ltx" )
	local preset_name = self.gparams.preset_name

	if ltx and ltx:section_exist( preset_name ) then
		local result, field, str
		local n = ltx:line_count( preset_name )

		for i = 0, n-1 do
			result, field, str = ltx:r_line( preset_name, i )

			if not self.accepted_communities or self.accepted_communities[field] then
				comms[field] = str
			end
		end
	end

	-- from custom data
	if self.accepted_communities then
		for comm, v in pairs( self.accepted_communities ) do
			if not comms[comm] then
				comms[comm] = "all"
			end
		end
	end

	-- prepare return
	local s = ""

	for comm, ranks in pairs( comms ) do
		s = s .. comm .. "(" .. ranks .. "),"
	end

	return s
end

-- вывод статистики смарта
function se_smart_terrain:stat() -- отладочная, только для информации!!
	local s = object_level_name(self) .. " " .. self:name()

	local pop   = self.gulag:get_population()
	local cap   = self.gulag.capacity

	local avail = self:is_gulag_available()

	if avail then
		s = s .. " enabled "
	else
		s = s .. " disabled "
	end

	s = s .. pop .. " " .. cap .. " " .. self:stat_get_accepted_communities()

	log3( s )

--	for id, npc_info in pairs( self.npc_info ) do
--		log3( "    %s", npc_info.name )
--	end

	return avail, pop, cap
end
--]==]

-- Обновление.
-- В онлайне вызывается через binder.
-- Также может вызваться принудительно из xr_effects
-- Если мужиков в гулаге больше не осталось или условия существования гулага не выполняются, то убрать гулаг.
function se_smart_terrain:update()
--	log1( "se_smart_terrain::update called!" )
	cse_alife_smart_zone.update( self )

	if not self.gulag_working then
		return
	end

	if self:is_gulag_available() then
		if self.check_time <= time_global() then
			self.check_time = time_global() + check_period

			--' проверять, не собрался ли кто-то к этому времени уже уходить
			for id, npc_info in pairs( self.npc_info ) do
				local sobj = npc_info.se_obj
				if not sobj:alive() then
					log3( "[%s]: %s: %s is dead on update", script_name(), self:name(), sobj:name() )
					self:unregister_npc( sobj )
				elseif npc_info.cond and not xr_logic.pick_section_from_condlist( db.actor_proxy, sobj, npc_info.cond ) then
					--log3("[smart_terrain %s] leaving %s", self:name(), npc_info.name)
					self:unregister_npc( sobj )
					--При переключении смартов попробую сразу обновлять мозги,
					--что бы новый смарт подхватил непися, как можно быстрее, и дал ему логику.
					sobj:brain():update()
				end
			end

			if self.gulag:get_population() == 0 then
				self:remove_gulag()
			else
				self.gulag:update()
			end
		end
	else
		if self.on_cleanup then
			local f, err = loadstring( "return " .. self.on_cleanup .. "( ... )" )
			ASSERT( f, err )
			f( self )
		end
		self:remove_gulag()
	end
end

--------------------
-- найти и почистить гулаг объекта
-- вызывается из кучи мест. Скорее всего дубируется многократно
function on_death( obj_id )
--	log3( "on_death obj_id=%d", obj_id )
	local sim = alife()
	if sim then
		local obj = sim:object( obj_id )
		if obj then
			local smrt_id = obj:smart_terrain_id()
			if 65535 ~= smrt_id then
				local smrt = sim:object(smrt_id)
				if smrt and smrt.gulag then
					smrt.gulag:clear_dead(obj_id)
				end
			end
		end
	end
end

-----------------------
--' Удаляет объект из смарттеррейнов.
function unregister_npc(npc)
	local sim = alife()
	
	if sim then
		local obj     = sim:object(npc.id)
		local strn_id = obj:smart_terrain_id()

		if strn_id ~= 65535 then
			if sim:object(strn_id) then
				sim:object(strn_id):unregister_npc(obj)
			end
		end
	end
end



--------------------
-- прочитать секцию [smart_terrains]
-- вызывается объектами, которые могут ходить под smart terrain
-- вызывается из se_monster:fill_exclusives() в файле se_monster и  и se_stalker.se_stalker:fill_exclusives()
--
-- Добавлена поддержка [smart_terrains] в файле логики
-- https://github.com/dsh2dsh/op2ogse/commit/d95b91610c4b346ab7cc08ef17e1c3a7ba9ed9fc
function read_smart_terrain_conditions( self )
  local ini = self.ini
  local sect = smart_section
  local dsh_sect = "dsh.se_stalker." .. self:name() .. ".smart_terrains"
  --
  if sys_ini:section_exist( dsh_sect ) then
    ini  = sys_ini
    sect = dsh_sect
  else
    if ini then
      if
        ( not ini:section_exist( sect ) )
        and ini:section_exist( "logic" )
      then
        local cfg = get_string( "logic", "cfg", nil, ini )
        if cfg then
		  log3("~~[smart_terrain %s]: Smart section not found in spawn_ini(). Will be used logic file: [%s]", self:name(), cfg)
          ini = dsh.cached_ini_file( cfg )
        end
      end
    end
  end
  --
  if ini and ini:section_exist( sect ) then
    local has_none_true = false
    local conds = {}
    local accepts = false
    local n = ini:line_count( sect )
    if n > 0 then
      for i = 0, n - 1 do
        local result, field, str = ini:r_line( sect, i )
        conds[ field ] = xr_logic.parse_condlist(
          self, sect, field, str
        )
		if field == "none" and str == "true" then
          has_none_true = true
        end
      end
	  --log3("~~\n[Smart Terrain] Conditions for %s: %s", self:name(), conds)
      return conds, has_none_true
    end
  end
  --log3("!![smart_terrain %s]: Smart section not found!", self:name())
  return nil
end


function iterate_smart_terrains( f )
	for lname, smarts in pairs(smart_terrains) do
		for id, sobj in pairs( smarts ) do
			f( sobj )
		end
	end
end
