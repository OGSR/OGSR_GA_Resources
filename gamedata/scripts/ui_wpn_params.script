-- -*- mode: lua; coding: windows-1251-dos -*-

-- ZRP - опция показывает точность первого выстрела, а не комбинированную из разных параметров.
local show_single_fire_accuracy = true

local normalize = function(num) return math.clamp(num, 1, 100) end


function read_if_exist(ltx, section, value, default)
	if ltx:line_exist(section,value) then
		return ltx:r_float(section,value)
	else
		return default
	end
end

function GetRPM(section)
	local ltx = sys_ini
	
-- НАДЕЖНЕЙ local rpm = read_if_exist(ltx, section,"rpm", 1)
	local rpm = ltx:r_float(section,"rpm")
	local mag_size = ltx:r_float(section,"ammo_mag_size")

-- в ОГСЕ почему-то проверялось ПОСЛЕ вычислений (было 30)
	if mag_size < 5	then rpm = 20 end
	
	if rpm > 200 then
-- если > 100 то rpm = (mag_size*(60/((mag_size/(rpm/60)) + 5.5)))/2.4
		rpm = math.pow((rpm - 200)/720,2)*100 + 15
	else
		rpm = rpm/14
	end

	return normalize(rpm)
end

function GetDamage(section)
	local ltx = sys_ini
	local val = ltx:r_float(section,"hit_power")
	

--	if val < 1.36 then
--		val = val*100-46
--	else
--		val = 90 + math.pow(val/2.3,2)*10
--	end
	
	return normalize((100*val - 25) * (100/85) )	
end

function GetDamageMP(section)
	local ltx = sys_ini
	local val = ltx:r_float(section,"hit_power")
		
	if val < 1.05 then
		val = val*100-30
	else
		val = 75 + math.pow(val/4,2)*25
	end
	
	return normalize(val)	
end

function GetHandling(section)
--надёжность
	local ltx = sys_ini

	local misfire_probability	= ltx:r_float(section,"misfire_probability")			-- вероятность осечки при максимальном износе
	--local misfire_condition_k = ltx:r_float(section,"misfire_condition_k")
	local misfire_condition_k  = read_if_exist(ltx, section, "misfire_condition_k", 1)
	local condition_shot_dec = ltx:r_float(section,"condition_shot_dec")				-- увеличение износа при каждом выстреле

	local ammo_list			= ltx:r_string(section,"ammo_class")
	
	local pos  = string.find(ammo_list,",",1)
	local impair		-- коэффициент износа ствола от пули (у боеприпаса)	
	if nil ~= pos then
		local ammo = string.sub(ammo_list,1,pos - 1)
		impair				= ltx:r_float(ammo, "impair");
	else
		impair				= ltx:r_float(ammo_list, "impair");
	end
		local n = 3000
		local cond = 1 - impair*condition_shot_dec*n
			if cond < 0 then cond = 0 
		end
		local prob
			if cond > 0.95 then prob = 0
			else
			prob = (0.95 - cond)*(misfire_condition_k - misfire_probability) + misfire_probability
		end

		local val = 100*(1 - prob*7) 
			if val < 20 then val = 20
		end
	
	return normalize(val) 
end

function GetAccuracy(section)
	local ltx = sys_ini
			
	local fire_dispersion_base	= ltx:r_float(section,"fire_dispersion_base")
	local cam_dispersion		= ltx:r_float(section,"cam_dispersion")
	local cam_dispersion_inc 	= read_if_exist(ltx, section, "cam_dispertion_inc", 0) 	
	local cam_dispersion_frac 	= read_if_exist(ltx, section, "cam_dispertion_frac", 1) 
	local cam_step_angle_horz	= ltx:r_float(section,"cam_step_angle_horz")
	local rpm 			= ltx:r_float(section,"rpm")
	local ammo_list			= ltx:r_string(section,"ammo_class")
	
	local pos  = string.find(ammo_list,",",1)
	local k_disp
	if nil ~= pos then
		local ammo = string.sub(ammo_list,1,pos - 1)
		k_disp				= ltx:r_float(ammo, "k_disp");
	else
		k_disp				= ltx:r_float(ammo_list, "k_disp");
	end

	local val
	if show_single_fire_accuracy then
		if k_disp > 3.5 then	-- shotgun pellets = 10
			k_disp = 1.0
		end
		local accfactor = fire_dispersion_base*k_disp
		if accfactor > 1.5 then accfactor = 1.5 end
		val = 100 - accfactor/0.015
		val = val * val / 100
	else
		if k_disp > 3.5 then	-- shotgun pellets = 10
			k_disp = 0.3
		end

		local fir = math.log10(1/(fire_dispersion_base*k_disp))
		local inc = math.log10(1/(cam_dispersion/10 + cam_dispersion_inc))
		local dis = math.log10(1/(cam_dispersion*cam_step_angle_horz))
		local fra = math.pow(cam_dispersion_frac,1.5)

		val =  30*fir + 15*dis*fra + 0.02*rpm*inc*fra
	end

	return normalize(val)
end
