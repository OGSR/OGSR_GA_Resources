---- AI Additions ----
---- Rulix aka Bak ----
---- 22.6.2009

local hit_sound = [[material\dead-body\collide\hithard06hl]]

local function printf(s, ...)
	rx_utils.printf("fr:"..s,...)
end
local function read_from_ini(ini,sec,val,def,typ)
	return rx_utils.read_from_ini(ini,sec,val,def,typ)
end

local fr_ini = ini_file([[misc\ai_additions\facer.ltx]])
ASSERTX(fr_ini:section_exist("main"),"no fr_ini")
local facer_sets = {forbidden_factions = {},
					forbidden_npcs = {},
					ranks = {},
					check_prd = 700,
					attack_classes = rx_utils.collect_sections(fr_ini,{"attack_classes"},nil,true)}

for k,v in ipairs(rx_utils.get_rank_list()) do
	if fr_ini:section_exist(v) then
		facer_sets.ranks[v] = {power = read_from_ini(fr_ini,v,"power",50),
							k_mutant = read_from_ini(fr_ini,v,"k_mutant",1),
							k_stalker = read_from_ini(fr_ini,v,"k_stalker",1),
							k_actor = read_from_ini(fr_ini,v,"k_actor",1),
							k_friend = read_from_ini(fr_ini,v,"k_friend",0.3),
							min_delay = math.max(read_from_ini(fr_ini,v,"min_delay",1400),350)}
	end
end
facer_sets.forbidden_factions = rx_utils.parse_list(fr_ini,"main","forbidden_factions",true)
facer_sets.forbidden_npcs = rx_utils.parse_list(fr_ini,"main","forbidden_npcs",true)
fr_ini = nil

local attack_clsids = {}
for name,cls_id in pairs(rx_utils.creatures_clslist) do
	attack_clsids[cls_id] = facer_sets.attack_classes[name]
end
facer_sets.attack_classes = nil

local function accesible_target(npc,target)
	local wounded = xr_wounded.is_wounded(target)
	local spos = npc:position()
	local tpos = wounded and target:bone_position("bip01_spine") or target:position()
	return wounded and tpos:distance_to_sqr(spos) < 3 or tpos:distance_to_sqr(spos) < 3.8 and spos.y - tpos.y < 0.8
end

class "evaluator_facer" (property_evaluator)
function evaluator_facer:__init(npc,name,storage) super (nil,name)
	self.st = storage
	self.st.check_time = 0
	self.st.abtime = time_global()+math.random(facer_sets.check_prd,5000)
	self.st.target = rx_ai.get_var(npc,"fa_target",nil)
	rx_ai.subscribe_for_events(npc,self)
end
function evaluator_facer:evaluate()
	local npc,tg = self.object,time_global()
	if self.st.abtime > tg then
		return false
	end
	local be = npc:best_enemy()
	if not (be or self.st.target) then
		self.st.abtime = tg+2000
		return false
	end
	if xr_wounded.is_wounded(npc) then
		self.st.target = rx_ai.save_var(npc,"fa_target",nil)
		self.st.abtime = tg+6000
		return false
	end
	local target = self.st.target and level.object_by_id(self.st.target)
	if not target then
		self.st.target = rx_ai.save_var(npc,"fa_target",nil)
	elseif not target:alive() and npc:animation_count() == 0 then
		self.st.target = rx_ai.save_var(npc,"fa_target",nil)
		target = nil
	end
	if target then
		if npc:relation(target) == game_object.enemy or (not be and target.health > 0.3 and db.storage[npc:id()].active_scheme ~= "remark") then
			if accesible_target(npc,target) then
				return true
			end
		end
	end
	if be and self.st.check_time < tg and not npc:critically_wounded() and npc:see(be) then
		self.st.check_time = tg+facer_sets.check_prd
		if attack_clsids[be:clsid()] and accesible_target(npc,be) then
			self.st.target = rx_ai.save_var(npc,"fa_target",be:id())
			return true
		end
	end
	return false
end
function evaluator_facer:hit_callback(amount,dir,who)
	local npc = self.object
	if who and amount > 0.02 and who:id() ~= npc:id() and who:alive() and attack_clsids[who:clsid()] then
		local target = self.st.target and level.object_by_id(self.st.target)
		if not target or npc:relation(target) ~= game_object.enemy or target:position():distance_to_sqr(npc:position()) > 4 then
			self.st.target = rx_ai.save_var(npc,"fa_target",who:id())
			self.st.check_time = time_global()+facer_sets.check_prd
		end
	end
end

class "action_facer" (action_base)
function action_facer:__init(npc,action_name,storage) super (nil,action_name)
	self.st = storage
	self.rank = ranks.get_obj_rank_name(npc)
end

function action_facer:initialize()
	action_base.initialize(self)
	local npc,wpn = self.object,self.object:active_item()
	self.end_time = time_global()+3000
	local wm = npc:get_wm(true)
	if wm then
		wm:disable()
	end
	state_mgr.lock(npc,true,true)
	npc:set_desired_position()
	npc:set_desired_direction()
	npc:set_movement_type(move.stand)
	npc:set_body_state(move.standing)
	if not npc:weapon_strapped() then
		npc:set_item(object.idle,wpn)
	end
	if npc:animation_count() > 0 then
		npc:clear_animations()
		self.reset_anim = true
	end
	local target = self.st.target and level.object_by_id(self.st.target)
	if target and npc:relation(target) ~= game_object.enemy then
		rx_sound.set_sound_play(npc:id(),"friendly_fire")
	end
end

function action_facer:execute()
	action_base.execute(self)
	local npc,tg = self.object,time_global()
	local target = self.st.target and level.object_by_id(self.st.target)
	if not (self.end_time and target) then
		printf("facer[%s] not self.end_time",npc:character_name())
		self:cancel()
		self.st.abtime = tg+1000
		return
	end
	npc:set_movement_type(move.stand)
	npc:set_sight(look.fire_point,target:bone_position(rx_utils.get_fire_bone(target:section(),"head")))
	if self.reset_anim then
		self.reset_anim = nil
	elseif self.end_time < tg then
		self:cancel()
	elseif not self.hit_time then
		if npc:see(target) then
			add_anims(npc)
			self.hit_time = tg+333
			if npc:mental_state() == anim.free then
				self.hit_time = self.hit_time+222
			end
		end
	elseif self.hit_time < tg then
		local spos,tpos = npc:bone_position("bip01_neck"),target:bone_position("bip01_neck")
		local ysub = spos.y - tpos.y
		local cls,bone = target:clsid()
		if IsStalker(nil,cls) then
			if xr_wounded.is_wounded(target) then
				bone = "bip01_head"
			elseif ysub > 1.5 then
			elseif ysub > -0.3 then
				bone = "bip01_head"
			elseif ysub > -0.5 then
				bone = "bip01_spine2"
			elseif ysub > -0.8 then
				bone = "bip01_spine1"
			elseif ysub > -1.0 then
				bone = "bip01_pelvis"
			elseif ysub > -1.4 then
				bone = "bip01_l_calf"
			elseif ysub > -1.8 then
				bone = "bip01_l_foot"
			end
		elseif ysub < 1.2 and ysub > -1.8 then
			if math.random() > 0.4 then
				bone = rx_utils.get_fire_bone(target:section(),"torso")
			else
				bone = rx_utils.get_fire_bone(target:section(),"head")
			end
		end
		if bone and spos:distance_to_xz(tpos) < 2 and npc:animation_count() ~= 0 then
			local target_is_actor = rx_utils.is_actor(nil,cls)
			local vals = facer_sets.ranks[self.rank]
			local power = vals.power or 50
			if cls == clsid.script_stalker then
				power = power*vals.k_stalker
			elseif target_is_actor then
				power = power*vals.k_actor
			elseif IsMonster(nil,cls) then
				power = power*vals.k_mutant
			end
			if npc:relation(target) ~= game_object.enemy then
				power = power*vals.k_friend
			elseif rx_knife then
				local itrg = rx_knife.targets[npc:id()]
				if itrg == self.st.target then
					power = power*0.35
				end
			end
			local hi = hit()
			if target:get_bone_id( bone ) == 65535 then
				bone = get_string(target:section(), "bone_head", "bip01_head")
			end
			hi:bone(bone)
			hi.type = hit.strike
			hi.power = power/math.random(70,120)
			hi.impulse = power >= 1 and math.random(power)*3 or 1
			hi.draftsman = npc
			hi.direction = target:bone_position(bone):sub(npc:bone_position("bip01_neck"))
			local drop
			if math.random() < hi.power*1.5 then
				local item,slot = target:active_item(),target:active_slot()
				if item and (slot == 2 or slot == (target_is_actor and 1 or 0)) then
					if target_is_actor then
						target:drop_item(item)
					else
						target:set_item(object.drop,item)
						drop = true
					end
				end
			end
			if math.random() < 0.33 and npc:relation(target) == game_object.enemy  then
				hi.type = hit.wound
				hi.power = hi.power+math.random(3)/10
				hi.impulse = hi.impulse+math.random(60)
			end
			if target_is_actor then
				rx_utils.get_sound([[affects\hit_fist]]):play_no_feedback(db.actor,sound_object.s2d,0,vector(),1.0)
				level.add_cam_effector("camera_effects\\fusker.anm",959,false,"")
				level.add_pp_effector("facer.ppe",959,false)
				level.set_pp_effector_factor(959,hi.power+0.3)
			elseif cls == clsid.script_stalker and target:animation_count() == 0 and bone == "bip01_head" and npc:position():sub(target:position()):normalize():similar(target:direction(),math.pi*0.25) == 1 then
				local rnd = math.random()
				if rnd < 0.2 then
					rx_ai.play_animation(target,{animation = "wounded_2_out",weapon = object.drop,sound_theme = 'npc_hit'})
				elseif rnd < 0.24 then
					rx_ai.play_animation(target,{animation = "test",timeout = 380,weapon = object.fire1,callback = {func = test_kill,obj = npc:id()}})
				elseif rnd < 0.9 and not drop and target:active_item() then
					local slots = {[1] = 1,[2] = 2,[3] = 3,[8] = 8,[9] = 2}
					local slot = target:active_item():animation_slot()
					if slots[slot] then
						rx_ai.play_animation(target,{animation = "norm_"..slots[slot].."_critical_hit_head_0",weapon = object.fire1,sound_theme = 'npc_hit'})
					end
				end
			end
			rx_utils.get_sound(hit_sound):play_at_pos(target,target:position(),0)
			target:hit(hi)
			self.hit_time = self.end_time
		else
			self.hit_time = self.end_time
		end
	elseif npc:animation_count() == 0 then
		self:cancel()
	end
end
function action_facer:cancel()
	self.st.check_time = time_global()+facer_sets.ranks[self.rank].min_delay
	self.st.abtime = self.st.check_time
	self.end_time = nil
	self.hit_time = nil
	self.st.target = rx_ai.save_var(self.object,"fa_target",nil)
	self.reset_anim = nil
end
function action_facer:finalize()
    action_base.finalize(self)
	local npc = self.object
	self:cancel()
	if not npc:alive() then
		return
	end
	local wm = npc:get_wm(true)
	if wm then
		wm:enable()
	end
	if not xr_wounded.is_wounded(npc) then
		npc:clear_animations()
	end
	npc:set_movement_type(move.walk)
--	npc:set_sight(look.danger,npc:direction(),0)
	state_mgr.lock(npc,false)
	rx_sound.block_alarm_sound(npc)
end


class "evaluator_steal_up" (property_evaluator)
function evaluator_steal_up:__init(npc,name,storage) super (nil,name)
	self.st = storage
	self.check_time = time_global()+2000
end
function evaluator_steal_up:evaluate()
	if self.check_time > time_global() then
		return false
	end
	local npc = self.object
	if npc:active_item() then
		self.check_time = time_global()+8000
		return false
	end
	local be = npc:best_enemy()
	if not be or npc.health < 0.33 or be:wounded() then
		self.check_time = time_global()+8000
		return false
	end
	local target = self.st.target and level.object_by_id(self.st.target)
	target = target and npc:relation(target) == game_object.enemy and target
	local tpos = (target or be):position()
	local dist = tpos:distance_to_sqr(npc:position())
	if dist > 100 then
		if target then
			self.st.target = rx_ai.save_var(npc,"fa_target",nil)
		end
		self.check_time = time_global()+1000
		return false
	elseif dist < 3.3 then
		self.check_time = time_global()+facer_sets.ranks[ranks.get_obj_rank_name(npc)].min_delay
		return false
	end
	if not target then
		if npc:see(be) and not be:see(npc) then
			self.st.target = rx_ai.save_var(npc,"fa_target",be:id())
		end
		return false
	end
	local vid = target:level_vertex_id()
	if npc:accessible(vid) and level.vertex_position(vid):distance_to_sqr(tpos) < 3 then
		return true
	end
	self.check_time = time_global()+2000
	return false
end

class "action_steal_up" (action_base)
function action_steal_up:__init(npc,action_name,storage) super (nil,action_name)
	self.st = storage
end

function action_steal_up:initialize()
	action_base.initialize(self)
	local npc = self.object
	npc:set_desired_position()
	npc:set_desired_direction()
	npc:set_path_type(game_object.level_path)
	npc:clear_animations()
	npc:set_movement_type(move.run)
	npc:movement_enabled(true)
	state_mgr.lock(npc,true)
end

function action_steal_up:execute()
	action_base.execute(self)
	local npc,tg = self.object,time_global()
	local target = self.st.target and level.object_by_id(self.st.target)
	if not target then
		return
	end
	npc:set_movement_type(move.run)
	if target:see(npc) then
		npc:set_body_state(move.standing)
		npc:set_mental_state(anim.panic)
	else
		npc:set_body_state(move.crouch)
		npc:set_mental_state(anim.danger)
	end
	npc:set_dest_level_vertex_id(target:level_vertex_id())
end
function action_steal_up:finalize()
    action_base.finalize(self)
	if self.object:alive() then
		state_mgr.lock(self.object,false)
		rx_sound.block_alarm_sound(self.object)
		rx_ai.process_postponed_setup(self.object:id())
	end
end

local valid_anim_slot = {[1]=true,[2]=true,[3]=true,[4]=true,[8]=true,[9]=true,[10]=true}
function add_anims(npc)
	local wpn,slot = npc:active_item(),0
	if wpn and npc:weapon_unstrapped() and valid_anim_slot[wpn:animation_slot()] then
		slot = wpn:animation_slot()
	end
	npc:clear_animations()
	if npc:mental_state() == anim.free then
		if slot == 0 and math.random() < 0.5 then
			rx_utils.add_anim(npc,"udar_0",true)
		else
			rx_utils.add_anim(npc,"free_facer_"..slot,true)
		end
	else
		rx_utils.add_anim(npc,"norm_facer_"..slot.."_0",true)
		rx_utils.add_anim(npc,"norm_facer_"..slot.."_1",true)
	end
end

function test_kill(who_id,npc)
	local who = level.object_by_id(who_id)
	local hi = hit()
	hi:bone(get_string(npc:section(), "bone_head", "bip01_head"))
	hi.type = hit.strike
	hi.power = 1000
	hi.impulse = 100
	hi.draftsman = who or npc
	hi.direction = vector():invert(npc:direction())
	npc:hit(hi)
end

evid_facer = rx_ai.base_id+15
evid_steal_up_facer = evid_facer+1
actid_facer = evid_facer
actid_steal_up_facer = evid_steal_up_facer

rx_ai.reset_protected_actions[actid_steal_up_facer] = true
rx_ai.death_disable_evas[evid_facer] = false

function add_to_binder(npc,ini,scheme,section,storage)
	local manager = npc:motivation_action_manager()
	if not (not facer_sets.forbidden_factions[npc:character_community()] and facer_sets.ranks[ranks.get_obj_rank_name(npc)] and not facer_sets.forbidden_npcs[npc:name()] and not facer_sets.forbidden_npcs[npc:profile_name()] and npc:alive()) then
		manager:add_evaluator(evid_facer,property_evaluator_const(false))
		manager:add_evaluator(evid_steal_up_facer,property_evaluator_const(false))
		return
	end
	manager:add_evaluator(evid_facer,evaluator_facer(npc,"eva_facer",storage))
	manager:add_evaluator(evid_steal_up_facer,evaluator_steal_up(npc,"eva_steal_up_facer",storage))
	local action = action_facer(npc,"act_facer",storage)
	action:add_precondition(world_property(stalker_ids.property_alive,true))
--	action:add_precondition(world_property(xr_evaluators_id.sidor_wounded_base,false))
	if rx_knife then
		action:add_precondition(world_property(rx_knife.evid_knife_attack,false))
	end
	if rx_kill_wounded then
		action:add_precondition(world_property(rx_kill_wounded.evid_enemy_wounded,false))
	end
	if post_combat_idle then
		action:add_precondition(world_property(post_combat_idle.evid_post_combat,false))
	end
	if xr_help_wounded then
		action:add_precondition(world_property(xr_help_wounded.evid_wounded_exist,false))
	end
	if xrs_grenade then
		action:add_precondition(world_property(xrs_grenade.evid_aaa_grenade,false))
		action:add_precondition(world_property(xrs_grenade.evid_psyh,false))
	end

	if xr_combat_companion then
		action:add_precondition(world_property(xr_combat_companion.prop_combat,false))	
	end

	action:add_precondition(world_property(evid_facer,true))
	action:add_effect(world_property(evid_facer,false))
	manager:add_action(actid_facer,action)
	-------------------------------------------------------------------------------------
	action = action_steal_up(npc,"act_steal_up_facer",storage)
	action:add_precondition(world_property(stalker_ids.property_alive,true))
	action:add_precondition(world_property(xr_evaluators_id.sidor_wounded_base,false))
	action:add_precondition(world_property(xr_evaluators_id.state_mgr+3,true))
	if rx_knife then
		action:add_precondition(world_property(rx_knife.evid_knife_attack,false))
	end
	if post_combat_idle then
		action:add_precondition(world_property(post_combat_idle.evid_post_combat,false))
	end
	if xrs_grenade then
		action:add_precondition(world_property(xrs_grenade.evid_aaa_grenade,false))
		action:add_precondition(world_property(xrs_grenade.evid_psyh,false))
	end
--	if blowout_scheme and blowout_scheme.evid_outside then
--		action:add_precondition(world_property(blowout_scheme.evid_outside,false))
--	end
	action:add_precondition(world_property(evid_facer,false))
	action:add_precondition(world_property(evid_steal_up_facer,true))
	action:add_effect(world_property(evid_steal_up_facer,false))
	manager:add_action(actid_steal_up_facer,action)
	-- включение в планировщик
	for i,id in ipairs({xr_actions_id.alife,stalker_ids.action_combat_planner,stalker_ids.action_danger_planner,xr_actions_id.stohe_meet_base+1}) do
		action = manager:action(id)
		action:add_precondition(world_property(evid_facer,false))
		action:add_precondition(world_property(evid_steal_up_facer,false))
	end
	-- необходимо добавить предусловие схеме собирательства и прочим низкоприоритетным общим схемам
--[[	for i,id in ipairs({}) do
		action = manager:action(id)
		if action then
			action:add_precondition(world_property(evid_facer,false))
		end
	end]]
end

function set_scheme(npc,ini,scheme,section)
	local st = xr_logic.assign_storage_and_bind(npc,ini,scheme,section)
end

--[[
function enable_scheme(npc,a)
	local manager = npc:motivation_action_manager()
	if a == true then
		local storage = db.storage[npc:id()].facer
		manager:remove_evaluator(evid_facer)
		manager:add_evaluator(evid_facer,evaluator_facer(npc,"eva_facer",storage))
		manager:remove_evaluator(evid_steal_up_facer)
		manager:add_evaluator(evid_steal_up_facer,evaluator_steal_up(npc,"eva_steal_up_facer",storage))
	elseif a == false then
		manager:remove_evaluator(evid_facer)
		manager:add_evaluator(evid_facer,property_evaluator_const(false))
		manager:remove_evaluator(evid_steal_up_facer)
		manager:add_evaluator(evid_steal_up_facer,property_evaluator_const(false))
	end
end]]
