-- -*- mode: lua; coding: windows-1251-dos -*-

-----------------------------------------------------------------------
--- watcher_act.script
--- Сторонние материалы мода OGSE 0.7 - Схема собирательства бесхозного лута и обыска трупов
--- полная переработка KamikaZze (c) OGS Evolution Team 2011
--- version 1.8 SHoC (02/07/2014)
-----------------------------------------------------------------------
local obj_owner = {}

local claimed_pos = {}

local sound_timer = {}

local desired_distance = 1.3

local bad_items = {
	["fake_grenades_base"] = true,
	["grenade_f1_fake"] = true,
	["grenade_rgd5_fake"] = true,
	["grenade_f1_test"] = true,
	["grenade_rgd5_test"] = true,
	["gl_test_shell"] = true,
	["wpn_fake_missile"] = true,
	["gl_test_shell_ammo_vog-25"] = true,
	["gl_test_shell_ammo_vog-25p"] = true,
	["gl_test_shell_ammo_m209"] = true,
	["gl_fake_missile"] = true,
	["gl_fake_missile_ammo_vog-25"] = true,
	["gl_fake_missile_ammo_vog-25p"] = true,
	["gl_fake_missile_ammo_m209"] = true,
	["af_uley"]	= true,
	["btr_control_module_upgrade"]	= true,
	["btr_control_module"]	= true,
	["accum_depleted"]	= true,
	["accum_full"]	= true,
	["quest_btr_keys"] = true,
	["af_blood_tutorial"] = true,
	["af_transmut_1"] = true,
	["af_transmut_2"] = true,
	["af_transmut_3"] = true,
	["af_transmut_4"] = true,
	["af_transmut_5"] = true,
	["af_transmut_6"] = true,
	["af_transmut_7"] = true,
	["af_transmut_8"] = true,
	["bad_psy_helmet"] = true,
	["bar_ecolog_flash"] = true,
	["bar_lucky_pda"] = true,
	["bar_tiran_pda"] = true,
	["borov_document"] = true,
	["case_01"] = true,
	["case_02"] = true,
	["doc_01"] = true,
	["doc_02"] = true,			
	["cherep_svd"] = true,
	["cit_doctors_key"] = true,
	["crazy_flash"] = true,
	["dar_document1"] = true,
	["dar_document2"] = true,
	["dar_document3"] = true,
	["dar_document4"] = true,
	["dar_document5"] = true,
	["dar_pass_document"] = true,
	["dar_pass_flash"] = true,
	["decoder"] = true,
	["documents_01"] = true,
	["documents_02"] = true,
	["dynamite"] = true,
	["esc_wounded_flash"] = true,
	["flash_01"] = true,
	["good_psy_helmet"] = true,
	["gunslinger_flash"] = true,
	["hunters_toz"] = true,
	["kruglov_flash"] = true,
	["lab_x16_documents"] = true,
	["mil_svoboda_leader_pda"] = true,
	["outfit_novice_m1"] = true,
	["outfit_bandit_m1"] = true,
	["outfit_dolg_m1"] = true,
	["outfit_killer_m1"] = true,
	["outfit_specnaz_m1"] = true,
	["outfit_stalker_m1"] = true,
	["outfit_stalker_m2"] = true,
	["monolit_outfit_m1"] = true,
	["pda_01"] = true,
	["pda_02"] = true,
	["pda_03"] = true,
	["pda_04"] = true,
	["pda_05"] = true,
	["pri_decoder_documents"] = true,
	["quest_case_01"] = true,
	["quest_case_02"] = true,
	["quest_fox_case"] = true,
	["val_key_to_underground"] = true,
	["vodka_1"] = true,
	["wpn_montirovka"] = true,
	["wpn_desert_eagle_unic"] = true,
	["wpn_fort_unic"] = true,
	["wpn_colt1911_unic"] = true,
	["zapiska"] = true,
	["zapiska_m1"] = true,
	["zapiska_m2"] = true,
	["af_esc_anomaly"] = true,
	["pda_friend_barman"] = true,
	["af_of_doch_starik"] = true,
	["wpn_of_qest_on_elevator"] = true,
	["zapis_treasure_of_figa"] = true,
	["dnevnik_tomsona"] = true,
	["unknow_zapisi_tomsona"] = true,
	["af_serdce_yantar"] = true,
	["case_use_rub"] = true,
	["zapis_a_case"] = true,
	["zapis_2_a_case"] = true,
	["pol_code_of_case"] = true,
	["mil_m202"] = true,
	["second_neutral_zapiska"] = true,
	["klondaik_flash_4"] = true,
	["klondaik_flash_5"] = true,
	["filin_note"] = true,
	["filin_pda"] = true,
	["first_neutral_planshet"] = true,
	["knyaz_pda"] = true,
	["guitar_sidr"] = true,
	["af_skull"] = true,
	["af_puzir"] = true,
	["dar_merc_planshet"] = true,
	["cheb"] = true,
	["kommander_diplomat"] = true,
	["cheb_fakeart"] = true,
	["af_magnit_part2"] = true,
	["diggers_pda"] = true,
	["book_9"] = true,
	["book_10"] = true,
	["book_11"] = true,
	["book_12"] = true,
	["apparat"] = true,
	["cit_tow_box_keys"] = true,
	["af_doll"] = true,
	["af_steam"] = true,
	["af_spoon"] = true,
	["af_plate"] = true,
	["af_bottle"] = true,
	["af_jar"] = true,
	["af_bolt"] = true,
	["af_kolya"] = true,
	["box_amm_1"] = true,
	["box_amm_2"] = true,
	["box_amm_3"] = true,
	["box_amm_4"] = true,
	["plastinka_1"] = true,
	["plastinka_2"] = true,
	["plastinka_3"] = true,
	["plastinka_4"] = true,
	["plastinka_5"] = true,
	["plastinka_6"] = true,
	["plastinka_7"] = true,
	["plastinka_8"] = true,
	["plastinka_9"] = true,
	["yan_sold_generator"] = true,
	["amk_metka"] = true,
	["bolt"] = true,
	["ufo_part"] = true,
}

function do_not_touch(item)
	if ogse_anomaly.dangerous_acivated_arts[item:id()] then
		if ogse_anomaly.dangerous_acivated_arts[item:id()] > time_global() then
			return true
		end
	end

	local section = item:section()
	return bad_items[section] or get_bool(section, "quest_item", false) or death_manager.always_keep_item[section] == true
end

function max_weight(npc)
	return npc:get_inventory_weight()
end

local bad_dangers = {
  [danger_object.hit]=true,
  [danger_object.attacked]=true,
  [danger_object.attack_sound]=true,
  [danger_object.bullet_ricochet]=true,
  [danger_object.grenade]=true,
  [danger_object.enemy_sound]=true
}
  
local inertion_time = 30000

function bad_danger(npc)
  local danger = npc:best_danger()
  if danger then
    return bad_dangers[danger:type()] and time_global()-danger:time() < inertion_time
  end
  return false
end

local forbidden_schemes = {
	--["test"] = true, -- если посланы игрой бежать куда-то
	--["walker"] = true, -- если посланы игрой бежать куда-то --KRodin: раскомментировать?
	["remark"] = true, -- если играем в скриптовой сценке
	["combat"] = true, -- если сражаемся
	["wounded"] = true, -- если отыгрываем тяжелораненного
	["actor_dialogs"] = true, -- если говорим с актором
	["sleeper"] = true, -- если спим
}
local forbidden_comms = {
	["zombied"] = true,
	["trader"] = true,
	["arena_enemy"] = true,
	["quest_stalker"] = true,
}

function cannot_take_that(npc)
	if ogse.is_quest_npc( npc ) or forbidden_comms[npc:character_community()] then return true end
	
	local name = npc:name()
	return
		name:find("doctor") or 
		name:find("doktor") or		   
		name:find("mil_stalker") or 
		name:find("ecolog") or 
		name:find("specnaz") or 
		name:find("scientist") or
		name:find("mil_freedom_member0021") or
		name:find("pri_followers")
end

--Тут мы проверяем нельзя ли нам лутать
--------------------------
function bad_situation(npc)
	if
		   has_alife_info("pre_blowout") --начинается выброс
		or not npc:alive() -- если мы трупик
		or cannot_take_that(npc) --Запрещённые профили и имена
		or xr_companion.is_companion(npc:id())
		or npc:best_enemy() -- если рядом враг
		or bad_danger(npc) -- если мы в опасности
	then
		return true
	end

	local actsch = db.storage[npc:id()].active_scheme  -- получим активную схему
	if actsch then
		if forbidden_schemes[actsch] or db.storage[npc:id()][actsch].no_loot then return true end  --если активная схема запрещает лут, возвращаем низзя
	end

	if xrs_battle_ai.cooldown[npc:id()] and xrs_battle_ai.cooldown[npc:id()] > time_global() then
		return true -- ещё не успокоились после боя
	end

	if
		   npc:position():distance_to(db.actor:position()) < 3 -- если актор ближе 3 метров, пытается пообщаццо (так же запрещает лут трупа актора, этого делать нельзя, будет вылет)
		or xr_wounded.is_wounded(npc)  -- если мы ранены и просим помощи
		or max_weight(npc) > 50.0 -- если непись и так уже нагрёб дохренища вещей
	then
		return true
	end

	--if has_alife_info("agr_krot_go_to_well") and not has_alife_info("agr_find_gunslinger_cache_found") and level.name() == "l03_agroprom" then
	--	return true -- чтобы не лезли под пули сталкеры Крота
	--end

	--if xrs_battle_ai.actor_see(npc) and npc:relation(db.actor) == game_object.enemy and db.actor:alive() then return true end
	
	local obj = getGObject( db.storage[npc:id()].watcher_act, npc )
	if obj and xr_kamp.deadman_assigned( obj:id() ) then
		return true
	end

	return false   
end

--[=[ --OLD
function item_inside_anomaly(item, storage)
	if item then
		local item_pos = item:position()
		local hasanom, anomid, pos, cls, dist, radius, sect_anom = ogse_anomaly.get_nearest_anomaly_by_point(item_pos)	
		if hasanom then
			if dist <= 5 then
				--- log1("BAD IDEA 1")
				storage.disabled_objects[item:id()] = true
				storage.dest_lvid = nil
				claimed_pos[item:level_vertex_id()] = nil
				freeGObject(storage)				
				--- log1("BAD IDEA 2")
				return true
			end
		end
	end
	return false
end
--]=]

--Будем исходить из предположения, что если предмет находится в
--аномалии, то его вертекс не доступен для непися. Поэтому нет нужды
--перебирать аномалии, ведь обходчик аномалий уже расставил ограничения.
function item_inside_anomaly( item, storage, npc )
  if item and not npc:accessible( item:level_vertex_id() ) then
    storage.disabled_objects[ item:id() ] = true
    storage.dest_lvid = nil
    claimed_pos[ item:level_vertex_id() ] = nil
    freeGObject( storage )
    return true
  end
  return false
end

-- Вызывает closure раз в period, obj[var] хранит время следующего срабатывания
function timed(obj,var,period,closure)
	if obj[var] and obj[var]<time_global() then
		obj[var] = time_global()+period
		closure()
	elseif not obj[var] then
		obj[var] = time_global()+period
--		closure()
	end
end

function trigger_timed(obj,var)
	obj[var] = time_global()
end


local disabled_objects = {}

local corpse_checked = {} -- true - has loot, false - hasn't loot, nil - not checked

function checkCorpse(obj)
	if (obj:is_stalker() or obj:is_monster()) and not obj:alive() then
		if corpse_checked[obj:id()]~=nil then
			return corpse_checked[obj:id()]
		end
		local cnt = 0
		obj:iterate_inventory(function (dummy, item)
			if not do_not_touch(item) then
				cnt = cnt + 1
			end
		end, nil)
		corpse_checked[obj:id()] = cnt > 0
		return cnt > 0
	end
	return false
end

local valuable_clsid = {

		[clsid.art_bast_artefact]		= true,
		[clsid.art_black_drops]			= true,
		[clsid.art_dummy]				= true,
		[clsid.art_electric_ball]		= true,
		[clsid.art_faded_ball]			= true,
		[clsid.art_galantine]			= true,
		[clsid.art_gravi]				= true,
		[clsid.art_gravi_black]			= true,
		[clsid.art_mercury_ball]		= true,
		[clsid.art_needles]				= true,
		[clsid.art_rusty_hair]			= true,
		[clsid.art_thorn]				= true,
		[clsid.art_zuda]				= true,
		[clsid.artefact]				= true,
		[clsid.artefact_s]				= true,
		
		[clsid.device_detector_simple]	= true,
		[clsid.device_pda]				= true,
		[clsid.device_torch_s]			= true,
		
		[clsid.equ_exo]					= true,
		[clsid.equ_military]			= true,
		[clsid.equ_scientific]			= true,
		[clsid.equ_stalker_s]			= true,
		
		[clsid.obj_antirad]				= true,
		[clsid.obj_attachable]			= true,
		[clsid.obj_bandage]				= true,
		[clsid.obj_bolt]				= true,
		[clsid.obj_bottle]				= true,
		[clsid.obj_food]				= true,
		[clsid.obj_medkit]				= true,

		[clsid.wpn_silencer]			= true,
		[clsid.wpn_scope_s]				= true,

		[clsid.wpn_ammo]				= true,
		[clsid.wpn_ammo_m209]			= true,
		[clsid.wpn_ammo_og7b]			= true,
		[clsid.wpn_ammo_vog25]			= true,		
	
		[clsid.wpn_ak74] 				= true,
		[clsid.wpn_ak74_s] 				= true,
		[clsid.wpn_bm16] 				= true,
		[clsid.wpn_bm16_s] 				= true,
		[clsid.wpn_fn2000] 				= true,
		[clsid.wpn_fort]				= true,
		[clsid.wpn_grenade_f1] 			= true,
		[clsid.wpn_grenade_launcher] 	= true,
		[clsid.wpn_grenade_rgd5] 		= true,
		[clsid.wpn_grenade_rpg7]		= true,
		[clsid.wpn_groza] 				= true,
		[clsid.wpn_groza_s] 			= true,
		[clsid.wpn_hpsa] 				= true,
		[clsid.wpn_hpsa_s] 				= true,
		[clsid.wpn_lr300] 				= true,
		[clsid.wpn_lr300_s] 			= true,
		[clsid.wpn_pm] 					= true,
		[clsid.wpn_pm_s] 				= true,
		[clsid.wpn_rg6] 				= true,
		[clsid.wpn_rg6_s] 				= true,
		[clsid.wpn_rpg7] 				= true,
		[clsid.wpn_rpg7_s] 				= true,
		[clsid.wpn_shotgun] 			= true,
		[clsid.wpn_shotgun_s] 			= true,
		[clsid.wpn_svd] 				= true,
		[clsid.wpn_svd_s] 				= true,
		[clsid.wpn_svu] 				= true,
		[clsid.wpn_svu_s] 				= true,
		[clsid.wpn_usp45] 				= true,
		[clsid.wpn_usp45_s] 			= true,
		[clsid.wpn_val] 				= true,
		[clsid.wpn_val_s] 				= true,
		[clsid.wpn_vintorez] 			= true,
		[clsid.wpn_vintorez_s] 			= true
	
}

local dead_enemy = {

[1] = [[characters_voice\human_01\dolg\reactions\dead_enemy\dead_enemy_1]],
[2] = [[characters_voice\human_01\dolg\reactions\dead_enemy\dead_enemy_2]],
[3] = [[characters_voice\human_01\dolg\reactions\dead_enemy\dead_enemy_3]],
[4] = [[characters_voice\human_01\dolg\reactions\dead_enemy\dead_enemy_4]],
[5] = [[characters_voice\human_01\dolg\reactions\dead_enemy\dead_enemy_5]]

}

local dead_friend = {

[1] = [[characters_voice\human_01\dolg\reactions\dead_friend\dead_friend_1]],
[2] = [[characters_voice\human_01\dolg\reactions\dead_friend\dead_friend_2]],
[3] = [[characters_voice\human_01\dolg\reactions\dead_friend\dead_friend_3]]

}

local dead_neutral = {

[1] = [[characters_voice\human_01\dolg\reactions\dead_neutral\dead_neutral_1]],
[2] = [[characters_voice\human_01\dolg\reactions\dead_neutral\dead_neutral_2]],
[3] = [[characters_voice\human_01\dolg\reactions\dead_neutral\dead_neutral_3]]

}

local dead_mutant = {

[1] = [[characters_voice\human_01\dolg\reactions\dead_mutant\dead_mutant_1]],
[2] = [[characters_voice\human_01\dolg\reactions\dead_mutant\dead_mutant_2]],
[3] = [[characters_voice\human_01\dolg\reactions\dead_mutant\dead_mutant_3]]

}

function postmortem_sound(npc, body)
	if npc and body then
		if not sound_timer[npc:id()] or sound_timer[npc:id()] < time_global() then
			local snd_name = nil
			if body:is_stalker() then
				if npc:relation(body) == game_object.friend then
					snd_name = dead_friend[math.random(1,3)]
				elseif npc:relation(body) == game_object.neutral then
					snd_name = dead_neutral[math.random(1,3)]
				elseif npc:relation(body) == game_object.enemy then
					snd_name = dead_enemy[math.random(1,5)]
				end			
			elseif body:is_monster() then
				snd_name = dead_mutant[math.random(1,3)]
			end			
			if snd_name then
				local snd_obj = xr_sound.get_safe_sound_object(snd_name)
				if snd_obj and not snd_obj:playing() then
					snd_obj:play_no_feedback(npc, sound_object.s3d, 0, npc:position(), 1.0)
					sound_timer[npc:id()] = time_global() + math.random(15000, 25000) 
				end
			end
		end
	end
end

function isValuable(obj)
	if valuable_clsid[obj:clsid()] then
		return true, false
	end
	return obj:is_artefact() or obj:is_ammo() or obj:is_weapon(), checkCorpse(obj)
end

function objValue(obj)
	local multiplier = 1
	if obj:is_ammo() then
		multiplier = 30
	elseif obj:is_artefact() then
		multiplier = 50		
	end

	return get_float(obj:section(), "cost", 0) * multiplier
end

function claimGObject(npc,st,obj)
	if st.grabitemid then
		obj_owner[st.grabitemid] = nil
	end
	st.grabitemid = obj:id()
	obj_owner[obj:id()] = npc:id()
	claimed_pos[obj:level_vertex_id()] = npc:id()
end

function freeGObject(st)
	if st.grabitemid then
		obj_owner[st.grabitemid]=nil
		st.grabitemid = nil
	end
end

function clearGObject(st)
	st.grabitemid = nil
end

function getGObject(st, npc)
	if st.grabitemid then
		local ret = level.object_by_id(st.grabitemid)
		if ret and item_inside_anomaly(ret, st, npc) then return nil end
		if not ret then
			st.grabitemid = nil
		end
		return ret
	end
	return nil
end

function correct_position(gi,npc)
	if gi:is_stalker() or gi:is_monster() then
		-- Вычисляем вектор разницы между координатами кости и level vertex. Пытаемся найти level vertex наиболее близкий к кости
		local real_vtx = gi:level_vertex_id()
		if npc:accessible(real_vtx) then
			return real_vtx
		else
			local diff = gi:bone_position(get_string(gi:section(), "bone_torso", "bip01_spine")):sub(gi:bone_position(get_string(gi:section(), "bone_head", "bip01_head")))
			local lengt = diff:magnitude()*2.5
			local test_lvid = npc:vertex_in_direction(gi,diff,lengt)
			if not npc:accessible(test_lvid) then
				return npc:accessible_nearest(level.vertex_position(test_lvid), vector():set(0,0,0))
			else
				return test_lvid
			end
		end
	else
		return gi:level_vertex_id()
	end
end


class "ev_see_stuff" (property_evaluator)

function ev_see_stuff:__init(st,name) super(nil, name)
	self.st = st
end
 
function ev_see_stuff:evaluate()
	local npc = self.object
	local res = getGObject(self.st, npc) ~= nil
--[=[-- Krodin: отключено по совету Naxac'a:
		По зависающим неписям - я тут методом тыка выявил, что очень часто в этом виноват вызов
		xr_logic.try_switch_to_another_section из watcher_act - некоторые неписи при переключении логики через неё виснут наглухо,
		помогает только перезагрузка. По идее, его там быть не должно, это же постоянно работающая схема.
		Но это такой соляночный костыль для принудительного переключения логики на случай несрабатывания этого же вызова из схемы -
		например, того же Круглова вылечивает от зависов. У меня в Припяти постоянно "волкеры" из-за этого костыля висли.

	local actsch = db.storage[npc:id()].active_scheme
	if actsch and db.actor then
		xr_logic.try_switch_to_another_section(npc, db.storage[npc:id()][actsch], db.actor)
	end
--]=]
	if bad_situation(npc) then
		if res then
			local g_obj = getGObject(self.st, npc)
			claimed_pos[g_obj:level_vertex_id()] = nil
			freeGObject(self.st)
		end
		return false
	end

	local act_sec = db.storage[npc:id()].active_section or ""
	local dist_limit = act_sec:find("camper") and 5 or 1000
	local busy = act_sec:find("walker") or act_sec:find("danger")
	if res then --NPC собрался взять вещь. Временно прекратим поиск.
		ogse_debug.add_active_eval( self.object, script_name(), "ev_see_stuff" )
		return true
	end

	timed(self.st,"tm1",5000+math.random()*10000,
		function ()
			if not self.st.block_search then
				-- непись намерен поискать вещь
				local min_dist = 100000

				---->>> local function check_item(o)
				local function check_item(o)
					local obj = o:object()

					if not obj or not obj.clsid or not alife():object(obj:id()) then return end

					if obj_owner[obj:id()] and 
						(level.object_by_id(obj_owner[obj:id()])==nil 
						or not level.object_by_id(obj_owner[obj:id()]):alive()) then
							obj_owner[obj:id()]=nil
					end

					if (not self.st.disabled_objects[obj:id()]) 
					and (not obj:parent() or not obj:parent():is_stalker())
					and (obj_owner[obj:id()]==nil or obj_owner[obj:id()]==npc:id()) 
					and npc:accessible(obj:level_vertex_id()) 
					and not (claimed_pos[obj:level_vertex_id()] and claimed_pos[obj:level_vertex_id()] ~= npc:id())
					and not item_inside_anomaly(obj, self.st, npc)
					and not do_not_touch(obj)
					and db.actor:position():distance_to_sqr(obj:position())>6 then
						local valuable,corpse = isValuable(obj)
						if valuable or corpse then
							local value = 3000
							if not corpse then
								value = objValue(obj)
							end
							if value <= 0 then value = 0 end
							local max_dist = 5+math.sqrt(value)
							if busy then max_dist = max_dist/5 end
							local dist = level.vertex_position(obj:level_vertex_id()):distance_to(npc:position())
							local corrected_dist = dist
							if dist > 5 then corrected_dist = 5+(dist-5)/math.sqrt(value) end
							if dist < max_dist 
							and corrected_dist < min_dist 
							and dist < dist_limit then
								min_dist = corrected_dist
								claimGObject(npc,self.st,obj)
								res = true
							end
						end
					end
				end
				----<<< local function check_item(o)			

				for o in npc:memory_visible_objects() do
					check_item(o)
				end
				for o in npc:memory_sound_objects() do
					check_item(o)
				end
				--if res then 
					-- ogse.log1(npc:character_name() .. " хочет забрать "..getGObject(self.st, npc):name().." - действие "..tostring(npc:motivation_action_manager():current_action_id()))
				--end
			end
		end
	)
	return false
end

class "ev_near_stuff" (property_evaluator)

function ev_near_stuff:__init(st,name) super(nil, name)
	self.st = st
end

function ev_near_stuff:evaluate()
	if not self.object:alive() or xr_wounded.is_wounded(self.object) or has_alife_info("pre_blowout") or self.object:best_enemy() then
		return false
	end
	local npc = self.object
	local gi = getGObject(self.st, npc)
	if gi then
		if gi:position():distance_to(npc:position()) <= desired_distance then
			ogse_debug.add_active_eval( self.object, script_name(), "ev_near_stuff" )
			return true
		end
		return false
	end
	return false
end

class "act_reach_item" (action_base)

function act_reach_item:__init (action_name, st) super (nil, action_name)
  self.st = st
end

function act_reach_item:initialize()
	action_base.initialize(self)
	local npc = self.object
	local gi = getGObject(self.st, npc)
	self.st.dest_lvid = nil
	if gi then
		-- if npc:accessible(gi:level_vertex_id()) then
			npc:movement_enabled(true)
			self.st.dest_lvid = correct_position(gi,npc)
		-- else
			-- claimed_pos[gi:level_vertex_id()] = nil
			-- freeGObject(self.st)
		-- end
	end
	self.ct = time_global()
	self.clvid = npc:level_vertex_id()
end

function act_reach_item:execute()
	action_base.execute(self)
	local npc = self.object
	local gi = getGObject(self.st, npc)
	if gi and gi:parent() ~= nil then
		-- ГГ забрал вкусность. Можно добавить наезд на ГГ.
		self.st.dest_lvid = nil
		claimed_pos[gi:level_vertex_id()] = nil
		freeGObject(self.st)
	elseif gi then
		if self.clvid == npc:level_vertex_id() then
			if time_global() - self.ct > 7000 then
				-- не можем добраться до нняки
				self.st.disabled_objects[gi:id()] = true
				self.st.dest_lvid = nil
				claimed_pos[gi:level_vertex_id()] = nil
				freeGObject(self.st)
			end
		else
			self.clvid = npc:level_vertex_id()
			self.ct = time_global()
		end
		local dist = npc:position():distance_to(gi:position())
		if dist > desired_distance then
			self.st.dest_lvid = correct_position(gi,npc)
			npc:set_detail_path_type(move.curve)
			npc:set_path_type(game_object.level_path)
			npc:set_desired_direction()
			npc:set_desired_position()
			utils.send_to_nearest_accessible_vertex(npc, self.st.dest_lvid)
			if npc:best_danger() and time_global() - npc:best_danger():time() < inertion_time then
				if dist > 15 then
					state_mgr.set_state( script_name(), npc, "patrol")
				else
					state_mgr.set_state( script_name(), npc, "sneak")
				end			
			else
				if dist > 15 then
					state_mgr.set_state( script_name(), npc, "run")
				else
					state_mgr.set_state( script_name(), npc, "walk")
				end
			end
		end
	end
end

function act_reach_item:finalize()
	action_base.finalize(self)
end

class "act_grab_item" (action_base)

function act_grab_item:__init (action_name, st) super (nil, action_name)
  self.st = st
end

function act_grab_item:initialize()
	action_base.initialize(self)
	local npc = self.object
	local gi = getGObject(self.st, npc)
	if gi then 
		npc:set_desired_direction()
		npc:set_desired_position()			
	end
	self.st.block_search = true
	self.st.rnd = math.random()
	if gi then
		if gi:is_stalker() or gi:is_monster() then
			self.tt = time_global() + 3000
			postmortem_sound(npc, gi)
		else
			self.tt = time_global() + 2200
		end
	else	
		claimed_pos[self.st.dest_lvid] = nil
		self.st.dest_lvid = nil
		freeGObject(self.st)
	end
end

function act_grab_item:execute()
	action_base.execute(self)
	local npc = self.object
	local gi = getGObject(self.st, npc)
	if not gi then
		if self.st and self.st.dest_lvid then
			claimed_pos[self.st.dest_lvid] = nil
			self.st.dest_lvid = nil
			freeGObject(self.st)
		end		
		return
	end
	if self.tt > time_global() then
		-- поднятие анимировать нам надо
		if gi:is_stalker() or gi:is_monster() then
			if gi:is_stalker() then
				state_mgr.set_state( npc, self.st.rnd > 0.5 and "obisk_trupa" or "obisk_trupa_2", nil, nil, {look_object = gi}, {animation = true, animation_nout = true} )
			else
				state_mgr.set_state( npc, "search", nil, nil, {look_object = gi}, {animation = true, animation_nout = true} )
			end
		else
			state_mgr.set_state( npc, "dynamite", nil, nil, {look_object = gi}, {animation = true, animation_nout = true} )
		end
	else
		-- поднимаем
		if gi and gi:parent() == nil and not do_not_touch(gi) then
			if gi:is_stalker() or gi:is_monster() then
				gi:iterate_inventory(function (d,item)
				if not do_not_touch(item) then 
					gi:transfer_item(item,npc)
				end end, nil)
				corpse_checked[gi:id()] = false -- нет больше лута тут
			else
				gi:transfer_item(gi,npc)
				npc:enable_memory_object(gi,false)
			end
			claimed_pos[gi:level_vertex_id()] = nil
			obj_owner[gi:id()] = nil
		end
		if gi and not (gi:is_stalker() or gi:is_monster()) then
			self.object:clear_animations()
			state_mgr.set_state( script_name(), npc, "sneak_no_wpn", nil, nil, nil, {animation = true})
		end
		-- *голосом мастера Йода* объект нельзя освобождать тут нам, асинхронно transfer_item выполняется, clearGObject делаем поэтому
		clearGObject(self.st)
	end
end

function act_grab_item:finalize()
	local npc = self.object
	self.st.block_search = nil
	trigger_timed(self.st,"tm1")
	self.st.dest_lvid = nil -- Очищаем скорректированную точку назначения
	action_base.finalize(self)
end

evid_see_stuff 		= 6931
evid_near_stuff 	= evid_see_stuff + 1

actid_reach_item 	= evid_see_stuff + 2
actid_grab_item 	= evid_see_stuff + 3

function add_to_binder(object, char_ini, scheme, section, st)
	local npc = object
	st.disabled_objects={}
	
	local state_mgr_to_idle_combat		= xr_actions_id.state_mgr + 1
	local state_mgr_to_idle_alife		= xr_actions_id.state_mgr + 2	
	
	local manager = object:motivation_action_manager()

	local zombi = 	npc:character_community()=="zombied" or 
					npc:character_community()=="trader" or
					npc:character_community()=="arena_enemy" or 
					npc:name()=="mil_stalker0012" or 
					npc:name()=="yantar_ecolog_general" or
					npc:name()=="mil_freedom_member0021"


	local prop_contact		=	xr_evaluators_id.stohe_meet_base + 1
	
	-- Evaluators
  
	if ogse.is_quest_npc(npc) or zombi then
		manager:add_evaluator(evid_see_stuff, property_evaluator_const(false))
		manager:add_evaluator(evid_near_stuff, property_evaluator_const(false))
	else
		manager:add_evaluator(evid_see_stuff, ev_see_stuff(st,"ev_see_stuff"))
		manager:add_evaluator(evid_near_stuff, ev_near_stuff(st,"ev_near_stuff"))
		
	-- Actions
	
		action = act_reach_item("act_reach_item", st)
		action:add_precondition(world_property(stalker_ids.property_alive,true))
		action:add_precondition(world_property(stalker_ids.property_enemy,false))
		action:add_precondition(world_property(xr_evaluators_id.sidor_wounded_base,false))
		if ogsm_hideout then
			action:add_precondition(world_property(ogsm_hideout.property_blowout, false))
			action:add_precondition(world_property(ogsm_hideout.property_hideout_lost, false))
			action:add_precondition(world_property(ogsm_hideout.property_inhide, false))
		end
		if xrs_ai then xrs_ai.addCommonPrecondition(action) end
		if rx_ai then rx_ai.addCommonPrecondition(action) end
		action:add_precondition(world_property(evid_near_stuff,false))
		action:add_precondition(world_property(evid_see_stuff,true))
		action:add_effect (world_property(evid_see_stuff, false))
		manager:add_action (actid_reach_item, action)	
	
		local action = act_grab_item("act_grab_item", st)
		action:add_precondition(world_property(stalker_ids.property_alive,true))
		action:add_precondition(world_property(stalker_ids.property_enemy,false))
		if ogsm_hideout then
			action:add_precondition(world_property(ogsm_hideout.property_blowout, false))
			action:add_precondition(world_property(ogsm_hideout.property_hideout_lost, false))
			action:add_precondition(world_property(ogsm_hideout.property_inhide, false))
		end
		if xrs_ai then xrs_ai.addCommonPrecondition(action) end
		if rx_ai then rx_ai.addCommonPrecondition(action) end
		action:add_precondition(world_property(evid_near_stuff,true))
		action:add_effect(world_property(evid_near_stuff, false))
		manager:add_action (actid_grab_item, action)

		action = manager:action(stalker_ids.action_alife_planner)
		action:add_precondition(world_property(evid_see_stuff, false))
		action:add_precondition(world_property(evid_near_stuff, false))  
	  
		action = manager:action(state_mgr_to_idle_alife)
		action:add_precondition(world_property(evid_see_stuff, false))
		action:add_precondition(world_property(evid_near_stuff, false))	

	end
end

function set_scheme(npc, ini, scheme, section)
  local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
  st.ini = ini
end
