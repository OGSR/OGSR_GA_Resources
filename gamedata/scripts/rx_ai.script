-- -*- mode: lua; coding: windows-1251-dos -*-

---- Rulix aka Bak --- 25.3.2009

--------------------------------------utils------------------------------------------

function count_table(t)
	if type(t) ~= "table" then
		return
	end
	local cnt = 0
	for k,v in pairs(t) do
		cnt = cnt+1
	end
	return cnt
end

function get_storage(id,name)
	if not id then
		return
	end
	local st = db.storage[id]
	if not st then
		return
	end
	if not st.rx_ai then
		st.rx_ai = {}
	end
	if not name then
		return st.rx_ai
	end
	if not st.rx_ai[name] then
		st.rx_ai[name] = {}
	end
	return st.rx_ai[name]
end

------------------------------------callbacks--------------------------------------
function npc_switch_offline(npc) -- не вызывалось в огсе.
	unsubscribe_from_events(npc)
end

function npc_death(npc,who)
	if npc then
		issue_event(npc,"death_callback",who)
		unsubscribe_from_events(npc)
	end
end

function npc_hit(npc,amount,dir,who,bone_id) --Было закомментировано в мотиваторе в оригинале огсе.
	if npc --[[and amount ~= 0]] then
		issue_event(npc,"hit_callback",amount,dir,who,bone_id)
	end
end


function issue_event(npc,name,...)
if npc then
	local st = get_storage(npc:id(),"events")
	if not st then
		return
	end
	for k,v in pairs(st) do
		if v and k[name] then
			k[name](k,...)
		end
	end
end
end

function subscribe_for_events(npc,obj)
	local st = get_storage(npc:id(),"events")
	st[obj] = true
end

function unsubscribe_from_events(npc,obj)
	local st = npc and get_storage(npc:id(),"events")
	if st then
		if obj then
			st[obj] = nil
		else
			st = nil
		end
	end
end

base_id = 18800

function load_schemes()
	if rx_gl then
		load_scheme("rx_gl","launch_grenade",modules.stype_stalker)
	end
	if rx_facer then
		load_scheme("rx_facer","facer",modules.stype_stalker)
	end
	if rx_bandage and rx_bandage.enable_scheme then
		load_scheme("rx_bandage","bandage",modules.stype_stalker)
	end
end

function disable_schemes(npc)
--[[
	if rx_gl then
		rx_gl.disable_scheme(npc,"launch_grenade")
	end
	if rx_facer then
		rx_facer.disable_scheme(npc,"facer")
	end
	if rx_knife then
		rx_knife.disable_scheme(npc,"knife")
	end]]
end

function enable_schemes(ini,npc)
	if rx_gl then
		rx_gl.set_scheme(npc,ini,"launch_grenade","launch_grenade")
	end
	if rx_facer then
		rx_facer.set_scheme(npc,ini,"facer","facer")
	end
	if rx_bandage and rx_bandage.enable_scheme then
		rx_bandage.set_scheme(npc,ini,"bandage","bandage")
	end
end

function addCommonPrecondition(action)
	if rx_gl then
		action:add_precondition(world_property(rx_gl.evid_gl_reload,false))
	end
	if rx_facer then
		action:add_precondition(world_property(rx_facer.evid_facer,false))
	end
	if rx_bandage and rx_bandage.enable_scheme then
		action:add_precondition(world_property(rx_bandage.evid_bandage,false))
	end
end

------------------------------------eating----------------------------------------
local eating = {
  enabled = sys_ini:section_exist( "npc_eating" )
    and sys_ini:r_bool( "npc_eating", "enabled" )
}


function eat_init()
  local sect = "npc_eating"
  eating.exc_comms = rx_utils.parse_list(
    sys_ini, sect, "excluded_communities", true
  )
  eating.exc_npcs  = rx_utils.parse_list( sys_ini, sect, "excluded_npcs", true )
  eating.ic        = rx_utils.read_from_ini(
    sys_ini, sect, "in_combat", false, 0
  )
  eating.oc        = rx_utils.read_from_ini(
    sys_ini, sect, "out_combat", true, 0
  )
  eating.max_h     = rx_utils.read_from_ini(
    sys_ini, sect, "medkit_health", 50
  ) / 100
  eating.min_b     = rx_utils.read_from_ini(
    sys_ini, sect, "bandage_bleeding", 0.2
  )
  eating.medkits   = rx_utils.parse_list( sys_ini, sect, "medkits"  )
  eating.bandages  = rx_utils.parse_list( sys_ini, sect, "bandages" )
  eating.delay     = rx_utils.parse_list( sys_ini, sect, "delay"    )
  eating.initialized = true
end


function eat_medkit( npc )
  ogse_signals.get_mgr():reschedule( math.random( 1000, 5000 ) )
  local st = get_storage( npc:id(), "eating" )
  if st.disabled then return end
  local enemy = npc:best_enemy()
  if
    xr_wounded.is_wounded( npc )
    or ( not eating.ic and enemy )
    or ( not eating.oc and not enemy )
  then
    st.item = nil
    st.time = nil
    return
  end
  if st.item then
    local med = npc:object( st.item )
    if med then
      rx_utils.eat_medkit( npc, med )
    end
    st.item = nil
    return
  end
  if npc.health < eating.max_h and not xr_wounded.is_wounded( npc ) then
    for k, v in ipairs( eating.medkits ) do
      local medkit = npc:object( v )
      if medkit then
        st.item = v
        ogse_signals.get_mgr():reschedule(
          math.random( eating.delay[ 1 ], eating.delay[ 2 ] )
        )
        return
      end
    end
  end
  if npc:get_bleeding() > eating.min_b then
    for k, v in ipairs( eating.bandages ) do
      local bandage = npc:object( v )
      if bandage then
        st.item = v
        ogse_signals.get_mgr():reschedule(
          math.random( eating.delay[ 1 ], eating.delay[ 2 ] )
        )
        return
      end
    end
  end
end


function attach( sm )
  sm:subscribe({ signal = "on_npc_death", fun = this.on_death     })
  sm:subscribe({ signal = "on_npc_spawn", fun = this.on_npc_spawn })
----------
  --sm:subscribe({ signal = "on_npc_hit", fun = this.npc_hit }) --Было закомментировано в мотиваторе в оригинале огсе.
  sm:subscribe({ signal = "on_npc_net_destroy", fun = this.npc_switch_offline }) -- не вызывалось в огсе.
  sm:subscribe({ signal = "on_npc_death", fun = this.npc_death })
end


function on_npc_spawn( obj, binder )
  if not obj:alive() then return end
  if eating.enabled then
    if not eating.initialized then eat_init() end
    if
      not (
        eating.exc_comms[ obj:character_community() ]
        or eating.exc_npcs[ obj:name() ]
      )
    then
      local s = {
        [ "signal" ] = "on_npc_update." .. obj:id(),
        [ "fun"    ] = this.eat_medkit,
        [ "queued" ] = true,
      }
      binder[ script_name() .. ".subscribed" ] = s
      ogse_signals.get_mgr():subscribe( s )
    end
  end
end


function on_death( obj )
  local binder     = obj:binded_object()
  local subscribed = binder[ script_name() .. ".subscribed" ]
  if subscribed then
    ogse_signals.get_mgr():unsubscribe( subscribed )
    binder[ script_name() .. ".subscribed" ] = nil
  end
end
