-- -*- mode: lua; encoding: windows-1251 -*-

local kScreen = math.min( (1024/768) / (device().width/device().height), 1 )
local cell_size = 25		-- размер иконки в описании свойств предмета
local vert_interval = 1		-- параметр vert_interval в скролле

local shift_show_descr = 700  -- через какое время после наведения курсора будет показано окно, ms


local is_grenade={
	[clsid.wpn_grenade_f1]		= true,
	[clsid.wpn_grenade_fake]	= true,
	[clsid.wpn_grenade_rgd5]	= true,
	[clsid.wpn_grenade_rpg7]	= true,
	[clsid.wpn_ammo_m209]		= true,
	[clsid.wpn_ammo_vog25]		= true,
	[clsid.wpn_ammo_og7b]		= true
}

-- Пушки, для которых дополнительное описание не пишем
local forbidden_wpns = {
	['wpn_binoc']                   = true,		-- бинокль
}

local forbidden_ammo = {
	['ammo_vog-25']		= true,
	['ammo_vog-25p']	= true,
	['ammo_m209']		= true,
	['ammo_og-7b']	    = true,
}

-- Параметры актёра, по которым считаются некоторые параметры артефактов или костюмов
local conditions = {
	bleeding_restore_speed	= get_float('actor_condition', 'bleeding_v'),
	health_restore_speed	= get_float('actor_condition', 'satiety_health_v'),
	power_restore_speed		= get_float('actor_condition', 'satiety_power_v') *100,
	satiety_restore_speed	= get_float('actor_condition', 'satiety_v'),
	thirst_restore_speed	= get_float('actor_condition', 'thirst_v'),
	radiation_restore_speed	= get_float('actor_condition', 'radiation_v') *100
}
-- параметры костюмов и артов
local conditions_params = {
	{ prop = "health_restore_speed",	text = string.format("%s:", game.translate_string("ui_inv_health")),		tex = "health"		},
	{ prop = "bleeding_restore_speed",	text = string.format("%s:", game.translate_string("ui_inv_bleeding")),	    tex = "bleeding"	},
	{ prop = "satiety_restore_speed",	text = string.format("%s:", game.translate_string("ui_inv_satiety")),		tex = "satiety"		},
	{ prop = "thirst_restore_speed",	text = string.format("%s:", game.translate_string("ui_inv_thirst")),		tex = "thirst"		},
	{ prop = "power_restore_speed",		text = string.format("%s:", game.translate_string("ui_inv_power")),	    	tex = "power"		},
	{ prop = "radiation_restore_speed",	text = string.format("%s:", game.translate_string("ui_inv_radiation")),		tex = "radiation_2", unit = "Ки"	},
}
-- Типы хитов и соответствующие им текстуры и названия
local hit_types = {
	{ prop = "burn",			text = string.format("%s:", game.translate_string("ui_inv_outfit_burn_protection")),			},
	{ prop = "shock",			text = string.format("%s:", game.translate_string("ui_inv_outfit_shock_protection")),	        },
	{ prop = "strike",			text = string.format("%s:", game.translate_string("ui_inv_outfit_strike_protection")),	        },
	{ prop = "wound",			text = string.format("%s:", game.translate_string("ui_inv_outfit_wound_protection")),	        },
	{ prop = "radiation",		text = string.format("%s:", game.translate_string("ui_inv_outfit_radiation_protection")),	    },
	{ prop = "telepatic",		text = string.format("%s:", game.translate_string("ui_inv_outfit_telepatic_protection")),	    },
	{ prop = "chemical_burn",	text = string.format("%s:", game.translate_string("ui_inv_outfit_chemical_burn_protection")),	},
	{ prop = "explosion",		text = string.format("%s:", game.translate_string("ui_inv_outfit_explosion_protection")),	    },
	{ prop = "fire_wound",		text = string.format("%s:", game.translate_string("ui_inv_outfit_fire_wound_protection")),	    },
}
-- Параметры еды
local eatable_params = {
	{ prop = "eat_health",				text = string.format("%s:", game.translate_string("ui_inv_health")),		tex = "health"		},
	{ prop = "wounds_heal_perc",		text = string.format("%s:", game.translate_string("ui_inv_bleeding")),		tex = "bleeding"	},
	{ prop = "eat_psy_health",			text = string.format("%s:", game.translate_string("ui_inv_psy_health")),	tex = "telepatic"	},
	{ prop = "eat_satiety",				text = string.format("%s:", game.translate_string("ui_inv_satiety")),		tex = "satiety"		},
	{ prop = "eat_power",				text = string.format("%s:", game.translate_string("ui_inv_power")),	    tex = "power"		},
	{ prop = "eat_thirst",              text = string.format("%s:", game.translate_string("ui_inv_thirst")),     	tex = "thirst"		},
	{ prop = "eat_alcohol",				text = string.format("%s:", game.translate_string("ui_inv_alcohol")),		tex = "alcohol"		},
	{ prop = "eat_radiation",			text = string.format("%s:", game.translate_string("ui_inv_radiation")),	tex = "radiation_2"	},
}
--------------------------------------------------------------------------------------------------------
class "CUIDescriptionWnd" (CUIScriptWnd)

function CUIDescriptionWnd:__init(owner) super()
	self.owner = owner

	self.scrollPos = 0
	self.k_icon = cell_size*kScreen/50
	
	self:Init(0, 0, 1024, 768)
	self:SetAutoDelete(true)
	
	self.xml = CScriptXmlInit()
	self.xml:ParseFile("ui_inv_descr.xml")
	
	self.frame = self.xml:InitFrame("description", owner)
	
	self.inv_name = self.xml:InitStatic("description:inv_name", self.frame)
	
	self.scroll_v = self.xml:InitScrollView("description:scroll_v", self.frame)
	self.scroll_height = self.scroll_v:GetHeight()
	self.descr = self.xml:InitStatic("description:descr_list", nil)
	
	self.cost = self.xml:InitStatic("description:cost_wnd", self.frame)
	self.weight_static = self.xml:InitStatic("description:weight_wnd", self.frame)
	
	self.cond_frame = self.xml:InitStatic("description:frame_condition", self.frame)
	self.cond_scale = self.xml:InitProgressBar("description:condition_progress", self.cond_frame)

	self.frame:Show(false)

	self:subscribe()
end

function CUIDescriptionWnd:__finalize()
end

function CUIDescriptionWnd:subscribe()
  if not subscribed then
    subscribed = {
      { signal = "on_cell_item_focus", fun = self.OnItemFocus, self = self },
      { signal = "on_cell_item_focus_lost", fun = self.OnItemFocusLost, self = self },
      { signal = "on_key_down", fun = self.OnKeyPress, self = self },
      { signal = "on_update",  fun = self.OnUpdate, self = self },
    }
    local sm = ogse_signals.get_mgr()
    for _, s in ipairs( subscribed ) do
      sm:subscribe( s )
    end
  end
  self.itemInFocus = -1
  self.keypressed = nil
end

function CUIDescriptionWnd:unsubscribe()
  if subscribed then
    local sm = ogse_signals.get_mgr()
    for _, s in ipairs( subscribed ) do
      sm:unsubscribe( s )
    end
    subscribed = false
  end
  self.itemInFocus = -1
  self.shift_tmr = nil
  self.keypressed = nil
  self.frame:Show(false)
end

function CUIDescriptionWnd:HideDescription()
	if self.frame:IsShown() then self.frame:Show(false) end
end

function CUIDescriptionWnd:ShowProps(tbl)
	local st
	for i, t in ipairs(tbl) do
		st = self.xml:InitStatic("props", self.scroll_v)
		st.icon = self.xml:InitStatic("props:prop_texture", st)
		st.icon:InitTexture("ui_inv_icon_"..t[1])
		st.text = self.xml:InitStatic("props:prop_text", st)
		st.text:SetText(t[2])
		self.addH = self.addH + st:GetHeight() + vert_interval
	end
end

function CUIDescriptionWnd:ShowPropFromIni(sect, icon, text)
    local st = self.xml:InitStatic("props_ini", self.scroll_v)
    st:SetHeight(cell_size)

    local www = icon.grid_width*50

    local w = www*self.k_icon
    local ww = cell_size*2
    st.icon = CUIStatic()
    st:AttachChild(st.icon)
    CIconParams( sect ):set_shader( st.icon )

    st.icon:Init((ww-w)/2, 0, w, cell_size)


    ww = ww + 1
    st.text = CUIStatic()
    st:AttachChild(st.text)
    st.text:Init(ww, 0, st:GetWidth()-ww, cell_size)
    st.text:SetTextY((cell_size/2)-8)
    st.text:SetTextST(text)
    st.text:SetTextColor(255, 160, 160 ,160)

    self.addH = self.addH + cell_size + vert_interval
end

function CUIDescriptionWnd:ShowDescription(item)
	if not item then return end
	
	if not self.owner then return end
	
	self.scroll_v:Clear()
	
	self.item = item
	self.section = item:section()
	self.condition = item:condition()

	local inv_name = news_manager.get_inv_name(self.section)

	self.addH = 0

	local description = game.translate_string(sys_ini:r_string(self.section, "description"))

	self.inv_name:SetTextST(inv_name)

	self.descr:SetText(description)
	self.descr:AdjustHeightToText()
	self.scroll_v:AddWindow(self.descr, true)
	self.descr:SetAutoDelete(false)
	self.scroll_v:ScrollToBegin()
	self.scrollPos = 0


	-- food
	if item:is_eatable_item() then
		self:ShowEatableParams()
	-- weapon
	elseif item:is_weapon_magazined() then
		if not forbidden_wpns[self.section] then
			self:ShowWeaponParams()
		end
		-- artefacts
	elseif item:is_artefact() then
		self:ShowAfParams()
	-- outfits
	elseif item:is_outfit() then
		self:ShowOutfitParams()
	-- knife
	elseif item:is_knife() then
		local d = get_float(self.section, 'fire_distance')
		self:ShowProps( { {"fire_distance_knife", string.format("%s: %.2f %s", game.translate_string("descr_knife_distance"), d, game.translate_string("descr_meters"))} } )
	-- grenade
	elseif item:is_grenade() then
		local fr = get_float(self.section, 'frags_r')
		local br =  get_float(self.section, 'blast_r')
		self:ShowProps( { {"explosion", string.format("%s: %.1f %s", game.translate_string("descr_radius"), (fr+br)/2, game.translate_string("descr_meters"))} } )
	-- ammo
	elseif item:is_ammo() and not item:is_grenade() then
		if not forbidden_ammo[self.section] then
			local kh = get_float(self.section, 'k_hit')
			local bs = get_float(self.section, 'buck_shot')
			self:ShowProps( { {"explosion", string.format("%s: %.2f", game.translate_string("descr_damage_ammo"), (kh*bs))} } )
		end
	end

	self.weight_static:SetText(string.format("%s: %.2f %s", game.translate_string("descr_weight"), item:get_weight(), game.translate_string("descr_kg")) )
	self.cost:SetText(string.format("%s: %d %s", game.translate_string("descr_cost"), get_actual_cost(item), game.translate_string("descr_rub")) )

	if need_show_condition(item) then
		self.cond_frame:Show(true)
		self.cond_frame:SetText(string.format("%s: %.1f%%", game.translate_string("descr_condition"), self.condition*100))
		self.cond_scale:SetProgressPos(self.condition * 100)
	else
		self.cond_frame:Show(false)
	end

	local hh = self.descr:GetHeight() + self.addH
	if hh < 678 then
		self.frame:SetHeight(hh + 90)
		self.scroll_work = nil
	else
		self.frame:SetHeight(768)
		self.scroll_work = true
	end

	local cr = self.owner:GetMousePosX()
	if cr>=512 then cr = cr - self.frame:GetWidth()
	else cr = cr + 40 end

	self.frame:SetWndPos(cr, math.min(self.owner:GetMousePosY(), 768-self.frame:GetHeight()))

	self.frame:Show(true)
end

-- Показываем параметры съедобных предметов
function CUIDescriptionWnd:ShowEatableParams()
	local params = {}
	local tm, val, txt = nil, 0, ""
	for i, t in ipairs(eatable_params) do
		val = get_float(self.section, t.prop, 0)
		if val~=0 then
			txt = t.text.." "
			if t.prop == "wounds_heal_perc" then
				txt = txt..(val>0 and "%c[green]" or "%c[red]+")
				val = -val
			elseif t.prop == "eat_alcohol" or t.prop == "eat_radiation" then
				txt = txt..(val>0 and "%c[red]+" or "%c[green]")
			else
				txt = txt..(val>0 and "%c[green]+" or "%c[red]")
			end			
			txt = txt..string.format("%d",val*100)..(t.unit or "%")
			table.insert( params, {t.tex, txt} )
		end
	end

		local tm = get_float(self.section, 'effect_time')
		if tm then
			self:ShowProps( { {"time", string.format("%s: %d %s", game.translate_string("descr_time"), tm, game.translate_string("descr_seconds"))} } )
		end

	if #params>0 then
		self:ShowProps(params)
	end
end

-- Показываем описание оружия
function CUIDescriptionWnd:ShowWeaponParams()
	local st = self.xml:InitStatic("props", self.scroll_v)
	local stH = st:GetHeight() + vert_interval
	self.addH = self.addH + stH

	st = self.xml:InitStatic("props", self.scroll_v)
	st:SetText(string.format("%s", game.translate_string("descr_ammo_weapon")))
	st:SetTextColor(255, 0, 255, 110)
	self.addH = self.addH + stH
	-- Боеприпасы
	local s = sys_ini:r_string(self.section, 'ammo_class')
    for a in string.gfind(s, "[%w_%-%.]+") do
        self:ShowPropFromIni( a, CIconParams(a), news_manager.get_inv_name(a) )
    end

	self.xml:InitStatic("props", self.scroll_v)
	self.addH = self.addH + 20

	local st = self.xml:InitStatic("props", self.scroll_v)
	local stH = st:GetHeight() + vert_interval
	self.addH = self.addH + 25

	hit = get_float(self.section, 'hit_power')

	st:SetHeight(25)

	local tex_name, tex_rect = get_texture_info( "ui_mg_progress_full" )	

	st.icon_hit = self.xml:InitStatic("props:prop_texture", st)
	st.icon_hit:InitTexture("ui_inv_icon_hit_power")

	st.scale_hit_b = CUIStatic()
	st:AttachChild(st.scale_hit_b)
	st.scale_hit_b:Init( "ui_mg_progress_full", 20, 15, 118, 6 )
	st.scale_hit_b:SetStretchTexture(true)
	st.scale_hit_b:SetColor( GetARGB(255, 0, 0, 0) )

	st.scale_hit = CUIStatic()
	st:AttachChild(st.scale_hit)
	st.scale_hit:Init( tex_name, 20, 15, 118*hit, 6 )
	st.scale_hit:SetStretchTexture(true)
	st.scale_hit:SetOriginalRect( tex_rect.x1, tex_rect.y1, tex_rect.x2*hit, tex_rect.y2 )
	st.scale_hit:SetColor( GetARGB(255, 100, 34, 40) )
	st.scale_hit:SetText(string.format("%s: %.2f", game.translate_string("descr_damage"), hit))
	st.scale_hit:SetTextY(-17)


	local st = self.xml:InitStatic("props", self.scroll_v)
	local stH = st:GetHeight() + vert_interval
	self.addH = self.addH + 25

	distance = get_float(self.section, 'fire_distance')

	st:SetHeight(25)

	st.icon_distance = self.xml:InitStatic("props:prop_texture", st)
	st.icon_distance:InitTexture("ui_inv_icon_fire_distance")

	st.scale_distance_b = CUIStatic()
	st:AttachChild(st.scale_distance_b)
	st.scale_distance_b:Init( "ui_mg_progress_full", 20, 15, 118, 6 )
	st.scale_distance_b:SetStretchTexture(true)
	st.scale_distance_b:SetColor( GetARGB(255, 0, 0, 0) )

	st.scale_distance = CUIStatic()
	st:AttachChild(st.scale_distance)
	st.scale_distance:Init( tex_name, 20, 15, 118*(distance/1000), 6 )
	st.scale_distance:SetStretchTexture(true)
	st.scale_distance:SetOriginalRect( tex_rect.x1, tex_rect.y1, tex_rect.x2*(distance/1000), tex_rect.y2 )
	st.scale_distance:SetColor( GetARGB(255, 100, 34, 40) )
	st.scale_distance:SetText(string.format("%s: %d %s", game.translate_string("descr_distance"), distance, game.translate_string("descr_meters")))
	st.scale_distance:SetTextY(-17)


	local st = self.xml:InitStatic("props", self.scroll_v)
	local stH = st:GetHeight() + vert_interval
	self.addH = self.addH + 25

	rpm = get_float(self.section, 'rpm')

	st:SetHeight(25)

	st.icon_rpm = self.xml:InitStatic("props:prop_texture", st)
	st.icon_rpm:InitTexture("ui_inv_icon_rpm")

	st.scale_rpm_b = CUIStatic()
	st:AttachChild(st.scale_rpm_b)
	st.scale_rpm_b:Init( "ui_mg_progress_full", 20, 15, 118, 6 )
	st.scale_rpm_b:SetStretchTexture(true)
	st.scale_rpm_b:SetColor( GetARGB(255, 0, 0, 0) )

	st.scale_rpm = CUIStatic()
	st:AttachChild(st.scale_rpm)

	st.scale_rpm:Init( tex_name, 20, 15, 118*(rpm/1000), 6 )
	st.scale_rpm:SetStretchTexture(true)
	st.scale_rpm:SetOriginalRect( tex_rect.x1, tex_rect.y1, tex_rect.x2*(rpm/1000), tex_rect.y2 )
	st.scale_rpm:SetColor( GetARGB(255, 100, 34, 40) )
	st.scale_rpm:SetText(string.format("%s: %d %s", game.translate_string("descr_rate"), rpm, game.translate_string("descr_speed")))
	st.scale_rpm:SetTextY(-17)

	local st = self.xml:InitStatic("props", self.scroll_v)
	local stH = st:GetHeight() + vert_interval
	self.addH = self.addH + 25

	mag_size = get_float(self.section, 'ammo_mag_size')

	st:SetHeight(25)

	st.icon_mag_size = self.xml:InitStatic("props:prop_texture", st)
	st.icon_mag_size:InitTexture("ui_inv_icon_ammo_mag_size")
	st.icon_mag_size:SetText(string.format("%s: %d %s", game.translate_string("descr_mag_size"), mag_size, game.translate_string("descr_ammo")))
	st.icon_mag_size:SetTextX(19)
	st.icon_mag_size:SetTextY(2)

	local n1 = get_float(self.section, 'scope_status')

	-- Прицелы
	if n1 == 2 then
		local s1 = sys_ini:line_exist(self.section, 'scope_names') and sys_ini:r_string(self.section, 'scope_names') or sys_ini:r_string(self.section, 'scope_name')
		st = self.xml:InitStatic("props", self.scroll_v)
		st:SetText(sys_ini:line_exist(self.section, 'scope_names') and game.translate_string("descr_scopes") or game.translate_string("descr_scope"))
		st:SetTextColor(255, 0, 255, 110)
		self.addH = self.addH + stH
		for a in string.gfind(s1, "[%w_%-%.]+") do
			self:ShowPropFromIni( a, CIconParams(a), news_manager.get_inv_name(a) )
		end
	end

	local n2 = get_float(self.section, 'silencer_status')

	-- Глушитель
	if n2 == 2 then
	local s2 = sys_ini:r_string(self.section, 'silencer_name')	
	st = self.xml:InitStatic("props", self.scroll_v)
	st:SetText(game.translate_string("descr_silencer"))
	st:SetTextColor(255, 0, 255, 110)
	self.addH = self.addH + stH
    for a in string.gfind(s2, "[%w_%-%.]+") do
        self:ShowPropFromIni( a, CIconParams(a), news_manager.get_inv_name(a) )
    end
end

	local n3 = get_float(self.section, 'grenade_launcher_status')

	-- Подствольник
	if n3 == 2 then
	local s3 = sys_ini:r_string(self.section, 'grenade_launcher_name')	
	st = self.xml:InitStatic("props", self.scroll_v)
	st:SetText(game.translate_string("descr_pg"))
	st:SetTextColor(255, 0, 255, 110)
	self.addH = self.addH + stH
    for a in string.gfind(s3, "[%w_%-%.]+") do
        self:ShowPropFromIni( a, CIconParams(a), news_manager.get_inv_name(a) )
    end
end

end

-- Показываем параметры артефактов
function CUIDescriptionWnd:ShowAfParams()
	local params = {}
	local val, txt = 0, ""

	for i,t in ipairs(conditions_params) do
		val = get_float(self.section, t.prop, 0)
		if val~=0 then
			val = val*100/conditions[t.prop]
			txt = t.text.." "
			if t.prop == "bleeding_restore_speed" then
				txt = txt..(val>0 and "%c[green]" or "%c[red]+")
				val = -val
			elseif t.prop == "radiation_restore_speed" then
				txt = txt..(val>0 and "%c[red]+" or "%c[green]")
			else
				txt = txt..(val>0 and "%c[green]+" or "%c[red]")
			end
			txt = txt..string.format("%d",val)..(t.unit or "%")
			table.insert( params, {t.tex, txt} )
		end
	end

	local hit_absorbation_sect = sys_ini:r_string(self.section, "hit_absorbation_sect")
	for i,t in ipairs(hit_types) do
		val = get_float(hit_absorbation_sect, t.prop.."_immunity")
		if val~=1 then
			val = 100-val*100
			txt = t.text.." "..(val<0 and "%c[red]" or "%c[green]+")..string.format("%d%%",val)
			table.insert( params, {t.prop, txt} )
		end
	end

	if sys_ini:line_exist(self.section, "additional_inventory_weight2") then
		val = get_float(self.section, "additional_inventory_weight2")
		if val~=0 then
			txt = string.format("%s: ", game.translate_string("descr_weight_power"))..(val>0 and "%c[green]+" or "%c[red]")..string.format("%.1f %s", val, game.translate_string("descr_kg"))
			table.insert( params, {"additional_weight", txt} )
		end
	end

	if #params > 0 then
		self:ShowProps(params)
	end
end
-- Показываем параметры костмов
function CUIDescriptionWnd:ShowOutfitParams()
	local params = {}
	local val, txt = 0, ""
	for i,t in ipairs(hit_types) do
		val = get_float(self.section, t.prop.."_protection")
		if val~=0 then
			val = val*100*self.condition
			txt = t.text.." "..(val<0 and "%c[red]" or "%c[green]+")..string.format("%d%%",val)
			table.insert( params, {t.prop, txt} )
		end
	end

	if sys_ini:line_exist(self.section, "additional_inventory_weight2") then
		val = get_float(self.section, "additional_inventory_weight2")
		if val~=0 then
			txt = string.format("%s: ", game.translate_string("descr_weight_power"))..(val>0 and "%c[green]+" or "%c[red]")..string.format("%d%s", val, game.translate_string("descr_kg"))
			table.insert( params, {"additional_weight", txt} )
		end
	end
	
	if sys_ini:line_exist(self.section, "artefact_count") then
		val = get_float(self.section, "artefact_count")
		if val~=0 then
			txt = string.format("%s: ", game.translate_string("descr_art_count")).."%c[green]"..string.format("%d%s", val, game.translate_string("descr_count"))
			table.insert( params, {"settings", txt} )
		end
	end

	if #params > 0 then
		self:ShowProps(params)
	end
end


function CUIDescriptionWnd:Remove()
	self:unsubscribe()
	self.shift_tmr = nil
	self.keypressed = nil
	self.owner = nil
end

function CUIDescriptionWnd:OnItemFocus( obj )
	self.itemInFocus = obj:id()

	self.shift_tmr = time_global() + shift_show_descr
end

function CUIDescriptionWnd:OnItemFocusLost( obj )
	if self.itemInFocus == obj:id() then
		self.itemInFocus = nil
	end
	if not self.keypressed then
		self:HideDescription()
	end
end

function CUIDescriptionWnd:OnUpdate( delta ) --Если сюда передали аргументом передали true - обновление будет форсировано.
	if ( not self.keypressed and self.shift_tmr and self.shift_tmr < time_global() ) or delta == true then
		if self.itemInFocus and ( self.itemInFocus > 65535 or alife():object( self.itemInFocus ) ) then
			self:ShowDescription( level.object_by_id(self.itemInFocus) )
		end
		self.shift_tmr = nil
	end
end

function CUIDescriptionWnd:OnKeyPress(key, bind)
	if bind ~= key_bindings.kFOCUS then return end

	if self.itemInFocus then
		self:OnUpdate(true)
		self.keypressed = true
	else
		self.keypressed = nil
		self:HideDescription()
	end
end

function need_show_condition(item)
	local b = sys_ini:r_bool(item:section(), "show_condition", nil)
	return ( ( item:is_weapon() or item:is_outfit() ) and b ~= false ) or b == true
end

function get_actual_cost(obj) -- костыль для расчета реально цеты айтема в окне торговли. не лутшее решение но в целом пойдет
    local trade_wnd = level.get_trade_wnd()
    if trade_wnd and trade_wnd:IsShown() then
        local b_buying = obj:parent() and obj:parent():id() == db.actor:id()
        local trader = level:get_second_talker()
        if trader then
            local cur_price = trader:calculate_item_price(obj, b_buying)
            return cur_price
        end
    end
    return obj:cost()
end
