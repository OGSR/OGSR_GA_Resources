-- -*- mode: lua; coding: windows-1251-dos -*-

function attach( sm )
  --sm:subscribe({ signal = "on_monster_enemy_callback", fun = this.enemy_callback }) --KRodin: это мне не нужно.
  sm:subscribe({ signal = "on_npc_enemy_callback", fun = this.enemy_callback })
  sm:subscribe({ signal = "on_spawn",              fun = this.on_spawn       })
end


local ignore_enemies = {}

function on_spawn()
  local dsh_sections = {
    "dsh.enemy.ignore",
    "dsh.enemy.ignore." .. level.name(),
  }
  for _, dsh_sect in ipairs( dsh_sections ) do
    if sys_ini:section_exist( dsh_sect ) then
      for _, k in ipairs( get_section_keys( dsh_sect ) ) do
        if not ignore_enemies[ k ] then
          ignore_enemies[ k ] = {}
        end
        local t = ignore_enemies[ k ]
        for _, n in ipairs( parse_names( get_string( dsh_sect, k ) ) ) do
          t[ n ] = true
        end
        for n, _ in pairs( t ) do
          if not ignore_enemies[ n ] then
            ignore_enemies[ n ] = {}
          end
          ignore_enemies[ n ][ k ] = true
        end
      end
    end
  end
  if level.name() == "l01_escape" then
    ogse_signals.get_mgr():subscribe({
      signal = "on_npc_spawn", fun = this.check_military_blockpost
    })
  end
end


-- некоторых сталкеров военные будут пропускать под мостом. А
-- некоторых - не будут.
local blockpost_pass = { "esc_bridge" }
function check_military_blockpost( obj )
  if math.random() > 0.6 then return end
  for _, k in ipairs( blockpost_pass ) do
    if not ignore_enemies[ k ] then ignore_enemies[ k ] = {} end
    ignore_enemies[ k ][ obj:name() ] = true
    if not ignore_enemies[ obj:name() ] then
      ignore_enemies[ obj:name() ] = {}
    end
    ignore_enemies[ obj:name() ][ k ] = true
  end
  --
  --log3("tbl ignore: %s", ignore_enemies)
end


local freq = 60000

function add_cache_rec( obj, enemy, is_enemy, freq )
  local binder = obj:binded_object()
  local cached = binder[ "dsh_enemies.cached" ]
  if cached then
    local t = cached[ enemy:id() ]
    if t then
      t[ 1 ] = is_enemy
      t[ 2 ] = time_global() + freq + math.random( freq / 10 )
    else
      cached[ enemy:id() ] = {
        is_enemy, time_global() + freq + math.random( freq / 10 )
      }
    end
  else
    binder[ "dsh_enemies.cached" ] = {
      [ enemy:id() ] = {
        is_enemy, time_global() + freq + math.random( freq / 10 )
      }
    }
  end
end

function get_cache_rec( obj, enemy )
  local is_enemy
  local binder = obj:binded_object()
  local cached = binder[ "dsh_enemies.cached" ]
  if cached and cached[ enemy:id() ] then
    local res, ttl = unpack( cached[ enemy:id() ] )
    if ttl <= time_global() then
      res = check_is_enemy_always( obj, enemy )
      add_cache_rec( obj, enemy, res, freq )
    end
    is_enemy = res
  else
    is_enemy = check_is_enemy_always( obj, enemy )
    add_cache_rec( obj, enemy, is_enemy, freq )
  end
  return is_enemy
end


function enemy_callback( obj, enemy, result )
  if db.actor and enemy:id() == db.actor:id() then return end
  local is_enemy = get_cache_rec( obj, enemy )
  if is_enemy == false then
	--log3("--[%s] ignoring enemy for [%s] and [%s]", script_name(), obj:name(), enemy:name())
    table.insert( result, is_enemy )
    return true
  else
	--log3("~~[%s] NOT ignoring enemy for [%s] and [%s]", script_name(), obj:name(), enemy:name())
  end
end


function check_is_enemy_always( obj, enemy )
  local ignories = {
    this.get_ignore_by_community,
    this.get_ignore_by_name_or_strn,
  }
  for _, f in ipairs( ignories ) do
    local ignore = f( obj )
    if ignore then
	  --log3("~~ignore tbl for obj [%s] is [%s]", obj:name(), ignore)
      local strn, begin_job = get_smart_terrain( enemy )
      for ignore_name, _ in pairs( ignore ) do
        if
          enemy:name() == ignore_name
          or ( IsStalker( enemy ) and enemy:profile_name() == ignore_name )
          or is_ignored_community( enemy, ignore_name )
          or ( strn and strn:name() == ignore_name --[[and begin_job]] )
        then
          return false
        end
      end
    end
  end
  --
  if level.name() == "l07_military" and obj:is_stalker() and enemy:is_stalker() and ( obj:character_community() == "freedom" or obj:character_community() == "dolg" ) and ( enemy:character_community() == "freedom" or enemy:character_community() == "dolg" ) then
    return has_alife_info("mil_freedom_under_attack") or has_alife_info("mil_max_arrive") or not has_alife_info("mil_patrol_dead")
  end
  --
  return true
end


function get_ignore_by_community( obj )
  local keys = {}
  if IsMonster( obj ) then
    table.insert( keys, "monster" )
  elseif IsStalker( obj ) then
    table.insert( keys, obj:character_community() )
  end
  for _, k in ipairs( keys ) do
    if ignore_enemies[ k ] then
      return ignore_enemies[ k ]
    end
  end
end


function is_ignored_community( enemy, ignore_name )
  local keys = {}
  if IsMonster( enemy ) then
    table.insert( keys, "monster" )
  elseif IsStalker( enemy ) then
    table.insert( keys, enemy:character_community() )
  end
  for _, k in ipairs( keys ) do
    if k == ignore_name then return true end
  end
  return false
end


function get_ignore_by_name_or_strn( obj )
  local strn = get_smart_terrain( obj )
  if strn and ignore_enemies[ strn:name() ] then
    return ignore_enemies[ strn:name() ]
  elseif IsStalker( obj ) and ignore_enemies[ obj:profile_name() ] then
    return ignore_enemies[ obj:profile_name() ]
  elseif ignore_enemies[ obj:name() ] then
    return ignore_enemies[ obj:name() ]
  end
end


function get_smart_terrain( obj )
  local sobj = alife():object( obj:id() )
  if sobj and sobj.smart_terrain_id then
    local strn_id = sobj:smart_terrain_id()
    if strn_id ~= 65535 then
      local strn      = alife():object( strn_id )
      local begin_job = false
      if strn and strn:is_initialized() then
        begin_job = ( strn.gulag.Object_didnt_begin_job[ sobj.id ] == false )
      end
      return strn, begin_job
    end
  end
end
